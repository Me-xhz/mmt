(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 0:
/*!**************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createApp) {__webpack_require__(/*! uni-pages */ 4);\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 5));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var pickUpGoods = function pickUpGoods() {return __webpack_require__.e(/*! import() | components/pickUpActivity/pickUpActivity */ \"components/pickUpActivity/pickUpActivity\").then(__webpack_require__.bind(null, /*! ./components/pickUpActivity/pickUpActivity */ 730));};\n\n\n\n_vue.default.component('pickUpGoods', pickUpGoods);var loading = function loading() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/loading/loading */ 9));};\n\n\n_vue.default.component('loading', loading);var pageBottomLogo = function pageBottomLogo() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/pageBottomLogo/pageBottomLogo */ 17));};\n\n\n_vue.default.component('pageBottomLogo', pageBottomLogo);var pageBottomLogo2 = function pageBottomLogo2() {return __webpack_require__.e(/*! import() | components/pageBottomLogo2/pageBottomLogo2 */ \"components/pageBottomLogo2/pageBottomLogo2\").then(__webpack_require__.bind(null, /*! @/components/pageBottomLogo2/pageBottomLogo2.vue */ 737));};\n\n\n_vue.default.component('pageBottomLogo2', pageBottomLogo2);var notice = function notice() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/notice/notice */ 24));};\n\n\n_vue.default.component('notice', notice);var envelopes = function envelopes() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/envelopes/envelopes */ 39));};\n\n\n_vue.default.component('envelopes', envelopes);var invitationGuide = function invitationGuide() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/invitationGuide/invitationGuide */ 46));};\n\n\n_vue.default.component('invitationGuide', invitationGuide);var navbar = function navbar() {return Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./components/navBar/navBar */ 53));};\n\n\n_vue.default.component('navbar', navbar);var wxparsevideo = function wxparsevideo() {return __webpack_require__.e(/*! import() | components/wxParseVideo */ \"components/wxParseVideo\").then(__webpack_require__.bind(null, /*! ./components/wxParseVideo.vue */ 742));};\n\n\n_vue.default.component('wxparsevideo', wxparsevideo);var wxparseimg = function wxparseimg() {return __webpack_require__.e(/*! import() | components/wxParseImg */ \"components/wxParseImg\").then(__webpack_require__.bind(null, /*! ./components/wxParseImg.vue */ 747));};\n\n\n_vue.default.component('wxparseimg', wxparseimg);var wxemojiview = function wxemojiview() {return __webpack_require__.e(/*! import() | components/WxEmojiView */ \"components/WxEmojiView\").then(__webpack_require__.bind(null, /*! ./components/WxEmojiView.vue */ 752));};\n\n\n_vue.default.component('wxemojiview', wxemojiview);var wxparse0 = function wxparse0() {return __webpack_require__.e(/*! import() | components/wxParse0 */ \"components/wxParse0\").then(__webpack_require__.bind(null, /*! ./components/wxParse0.vue */ 757));};\n\n\n_vue.default.component('wxparse0', wxparse0);var wxparse1 = function wxparse1() {return __webpack_require__.e(/*! import() | components/wxParse1 */ \"components/wxParse1\").then(__webpack_require__.bind(null, /*! ./components/wxParse1.vue */ 762));};\n\n\n_vue.default.component('wxparse1', wxparse1);var wxparse2 = function wxparse2() {return __webpack_require__.e(/*! import() | components/wxParse2 */ \"components/wxParse2\").then(__webpack_require__.bind(null, /*! ./components/wxParse2.vue */ 767));};\n\n\n_vue.default.component('wxparse2', wxparse2);var wxparse3 = function wxparse3() {return __webpack_require__.e(/*! import() | components/wxParse3 */ \"components/wxParse3\").then(__webpack_require__.bind(null, /*! ./components/wxParse3.vue */ 772));};\n\n\n_vue.default.component('wxparse3', wxparse3);var wxparse4 = function wxparse4() {return __webpack_require__.e(/*! import() | components/wxParse4 */ \"components/wxParse4\").then(__webpack_require__.bind(null, /*! ./components/wxParse4.vue */ 777));};\n\n\n_vue.default.component('wxparse4', wxparse4);var wxparse5 = function wxparse5() {return __webpack_require__.e(/*! import() | components/wxParse5 */ \"components/wxParse5\").then(__webpack_require__.bind(null, /*! ./components/wxParse5.vue */ 782));};\n\n\n_vue.default.component('wxparse5', wxparse5);var wxparse6 = function wxparse6() {return __webpack_require__.e(/*! import() | components/wxParse6 */ \"components/wxParse6\").then(__webpack_require__.bind(null, /*! ./components/wxParse6.vue */ 787));};\n\n\n_vue.default.component('wxparse6', wxparse6);var wxparse7 = function wxparse7() {return __webpack_require__.e(/*! import() | components/wxParse7 */ \"components/wxParse7\").then(__webpack_require__.bind(null, /*! ./components/wxParse7.vue */ 792));};\n\n\n_vue.default.component('wxparse7', wxparse7);var wxparse8 = function wxparse8() {return __webpack_require__.e(/*! import() | components/wxParse8 */ \"components/wxParse8\").then(__webpack_require__.bind(null, /*! ./components/wxParse8.vue */ 797));};\n\n\n_vue.default.component('wxparse8', wxparse8);var wxparse9 = function wxparse9() {return __webpack_require__.e(/*! import() | components/wxParse9 */ \"components/wxParse9\").then(__webpack_require__.bind(null, /*! ./components/wxParse9.vue */ 802));};\n\n\n_vue.default.component('wxparse9', wxparse9);var wxparse10 = function wxparse10() {return __webpack_require__.e(/*! import() | components/wxParse10 */ \"components/wxParse10\").then(__webpack_require__.bind(null, /*! ./components/wxParse10.vue */ 807));};\n\n\n_vue.default.component('wxparse10', wxparse10);var wxparse11 = function wxparse11() {return __webpack_require__.e(/*! import() | components/wxParse11 */ \"components/wxParse11\").then(__webpack_require__.bind(null, /*! ./components/wxParse11.vue */ 812));};\n\n\n_vue.default.component('wxparse11', wxparse11);var hidebtn = function hidebtn() {return __webpack_require__.e(/*! import() | components/hideBtn */ \"components/hideBtn\").then(__webpack_require__.bind(null, /*! ./components/hideBtn.vue */ 817));};\n\n\n_vue.default.component('hidebtn', hidebtn);var customizedbtn = function customizedbtn() {return __webpack_require__.e(/*! import() | components/customizedBtn */ \"components/customizedBtn\").then(__webpack_require__.bind(null, /*! ./components/customizedBtn.vue */ 822));};\n\n\n_vue.default.component('customizedbtn', customizedbtn);var minisubscribebtn = function minisubscribebtn() {return __webpack_require__.e(/*! import() | components/miniSubscribeBtn */ \"components/miniSubscribeBtn\").then(__webpack_require__.bind(null, /*! ./components/miniSubscribeBtn.vue */ 827));};\n\n\n_vue.default.component('minisubscribebtn', minisubscribebtn);var minifollowbtn = function minifollowbtn() {return __webpack_require__.e(/*! import() | components/miniFollowBtn */ \"components/miniFollowBtn\").then(__webpack_require__.bind(null, /*! ./components/miniFollowBtn.vue */ 832));};\n\n\n_vue.default.component('minifollowbtn', minifollowbtn);var longsubscribebtn = function longsubscribebtn() {return __webpack_require__.e(/*! import() | components/longSubscribeBtn */ \"components/longSubscribeBtn\").then(__webpack_require__.bind(null, /*! ./components/longSubscribeBtn.vue */ 837));};\n\n\n_vue.default.component('longsubscribebtn', longsubscribebtn);var longfollowbtn = function longfollowbtn() {return __webpack_require__.e(/*! import() | components/longFollowBtn */ \"components/longFollowBtn\").then(__webpack_require__.bind(null, /*! ./components/longFollowBtn.vue */ 842));};\n\n\n_vue.default.component('longfollowbtn', longfollowbtn);\n\n\n_vue.default.config.productionTip = false;\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread({},\n_App.default));\n\ncreateApp(app).$mount();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createApp\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbIlZ1ZSIsImNvbXBvbmVudCIsInBpY2tVcEdvb2RzIiwibG9hZGluZyIsInBhZ2VCb3R0b21Mb2dvIiwicGFnZUJvdHRvbUxvZ28yIiwibm90aWNlIiwiZW52ZWxvcGVzIiwiaW52aXRhdGlvbkd1aWRlIiwibmF2YmFyIiwid3hwYXJzZXZpZGVvIiwid3hwYXJzZWltZyIsInd4ZW1vaml2aWV3Iiwid3hwYXJzZTAiLCJ3eHBhcnNlMSIsInd4cGFyc2UyIiwid3hwYXJzZTMiLCJ3eHBhcnNlNCIsInd4cGFyc2U1Iiwid3hwYXJzZTYiLCJ3eHBhcnNlNyIsInd4cGFyc2U4Iiwid3hwYXJzZTkiLCJ3eHBhcnNlMTAiLCJ3eHBhcnNlMTEiLCJoaWRlYnRuIiwiY3VzdG9taXplZGJ0biIsIm1pbmlzdWJzY3JpYmVidG4iLCJtaW5pZm9sbG93YnRuIiwibG9uZ3N1YnNjcmliZWJ0biIsImxvbmdmb2xsb3didG4iLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiaURBQUE7QUFDQTtBQUNBLHVFOzs7O0FBSUFBLGFBQUlDLFNBQUosQ0FBYyxhQUFkLEVBQTZCQyxXQUE3QixFOzs7QUFHQUYsYUFBSUMsU0FBSixDQUFjLFNBQWQsRUFBeUJFLE9BQXpCLEU7OztBQUdBSCxhQUFJQyxTQUFKLENBQWMsZ0JBQWQsRUFBZ0NHLGNBQWhDLEU7OztBQUdBSixhQUFJQyxTQUFKLENBQWMsaUJBQWQsRUFBaUNJLGVBQWpDLEU7OztBQUdBTCxhQUFJQyxTQUFKLENBQWMsUUFBZCxFQUF3QkssTUFBeEIsRTs7O0FBR0FOLGFBQUlDLFNBQUosQ0FBYyxXQUFkLEVBQTJCTSxTQUEzQixFOzs7QUFHQVAsYUFBSUMsU0FBSixDQUFjLGlCQUFkLEVBQWlDTyxlQUFqQyxFOzs7QUFHQVIsYUFBSUMsU0FBSixDQUFjLFFBQWQsRUFBd0JRLE1BQXhCLEU7OztBQUdBVCxhQUFJQyxTQUFKLENBQWMsY0FBZCxFQUE4QlMsWUFBOUIsRTs7O0FBR0FWLGFBQUlDLFNBQUosQ0FBYyxZQUFkLEVBQTRCVSxVQUE1QixFOzs7QUFHQVgsYUFBSUMsU0FBSixDQUFjLGFBQWQsRUFBNkJXLFdBQTdCLEU7OztBQUdBWixhQUFJQyxTQUFKLENBQWMsVUFBZCxFQUEwQlksUUFBMUIsRTs7O0FBR0FiLGFBQUlDLFNBQUosQ0FBYyxVQUFkLEVBQTBCYSxRQUExQixFOzs7QUFHQWQsYUFBSUMsU0FBSixDQUFjLFVBQWQsRUFBMEJjLFFBQTFCLEU7OztBQUdBZixhQUFJQyxTQUFKLENBQWMsVUFBZCxFQUEwQmUsUUFBMUIsRTs7O0FBR0FoQixhQUFJQyxTQUFKLENBQWMsVUFBZCxFQUEwQmdCLFFBQTFCLEU7OztBQUdBakIsYUFBSUMsU0FBSixDQUFjLFVBQWQsRUFBMEJpQixRQUExQixFOzs7QUFHQWxCLGFBQUlDLFNBQUosQ0FBYyxVQUFkLEVBQTBCa0IsUUFBMUIsRTs7O0FBR0FuQixhQUFJQyxTQUFKLENBQWMsVUFBZCxFQUEwQm1CLFFBQTFCLEU7OztBQUdBcEIsYUFBSUMsU0FBSixDQUFjLFVBQWQsRUFBMEJvQixRQUExQixFOzs7QUFHQXJCLGFBQUlDLFNBQUosQ0FBYyxVQUFkLEVBQTBCcUIsUUFBMUIsRTs7O0FBR0F0QixhQUFJQyxTQUFKLENBQWMsV0FBZCxFQUEyQnNCLFNBQTNCLEU7OztBQUdBdkIsYUFBSUMsU0FBSixDQUFjLFdBQWQsRUFBMkJ1QixTQUEzQixFOzs7QUFHQXhCLGFBQUlDLFNBQUosQ0FBYyxTQUFkLEVBQXlCd0IsT0FBekIsRTs7O0FBR0F6QixhQUFJQyxTQUFKLENBQWMsZUFBZCxFQUErQnlCLGFBQS9CLEU7OztBQUdBMUIsYUFBSUMsU0FBSixDQUFjLGtCQUFkLEVBQWtDMEIsZ0JBQWxDLEU7OztBQUdBM0IsYUFBSUMsU0FBSixDQUFjLGVBQWQsRUFBK0IyQixhQUEvQixFOzs7QUFHQTVCLGFBQUlDLFNBQUosQ0FBYyxrQkFBZCxFQUFrQzRCLGdCQUFsQyxFOzs7QUFHQTdCLGFBQUlDLFNBQUosQ0FBYyxlQUFkLEVBQStCNkIsYUFBL0I7OztBQUdBOUIsYUFBSStCLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjs7QUFFQUMsYUFBSUMsTUFBSixHQUFhLEtBQWI7O0FBRUEsSUFBTUMsR0FBRyxHQUFHLElBQUluQyxZQUFKO0FBQ0xpQyxZQURLLEVBQVo7O0FBR0EsVUFBQUUsR0FBRyxFQUFDQyxNQUFKLEciLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcclxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcclxuXHJcbi8v56CN5Lu344CB5ou85Zui44CB5Y2z5bCG5byA5Zui55qE57uE5Lu2XHJcbmltcG9ydCBwaWNrVXBHb29kcyBmcm9tICcuL2NvbXBvbmVudHMvcGlja1VwQWN0aXZpdHkvcGlja1VwQWN0aXZpdHknXHJcblZ1ZS5jb21wb25lbnQoJ3BpY2tVcEdvb2RzJywgcGlja1VwR29vZHMpO1xyXG5cclxuaW1wb3J0IGxvYWRpbmcgZnJvbSBcIi4vY29tcG9uZW50cy9sb2FkaW5nL2xvYWRpbmdcIjtcclxuVnVlLmNvbXBvbmVudCgnbG9hZGluZycsIGxvYWRpbmcpO1xyXG5cclxuaW1wb3J0IHBhZ2VCb3R0b21Mb2dvIGZyb20gXCIuL2NvbXBvbmVudHMvcGFnZUJvdHRvbUxvZ28vcGFnZUJvdHRvbUxvZ29cIjtcclxuVnVlLmNvbXBvbmVudCgncGFnZUJvdHRvbUxvZ28nLCBwYWdlQm90dG9tTG9nbyk7XHJcblxyXG5pbXBvcnQgcGFnZUJvdHRvbUxvZ28yIGZyb20gJ0AvY29tcG9uZW50cy9wYWdlQm90dG9tTG9nbzIvcGFnZUJvdHRvbUxvZ28yLnZ1ZSdcclxuVnVlLmNvbXBvbmVudCgncGFnZUJvdHRvbUxvZ28yJywgcGFnZUJvdHRvbUxvZ28yKTtcclxuXHJcbmltcG9ydCBub3RpY2UgZnJvbSBcIi4vY29tcG9uZW50cy9ub3RpY2Uvbm90aWNlXCI7XHJcblZ1ZS5jb21wb25lbnQoJ25vdGljZScsIG5vdGljZSk7XHJcblxyXG5pbXBvcnQgZW52ZWxvcGVzIGZyb20gXCIuL2NvbXBvbmVudHMvZW52ZWxvcGVzL2VudmVsb3Blc1wiO1xyXG5WdWUuY29tcG9uZW50KCdlbnZlbG9wZXMnLCBlbnZlbG9wZXMpO1xyXG5cclxuaW1wb3J0IGludml0YXRpb25HdWlkZSBmcm9tIFwiLi9jb21wb25lbnRzL2ludml0YXRpb25HdWlkZS9pbnZpdGF0aW9uR3VpZGVcIjtcclxuVnVlLmNvbXBvbmVudCgnaW52aXRhdGlvbkd1aWRlJywgaW52aXRhdGlvbkd1aWRlKTtcclxuXHJcbmltcG9ydCBuYXZiYXIgZnJvbSBcIi4vY29tcG9uZW50cy9uYXZCYXIvbmF2QmFyXCI7XHJcblZ1ZS5jb21wb25lbnQoJ25hdmJhcicsIG5hdmJhcik7XHJcblxyXG5pbXBvcnQgd3hwYXJzZXZpZGVvIGZyb20gXCIuL2NvbXBvbmVudHMvd3hQYXJzZVZpZGVvLnZ1ZVwiO1xyXG5WdWUuY29tcG9uZW50KCd3eHBhcnNldmlkZW8nLCB3eHBhcnNldmlkZW8pO1xyXG5cclxuaW1wb3J0IHd4cGFyc2VpbWcgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlSW1nLnZ1ZVwiO1xyXG5WdWUuY29tcG9uZW50KCd3eHBhcnNlaW1nJywgd3hwYXJzZWltZyk7XHJcblxyXG5pbXBvcnQgd3hlbW9qaXZpZXcgZnJvbSBcIi4vY29tcG9uZW50cy9XeEVtb2ppVmlldy52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hlbW9qaXZpZXcnLCB3eGVtb2ppdmlldyk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTAgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlMC52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTAnLCB3eHBhcnNlMCk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTEgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlMS52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTEnLCB3eHBhcnNlMSk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTIgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlMi52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTInLCB3eHBhcnNlMik7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTMgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlMy52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTMnLCB3eHBhcnNlMyk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTQgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlNC52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTQnLCB3eHBhcnNlNCk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTUgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlNS52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTUnLCB3eHBhcnNlNSk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTYgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlNi52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTYnLCB3eHBhcnNlNik7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTcgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlNy52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTcnLCB3eHBhcnNlNyk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTggZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlOC52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTgnLCB3eHBhcnNlOCk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTkgZnJvbSBcIi4vY29tcG9uZW50cy93eFBhcnNlOS52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTknLCB3eHBhcnNlOSk7XHJcblxyXG5pbXBvcnQgd3hwYXJzZTEwIGZyb20gXCIuL2NvbXBvbmVudHMvd3hQYXJzZTEwLnZ1ZVwiO1xyXG5WdWUuY29tcG9uZW50KCd3eHBhcnNlMTAnLCB3eHBhcnNlMTApO1xyXG5cclxuaW1wb3J0IHd4cGFyc2UxMSBmcm9tIFwiLi9jb21wb25lbnRzL3d4UGFyc2UxMS52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnd3hwYXJzZTExJywgd3hwYXJzZTExKTtcclxuXHJcbmltcG9ydCBoaWRlYnRuIGZyb20gXCIuL2NvbXBvbmVudHMvaGlkZUJ0bi52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnaGlkZWJ0bicsIGhpZGVidG4pO1xyXG5cclxuaW1wb3J0IGN1c3RvbWl6ZWRidG4gZnJvbSBcIi4vY29tcG9uZW50cy9jdXN0b21pemVkQnRuLnZ1ZVwiO1xyXG5WdWUuY29tcG9uZW50KCdjdXN0b21pemVkYnRuJywgY3VzdG9taXplZGJ0bik7XHJcblxyXG5pbXBvcnQgbWluaXN1YnNjcmliZWJ0biBmcm9tIFwiLi9jb21wb25lbnRzL21pbmlTdWJzY3JpYmVCdG4udnVlXCI7XHJcblZ1ZS5jb21wb25lbnQoJ21pbmlzdWJzY3JpYmVidG4nLCBtaW5pc3Vic2NyaWJlYnRuKTtcclxuXHJcbmltcG9ydCBtaW5pZm9sbG93YnRuIGZyb20gXCIuL2NvbXBvbmVudHMvbWluaUZvbGxvd0J0bi52dWVcIjtcclxuVnVlLmNvbXBvbmVudCgnbWluaWZvbGxvd2J0bicsIG1pbmlmb2xsb3didG4pO1xyXG5cclxuaW1wb3J0IGxvbmdzdWJzY3JpYmVidG4gZnJvbSBcIi4vY29tcG9uZW50cy9sb25nU3Vic2NyaWJlQnRuLnZ1ZVwiO1xyXG5WdWUuY29tcG9uZW50KCdsb25nc3Vic2NyaWJlYnRuJywgbG9uZ3N1YnNjcmliZWJ0bik7XHJcblxyXG5pbXBvcnQgbG9uZ2ZvbGxvd2J0biBmcm9tIFwiLi9jb21wb25lbnRzL2xvbmdGb2xsb3dCdG4udnVlXCI7XHJcblZ1ZS5jb21wb25lbnQoJ2xvbmdmb2xsb3didG4nLCBsb25nZm9sbG93YnRuKTtcclxuXHJcblxyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTtcclxuXHJcbkFwcC5tcFR5cGUgPSAnYXBwJztcclxuXHJcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xyXG4gICAgLi4uQXBwXHJcbn0pO1xyXG5hcHAuJG1vdW50KCk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  maskWebview = maskWebview.parent() || maskWebview; // 再次检测父\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nvar api = /*#__PURE__*/Object.freeze({\n  requireNativePlugin: requireNativePlugin,\n  getSubNVueById: getSubNVueById });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref2)\n\n\n{var mocks = _ref2.mocks,initRefs = _ref2.initRefs;\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref3 =\n\n\n\n  event.detail || event.value,vuePid = _ref3.vuePid,vueOptions = _ref3.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref4.isPage,initRelation = _ref4.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref5)\n\n\n{var isPage = _ref5.isPage,initRelation = _ref5.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 103:
/*!*************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/wxParse/wxParse.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _showdown = _interopRequireDefault(__webpack_require__(/*! ./showdown */ 104));\nvar _html2json = _interopRequireDefault(__webpack_require__(/*! ./html2json */ 105));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**\n                                                                                                                                                               * author: Di (微信小程序开发工程师)\n                                                                                                                                                               * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n                                                                                                                                                               *               垂直微信小程序开发交流社区\n                                                                                                                                                               * \n                                                                                                                                                               * github地址: https://github.com/icindy/wxParse\n                                                                                                                                                               * \n                                                                                                                                                               * for: 微信小程序富文本解析\n                                                                                                                                                               * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n                                                                                                                                                               */ /**\n                                                                                                                                                                   * utils函数引入\n                                                                                                                                                                   **/ /**\n                                                                                                                                                                        * 配置及公有属性\n                                                                                                                                                                        **/ /**\n                                                                                                                                                                             * 主函数入口区\n                                                                                                                                                                             **/function wxParse() {var bindName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wxParseData';var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'html';var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '<div class=\"color:red;\">数据不能为空</div>';var target = arguments.length > 3 ? arguments[3] : undefined;var imagePadding = arguments.length > 4 ? arguments[4] : undefined;var that = target;var transData = {}; //存放转化后的数据\n  if (type == 'html') {transData = _html2json.default.html2json(data, bindName); //console.log(JSON.stringify(transData, ' ', ' '));\n  } else if (type == 'md' || type == 'markdown') {var converter = new _showdown.default.Converter();var html = converter.makeHtml(data);\n    transData = _html2json.default.html2json(html, bindName); //console.log(JSON.stringify(transData, ' ', ' '));\n  }\n\n  transData.view = {};\n  transData.view.imagePadding = 0;\n\n  if (typeof imagePadding != 'undefined') {\n    transData.view.imagePadding = imagePadding;\n  }\n\n  var bindData = {};\n  bindData[bindName] = transData;\n  that.setData(bindData);\n  that.wxParseImgLoad = wxParseImgLoad;\n  that.wxParseImgTap = wxParseImgTap;\n} // 图片点击事件\n\n\nfunction wxParseImgTap(e) {\n  var that = this;\n  var nowImgUrl = e.target.dataset.src;\n  var tagFrom = e.target.dataset.from;\n\n  if (typeof tagFrom != 'undefined' && tagFrom.length > 0) {\n    wx.previewImage({\n      current: nowImgUrl,\n      // 当前显示图片的http链接\n      urls: that[tagFrom].imageUrls // 需要预览的图片http链接列表\n    });\n\n  }\n}\n/**\n   * 图片视觉宽高计算函数区 \n   **/\n\n\nfunction wxParseImgLoad(e) {\n  var that = this;\n  var tagFrom = e.target.dataset.from;\n  var idx = e.target.dataset.idx;\n\n  if (typeof tagFrom != 'undefined' && tagFrom.length > 0) {\n    calMoreImageInfo(e, idx, that, tagFrom);\n  }\n} // 假循环获取计算图片视觉最佳宽高\n\n\nfunction calMoreImageInfo(e, idx, that, bindName) {\n  var temData = that[bindName];\n\n  if (temData.images.length == 0) {\n    return;\n  }\n\n  var temImages = temData.images; //因为无法获取view宽度 需要自定义padding进行计算，稍后处理\n\n  var recal = wxAutoImageCal(e.detail.width, e.detail.height, that, bindName);\n  temImages[idx].width = recal.imageWidth;\n  temImages[idx].height = recal.imageheight;\n  temData.images = temImages;\n  var bindData = {};\n  bindData[bindName] = temData;\n  that.setData(bindData);\n} // 计算视觉优先的图片宽高\n\n\nfunction wxAutoImageCal(originalWidth, originalHeight, that, bindName) {\n  //获取图片的原始长宽\n  var windowWidth = 0,\n  windowHeight = 0;\n  var autoWidth = 0,\n  autoHeight = 0;\n  var results = {};\n  wx.getSystemInfo({\n    success: function success(res) {\n      var padding = that[bindName].view.imagePadding;\n      windowWidth = res.windowWidth - 2 * padding;\n      windowHeight = res.windowHeight; //判断按照那种方式进行缩放\n      //    console.log(\"windowWidth\" + windowWidth);\n\n      if (originalWidth > windowWidth) {\n        //在图片width大于手机屏幕width时候\n        autoWidth = windowWidth; //      console.log(\"autoWidth\" + autoWidth);\n\n        autoHeight = autoWidth * originalHeight / originalWidth; //      console.log(\"autoHeight\" + autoHeight);\n\n        results.imageWidth = autoWidth;\n        results.imageheight = autoHeight;\n      } else {\n        //否则展示原来的数据\n        results.imageWidth = originalWidth;\n        results.imageheight = originalHeight;\n      }\n    } });\n\n  return results;\n}\n\nfunction wxParseTemArray(temArrayName, bindNameReg, total, that) {\n  var array = [];\n  var temData = that;\n  var obj = null;\n\n  for (var i = 0; i < total; i++) {\n    var simArr = temData[bindNameReg + i].nodes;\n    array.push(simArr);\n  }\n\n  temArrayName = temArrayName || 'wxParseTemArray';\n  obj = JSON.parse('{\"' + temArrayName + '\":\"\"}');\n  obj[temArrayName] = array;\n  that.setData(obj);\n}\n/**\n   * 配置emojis\n   * \n   */\n\n\nfunction emojisInit() {var reg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var baseSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/wxParse/emojis/\";var emojis = arguments.length > 2 ? arguments[2] : undefined;\n  _html2json.default.emojisInit(reg, baseSrc, emojis);\n}\n\nmodule.exports = {\n  wxParse: wxParse,\n  wxParseTemArray: wxParseTemArray,\n  emojisInit: emojisInit };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///103\n");

/***/ }),

/***/ 104:
/*!**************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/wxParse/showdown.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { /**\n               * \n               * showdown: https://github.com/showdownjs/showdown\n               * \n               * author: Di (微信小程序开发工程师)\n               * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n               *               垂直微信小程序开发交流社区\n               * \n               * github地址: https://github.com/icindy/wxParse\n               * \n               * for: 微信小程序富文本解析\n               * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n               */\nfunction getDefaultOpts(simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean' },\n\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean' },\n\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string' },\n\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer' },\n\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean' },\n\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean' },\n\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean' },\n\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean' },\n\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean' },\n\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean' },\n\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean' },\n\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean' },\n\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean' },\n\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix identation in es6 strings',\n      type: 'boolean' } };\n\n\n\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n\n  var ret = {};\n\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n\n  return ret;\n}\n/**\n   * Created by Tivie on 06-01-2015.\n   */\n// Private properties\n\n\nvar showdown = {},\nparsers = {},\nextensions = {},\nglobalOptions = getDefaultOpts(true),\nflavor = {\n  github: {\n    omitExtraWLInCodeBlocks: true,\n    prefixHeaderId: 'user-content-',\n    simplifiedAutoLink: true,\n    literalMidWordUnderscores: true,\n    strikethrough: true,\n    tables: true,\n    tablesHeaderId: true,\n    ghCodeBlocks: true,\n    tasklists: true },\n\n  vanilla: getDefaultOpts(true) };\n\n/**\n                                    * helper namespace\n                                    * @type {{}}\n                                    */\n\nshowdown.helper = {};\n/**\n                       * TODO LEGACY SUPPORT CODE\n                       * @type {{}}\n                       */\n\nshowdown.extensions = {};\n/**\n                           * Set a global option\n                           * @static\n                           * @param {string} key\n                           * @param {*} value\n                           * @returns {showdown}\n                           */\n\nshowdown.setOption = function (key, value) {\n  'use strict';\n\n  globalOptions[key] = value;\n  return this;\n};\n/**\n    * Get a global option\n    * @static\n    * @param {string} key\n    * @returns {*}\n    */\n\n\nshowdown.getOption = function (key) {\n  'use strict';\n\n  return globalOptions[key];\n};\n/**\n    * Get the global options\n    * @static\n    * @returns {{}}\n    */\n\n\nshowdown.getOptions = function () {\n  'use strict';\n\n  return globalOptions;\n};\n/**\n    * Reset global options to the default values\n    * @static\n    */\n\n\nshowdown.resetOptions = function () {\n  'use strict';\n\n  globalOptions = getDefaultOpts(true);\n};\n/**\n    * Set the flavor showdown should use as default\n    * @param {string} name\n    */\n\n\nshowdown.setFlavor = function (name) {\n  'use strict';\n\n  if (flavor.hasOwnProperty(name)) {\n    var preset = flavor[name];\n\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        globalOptions[option] = preset[option];\n      }\n    }\n  }\n};\n/**\n    * Get the default options\n    * @static\n    * @param {boolean} [simple=true]\n    * @returns {{}}\n    */\n\n\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n\n  return getDefaultOpts(simple);\n};\n/**\n    * Get or set a subParser\n    *\n    * subParser(name)       - Get a registered subParser\n    * subParser(name, func) - Register a subParser\n    * @static\n    * @param {string} name\n    * @param {function} [func]\n    * @returns {*}\n    */\n\n\nshowdown.subParser = function (name, func) {\n  'use strict';\n\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n/**\n    * Gets or registers an extension\n    * @static\n    * @param {string} name\n    * @param {object|function=} ext\n    * @returns {*}\n    */\n\n\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name); // Getter\n\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n\n    return extensions[name]; // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    } // Ensure extension is an array\n\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n/**\n    * Gets all extensions registered\n    * @returns {{}}\n    */\n\n\nshowdown.getAllExtensions = function () {\n  'use strict';\n\n  return extensions;\n};\n/**\n    * Remove an extension\n    * @param {string} name\n    */\n\n\nshowdown.removeExtension = function (name) {\n  'use strict';\n\n  delete extensions[name];\n};\n/**\n    * Removes all extensions\n    */\n\n\nshowdown.resetExtensions = function () {\n  'use strict';\n\n  extensions = {};\n};\n/**\n    * Validate extension\n    * @param {array} extension\n    * @param {string} name\n    * @returns {{valid: boolean, error: string}}\n    */\n\n\nfunction validate(extension, name) {\n  'use strict';\n\n  var errMsg = name ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n  ret = {\n    valid: true,\n    error: '' };\n\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n    ext = extension[i];\n\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase(); // normalize extension type\n\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln + ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n\n      if (!ext.regex instanceof RegExp) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n\n  return ret;\n}\n/**\n   * Validate extension\n   * @param {object} ext\n   * @returns {boolean}\n   */\n\n\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n\n  if (!validateExtension.valid) {\n    console.warn(__f__(validateExtension.error, \" at wxParse\\\\showdown.js:450\"));\n    return false;\n  }\n\n  return true;\n};\n/**\n    * showdownjs helper functions\n    */\n\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n/**\n   * Check if var is string\n   * @static\n   * @param {string} a\n   * @returns {boolean}\n   */\n\n\nshowdown.helper.isString = function isString(a) {\n  'use strict';\n\n  return typeof a === 'string' || a instanceof String;\n};\n/**\n    * Check if var is a function\n    * @static\n    * @param {string} a\n    * @returns {boolean}\n    */\n\n\nshowdown.helper.isFunction = function isFunction(a) {\n  'use strict';\n\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n/**\n    * ForEach helper function\n    * @static\n    * @param {*} obj\n    * @param {function} callback\n    */\n\n\nshowdown.helper.forEach = function forEach(obj, callback) {\n  'use strict';\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  }\n};\n/**\n    * isArray helper function\n    * @static\n    * @param {*} a\n    * @returns {boolean}\n    */\n\n\nshowdown.helper.isArray = function isArray(a) {\n  'use strict';\n\n  return a.constructor === Array;\n};\n/**\n    * Check if value is undefined\n    * @static\n    * @param {*} value The value to check.\n    * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n    */\n\n\nshowdown.helper.isUndefined = function isUndefined(value) {\n  'use strict';\n\n  return typeof value === 'undefined';\n};\n/**\n    * Standardidize extension name\n    * @static\n    * @param {string} s extension name\n    * @returns {string}\n    */\n\n\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n\n  return s.replace(/[_-]||\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback(wholeMatch, m1) {\n  'use strict';\n\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '~E' + charCodeToEscape + 'E';\n}\n/**\n   * Callback used to escape characters when passing through String.replace\n   * @static\n   * @param {string} wholeMatch\n   * @param {string} m1\n   * @returns {string}\n   */\n\n\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n/**\n                                                                      * Escape characters in a string\n                                                                      * @static\n                                                                      * @param {string} text\n                                                                      * @param {string} charsToEscape\n                                                                      * @param {boolean} afterBackslash\n                                                                      * @returns {XML|string|void|*}\n                                                                      */\n\nshowdown.helper.escapeCharacters = function escapeCharacters(text, charsToEscape, afterBackslash) {\n  'use strict'; // First we have to escape the escape characters so that\n  // we can build a character class out of them\n\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n  return text;\n};\n\nvar rgxFindMatchPos = function rgxFindMatchPos(str, left, right, flags) {\n  'use strict';\n\n  var f = flags || '',\n  g = f.indexOf('g') > -1,\n  x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n  l = new RegExp(left, f.replace(/g/g, '')),\n  pos = [],\n  t,\n  s,\n  m,\n  start,\n  end;\n\n  do {\n    t = 0;\n\n    while (m = x.exec(str)) {\n      if (l.test(m[0])) {\n        if (!t++) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (! --t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {\n              start: start,\n              end: s },\n\n            match: {\n              start: s,\n              end: m.index },\n\n            right: {\n              start: m.index,\n              end: end },\n\n            wholeMatch: {\n              start: start,\n              end: end } };\n\n\n          pos.push(obj);\n\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n/**\n    * matchRecursiveRegExp\n    *\n    * (c) 2007 Steven Levithan <stevenlevithan.com>\n    * MIT License\n    *\n    * Accepts a string to search, a left and right format delimiter\n    * as regex patterns, and optional regex flags. Returns an array\n    * of matches, allowing nested instances of left/right delimiters.\n    * Use the \"g\" flag to return all matches, otherwise only the\n    * first is returned. Be careful to ensure that the left and\n    * right format delimiters produce mutually exclusive matches.\n    * Backreferences are not supported within the right delimiter\n    * due to how it is internally combined with the left delimiter.\n    * When matching strings whose format delimiters are unbalanced\n    * to the left or right, the output is intentionally as a\n    * conventional regex library with recursion support would\n    * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n    * \"<\" and \">\" as the delimiters (both strings contain a single,\n    * balanced instance of \"<x>\").\n    *\n    * examples:\n    * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n    * returns: []\n    * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n    * returns: [\"t<<e>><s>\", \"\"]\n    * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n    * returns: [\"test\"]\n    */\n\n\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n  results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end), str.slice(matchPos[i].match.start, matchPos[i].match.end), str.slice(matchPos[i].left.start, matchPos[i].left.end), str.slice(matchPos[i].right.start, matchPos[i].right.end)]);\n  }\n\n  return results;\n};\n/**\n    *\n    * @param {string} str\n    * @param {string|function} replacement\n    * @param {string} left\n    * @param {string} right\n    * @param {string} flags\n    * @returns {string}\n    */\n\n\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n\n    replacement = function replacement() {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n  finalStr = str,\n  lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n\n    for (var i = 0; i < lng; ++i) {\n      bits.push(replacement(str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end), str.slice(matchPos[i].match.start, matchPos[i].match.end), str.slice(matchPos[i].left.start, matchPos[i].left.end), str.slice(matchPos[i].right.start, matchPos[i].right.end)));\n\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n\n    finalStr = bits.join('');\n  }\n\n  return finalStr;\n};\n/**\n    * POLYFILLS\n    */\n\n\nif (showdown.helper.isUndefined(console)) {\n  console = {\n    warn: function warn(msg) {\n      'use strict';\n\n      alert(msg);\n    },\n    log: function log(msg) {\n      'use strict';\n\n      alert(msg);\n    },\n    error: function error(msg) {\n      'use strict';\n\n      throw msg;\n    } };\n\n}\n/**\n   * Created by Estevao on 31-05-2015.\n   */\n\n/**\n       * Showdown Converter class\n       * @class\n       * @param {object} [converterOptions]\n       * @returns {Converter}\n       */\n\n\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n  /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n  options = {},\n\n  /**\n                 * Language extensions used by this converter\n                 * @private\n                 * @type {Array}\n                 */\n  langExtensions = [],\n\n  /**\n                        * Output modifiers extensions used by this converter\n                        * @private\n                        * @type {Array}\n                        */\n  outputModifiers = [],\n\n  /**\n                         * Event listeners\n                         * @private\n                         * @type {{}}\n                         */\n  listeners = {};\n\n  _constructor();\n  /**\n                   * Converter constructor\n                   * @private\n                   */\n\n\n  function _constructor() {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    } // Merge options\n\n\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions + ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n  /**\n     * Parse extension\n     * @param {*} ext\n     * @param {string} [name='']\n     * @private\n     */\n\n\n  function _parseExtension(ext, name) {\n    name = name || null; // If it's a string, the extension was previously loaded\n\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext; // LEGACY_SUPPORT CODE\n\n      if (showdown.extensions[ext]) {\n        console.warn(__f__('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' + 'Please inform the developer that the extension should be updated!', \" at wxParse\\\\showdown.js:854\"));\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return; // END LEGACY SUPPORT CODE\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;}\n\n\n      if (ext[i].hasOwnProperty(listeners)) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n  }\n  /**\n     * LEGACY_SUPPORT\n     * @param {*} ext\n     * @param {string} name\n     */\n\n\n  function legacyExtensionLoading(ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n\n        default:\n          // should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');}\n\n    }\n  }\n  /**\n     * Listen to an event\n     * @param {string} name\n     * @param {function} callback\n     */\n\n\n  function listen(name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText(text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n    rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n  /**\n     * Dispatch an event\n     * @private\n     * @param {string} evtName Event name\n     * @param {string} text Text\n     * @param {{}} options Converter Options\n     * @param {{}} globals\n     * @returns {string}\n     */\n\n\n  this._dispatch = function dispatch(evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n\n    return text;\n  };\n  /**\n      * Listen to an event\n      * @param {string} name\n      * @param {function} callback\n      * @returns {showdown.Converter}\n      */\n\n\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n  /**\n      * Converts a markdown string into HTML\n      * @param {string} text\n      * @returns {*}\n      */\n\n\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks: [],\n      gHtmlMdBlocks: [],\n      gHtmlSpans: [],\n      gUrls: {},\n      gTitles: {},\n      gDimensions: {},\n      gListLevel: 0,\n      hashLinkCounts: {},\n      langExtensions: langExtensions,\n      outputModifiers: outputModifiers,\n      converter: this,\n      ghCodeBlocks: [] };\n    // attacklab: Replace ~ with ~T\n    // This lets us use tilde as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n\n    text = text.replace(/~/g, '~T'); // attacklab: Replace $ with ~D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n\n    text = text.replace(/\\$/g, '~D'); // Standardize line endings\n\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    } // Make sure text begins and ends with a couple of newlines:\n    //text = '\\n\\n' + text + '\\n\\n';\n\n\n    text = text; // detab\n\n    text = showdown.subParser('detab')(text, options, globals); // stripBlankLines\n\n    text = showdown.subParser('stripBlankLines')(text, options, globals); //run languageExtensions\n\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    }); // run the sub parsers\n\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals); // attacklab: Restore dollar signs\n\n    text = text.replace(/~D/g, '$$'); // attacklab: Restore tildes\n\n    text = text.replace(/~T/g, '~'); // Run output modifiers\n\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n    return text;\n  };\n  /**\n      * Set an option of this Converter instance\n      * @param {string} key\n      * @param {*} value\n      */\n\n\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n  /**\n      * Get the option of this Converter instance\n      * @param {string} key\n      * @returns {*}\n      */\n\n\n  this.getOption = function (key) {\n    return options[key];\n  };\n  /**\n      * Get the options of this Converter instance\n      * @returns {{}}\n      */\n\n\n  this.getOptions = function () {\n    return options;\n  };\n  /**\n      * Add extension to THIS converter\n      * @param {{}} extension\n      * @param {string} [name=null]\n      */\n\n\n  this.addExtension = function (extension, name) {\n    name = name || null;\n\n    _parseExtension(extension, name);\n  };\n  /**\n      * Use a global registered extension with THIS converter\n      * @param {string} extensionName Name of the previously registered extension\n      */\n\n\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n  /**\n      * Set the flavor THIS converter should use\n      * @param {string} name\n      */\n\n\n  this.setFlavor = function (name) {\n    if (flavor.hasOwnProperty(name)) {\n      var preset = flavor[name];\n\n      for (var option in preset) {\n        if (preset.hasOwnProperty(option)) {\n          options[option] = preset[option];\n        }\n      }\n    }\n  };\n  /**\n      * Remove an extension from THIS converter.\n      * Note: This is a costly operation. It's better to initialize a new converter\n      * and specify the extensions you wish to use\n      * @param {Array} extension\n      */\n\n\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n  /**\n      * Get all extension of THIS converter\n      * @returns {{language: Array, output: Array}}\n      */\n\n\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers };\n\n  };\n};\n/**\n    * Turn Markdown link shortcuts into XHTML <a> tags.\n    */\n\n\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function writeAnchorTag(wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (showdown.helper.isUndefined(m7)) {\n      m7 = '';\n    }\n\n    wholeMatch = m1;\n    var linkText = m2,\n    linkId = m3.toLowerCase(),\n    url = m4,\n    title = m7;\n\n    if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        if (wholeMatch.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = '';\n        } else {\n          return wholeMatch;\n        }\n      }\n    }\n\n    url = showdown.helper.escapeCharacters(url, '*_', false);\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      title = showdown.helper.escapeCharacters(title, '*_', false);\n      result += ' title=\"' + title + '\"';\n    }\n\n    result += '>' + linkText + '</a>';\n    return result;\n  }; // First, handle reference-style links: [link text] [id]\n\n  /*\n   text = text.replace(/\n   (\t\t\t\t\t\t\t// wrap whole match in $1\n   \\[\n   (\n   (?:\n   \\[[^\\]]*\\]\t\t// allow brackets nested one level\n   |\n   [^\\[]\t\t\t// or anything else\n   )*\n   )\n   \\]\n    [ ]?\t\t\t\t\t// one optional space\n   (?:\\n[ ]*)?\t\t\t\t// one optional newline followed by spaces\n    \\[\n   (.*?)\t\t\t\t\t// id = $3\n   \\]\n   )()()()()\t\t\t\t\t// pad remaining backreferences\n   /g,_DoAnchors_callback);\n   */\n\n\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)][ ]?(?:\\n[ ]*)?\\[(.*?)])()()()()/g, writeAnchorTag); //\n  // Next, inline-style links: [link text](url \"optional title\")\n  //\n\n  /*\n   text = text.replace(/\n   (\t\t\t\t\t\t// wrap whole match in $1\n   \\[\n   (\n   (?:\n   \\[[^\\]]*\\]\t// allow brackets nested one level\n   |\n   [^\\[\\]]\t\t\t// or anything else\n   )\n   )\n   \\]\n   \\(\t\t\t\t\t\t// literal paren\n   [ \\t]*\n   ()\t\t\t\t\t\t// no id, so leave $3 empty\n   <?(.*?)>?\t\t\t\t// href = $4\n   [ \\t]*\n   (\t\t\t\t\t\t// $5\n   (['\"])\t\t\t\t// quote char = $6\n   (.*?)\t\t\t\t// Title = $7\n   \\6\t\t\t\t\t// matching quote\n   [ \\t]*\t\t\t\t// ignore any spaces/tabs between closing quote and )\n   )?\t\t\t\t\t\t// title is optional\n   \\)\n   )\n   /g,writeAnchorTag);\n   */\n\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g, writeAnchorTag); //\n  // Last, handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  //\n\n  /*\n   text = text.replace(/\n   (                // wrap whole match in $1\n   \\[\n   ([^\\[\\]]+)       // link text = $2; can't contain '[' or ']'\n   \\]\n   )()()()()()      // pad rest of backreferences\n   /g, writeAnchorTag);\n   */\n\n  text = text.replace(/(\\[([^\\[\\]]+)])()()()()()/g, writeAnchorTag);\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n  var simpleURLRegex = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)(?=\\s|$)(?![\"<>])/gi,\n  delimUrlRegex = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)>/gi,\n  simpleMailRegex = /(?:^|[ \\n\\t])([A-Za-z0-9!#$%&'*+-/=?^_`\\{|}~\\.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?:$|[ \\n\\t])/gi,\n  delimMailRegex = /<(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n  text = text.replace(delimUrlRegex, replaceLink);\n  text = text.replace(delimMailRegex, replaceMail); // simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[-.+~:?#@!$&'()*,;=[\\]\\w]+)\\b/gi,\n  // Email addresses: <address@domain.foo>\n\n  if (options.simplifiedAutoLink) {\n    text = text.replace(simpleURLRegex, replaceLink);\n    text = text.replace(simpleMailRegex, replaceMail);\n  }\n\n  function replaceLink(wm, link) {\n    var lnkTxt = link;\n\n    if (/^www\\./i.test(link)) {\n      link = link.replace(/^www\\./i, 'http://www.');\n    }\n\n    return '<a href=\"' + link + '\">' + lnkTxt + '</a>';\n  }\n\n  function replaceMail(wholeMatch, m1) {\n    var unescapedStr = showdown.subParser('unescapeSpecialChars')(m1);\n    return showdown.subParser('encodeEmailAddress')(unescapedStr);\n  }\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n  return text;\n});\n/**\n     * These are all the transformations that form block-level\n     * tags like paragraphs, headers, and list items.\n     */\n\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals); // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals); // Do Horizontal Rules:\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^[ ]{0,2}([ ]?_[ ]?){3,}[ \\t]*$/gm, key);\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals); // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n  return text;\n});\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n  /*\n                                                                                     text = text.replace(/\n                                                                                     (\t\t\t\t\t\t\t\t// Wrap whole match in $1\n                                                                                     (\n                                                                                     ^[ \\t]*>[ \\t]?\t\t\t// '>' at the start of a line\n                                                                                     .+\\n\t\t\t\t\t// rest of the first line\n                                                                                     (.+\\n)*\t\t\t\t\t// subsequent consecutive lines\n                                                                                     \\n*\t\t\t\t\t\t// blanks\n                                                                                     )+\n                                                                                     )\n                                                                                     /gm, function(){...});\n                                                                                     */\n\n  text = text.replace(/((^[ \\t]{0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1; // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '~0'); // trim one level of quoting\n    // attacklab: clean up hack\n\n    bq = bq.replace(/~0/g, '');\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  '); // These leading spaces screw with <pre> content, so we need to fix that:\n\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1; // attacklab: hack around Konqueror 3.5.4 bug:\n\n      pre = pre.replace(/^  /mg, '~0');\n      pre = pre.replace(/~0/g, '');\n      return pre;\n    });\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n/**\n     * Process Markdown `<pre><code>` blocks.\n     */\n\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n  /*\n                                                                                    text = text.replace(text,\n                                                                                    /(?:\\n\\n|^)\n                                                                                    (\t\t\t\t\t\t\t\t// $1 = the code block -- one or more lines, starting with a space/tab\n                                                                                    (?:\n                                                                                    (?:[ ]{4}|\\t)\t\t\t// Lines must start with a tab or a tab-width of spaces - attacklab: g_tab_width\n                                                                                    .*\\n+\n                                                                                    )+\n                                                                                    )\n                                                                                    (\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))\t// attacklab: g_tab_width\n                                                                                    /g,function(){...});\n                                                                                    */\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\n  text += '~0';\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n    nextChar = m2,\n    end = '\\n';\n    codeblock = showdown.subParser('outdent')(codeblock);\n    codeblock = showdown.subParser('encodeCode')(codeblock);\n    codeblock = showdown.subParser('detab')(codeblock);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  }); // attacklab: strip sentinel\n\n  text = text.replace(/~0/, '');\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n/**\n     *\n     *   *  Backtick quotes are used for <code></code> spans.\n     *\n     *   *  You can use multiple backticks as the delimiters if you want to\n     *     include literal backticks in the code span. So, this input:\n     *\n     *         Just type ``foo `bar` baz`` at the prompt.\n     *\n     *       Will translate to:\n     *\n     *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n     *\n     *    There's no arbitrary limit to the number of backticks you\n     *    can use as delimters. If you need three consecutive backticks\n     *    in your code, use four for delimiters, etc.\n     *\n     *  *  You can use spaces to get literal backticks at the edges:\n     *\n     *         ... type `` `bar` `` ...\n     *\n     *       Turns to:\n     *\n     *         ... type <code>`bar`</code> ...\n     */\n\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n  /*\n                                                                                   text = text.replace(/\n                                                                                   (^|[^\\\\])\t\t\t\t\t// Character before opening ` can't be a backslash\n                                                                                   (`+)\t\t\t\t\t\t// $2 = Opening run of `\n                                                                                   (\t\t\t\t\t\t\t// $3 = The code block\n                                                                                   [^\\r]*?\n                                                                                   [^`]\t\t\t\t\t// attacklab: work around lack of lookbehind\n                                                                                   )\n                                                                                   \\2\t\t\t\t\t\t\t// Matching closer\n                                                                                   (?!`)\n                                                                                   /gm, function(){...});\n                                                                                   */\n\n  if (typeof text === 'undefined') {\n    text = '';\n  }\n\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm, function (wholeMatch, m1, m2, m3) {\n    var c = m3;\n    c = c.replace(/^([ \\t]*)/g, ''); // leading whitespace\n\n    c = c.replace(/[ \\t]*$/g, ''); // trailing whitespace\n\n    c = showdown.subParser('encodeCode')(c);\n    return m1 + '<code>' + c + '</code>';\n  });\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n/**\n     * Convert all tabs to spaces\n     */\n\nshowdown.subParser('detab', function (text) {\n  'use strict'; // expand first n-1 tabs\n\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n  // replace the nth with two sentinels\n\n  text = text.replace(/\\t/g, '~A~B'); // use the sentinel to anchor our regex so it doesn't explode\n\n  text = text.replace(/~B(.+?)~A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n    numSpaces = 4 - leadingText.length % 4; // g_tab_width\n    // there *must* be a better way to do this:\n\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  }); // clean up sentinels\n\n  text = text.replace(/~A/g, '    '); // g_tab_width\n\n  text = text.replace(/~B/g, '');\n  return text;\n});\n/**\n     * Smart processing for ampersands and angle brackets that need to be encoded.\n     */\n\nshowdown.subParser('encodeAmpsAndAngles', function (text) {\n  'use strict'; // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;'); // Encode naked <'s\n\n  text = text.replace(/<(?![a-z\\/?\\$!])/gi, '&lt;');\n  return text;\n});\n/**\n     * Returns the string, with after processing the following backslash escape sequences.\n     *\n     * attacklab: The polite way to do this is with the new escapeCharacters() function:\n     *\n     *    text = escapeCharacters(text,\"\\\\\",true);\n     *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n     *\n     * ...but we're sidestepping its use of the (slow) RegExp constructor\n     * as an optimization for Firefox.  This function gets called a LOT.\n     */\n\nshowdown.subParser('encodeBackslashEscapes', function (text) {\n  'use strict';\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g, showdown.helper.escapeCharactersCallback);\n  return text;\n});\n/**\n     * Encode/escape certain characters inside Markdown code runs.\n     * The point is that in code, these characters are literals,\n     * and lose their special Markdown meanings.\n     */\n\nshowdown.subParser('encodeCode', function (text) {\n  'use strict'; // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n\n  text = text.replace(/&/g, '&amp;'); // Do the angle bracket song and dance:\n\n  text = text.replace(/</g, '&lt;');\n  text = text.replace(/>/g, '&gt;'); // Now, escape characters that are magic in Markdown:\n\n  text = showdown.helper.escapeCharacters(text, '*_{}[]\\\\', false); // jj the line above breaks this:\n  //---\n  //* Item\n  //   1. Subitem\n  //            special char: *\n  // ---\n\n  return text;\n});\n/**\n     *  Input: an email address, e.g. \"foo@example.com\"\n     *\n     *  Output: the email address as a mailto link, with each character\n     *    of the address encoded as either a decimal or hex entity, in\n     *    the hopes of foiling most address harvesting spam bots. E.g.:\n     *\n     *    <a href=\"&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;\n     *       x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;\">&#102;&#111;&#111;\n     *       &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>\n     *\n     *  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk\n     *  mailing list: <http://tinyurl.com/yu7ue>\n     *\n     */\n\nshowdown.subParser('encodeEmailAddress', function (addr) {\n  'use strict';\n\n  var encode = [function (ch) {\n    return '&#' + ch.charCodeAt(0) + ';';\n  }, function (ch) {\n    return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n  }, function (ch) {\n    return ch;\n  }];\n  addr = 'mailto:' + addr;\n  addr = addr.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else if (ch !== ':') {\n      // leave ':' alone (to spot mailto: later)\n      var r = Math.random(); // roughly 10% raw, 45% hex, 45% dec\n\n      ch = r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch);\n    }\n\n    return ch;\n  });\n  addr = '<a href=\"' + addr + '\">' + addr + '</a>';\n  addr = addr.replace(/\">.+:/g, '\">'); // strip the mailto: from the visible part\n\n  return addr;\n});\n/**\n     * Within tags -- meaning between < and > -- encode [\\ ` * _] so they\n     * don't conflict with their use in Markdown for code, italics and strong.\n     */\n\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text) {\n  'use strict'; // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n  text = text.replace(regex, function (wholeMatch) {\n    var tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g, '$1`');\n    tag = showdown.helper.escapeCharacters(tag, '\\\\`*_', false);\n    return tag;\n  });\n  return text;\n});\n/**\n     * Handle github codeblocks prior to running HashHTML so that\n     * HTML contained within the codeblock gets escaped properly\n     * Example:\n     * ```ruby\n     *     def hello_world(x)\n     *       puts \"Hello, #{x}\"\n     *     end\n     * ```\n     */\n\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict'; // early exit if option is not enabled\n\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n  text += '~0';\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = options.omitExtraWLInCodeBlocks ? '' : '\\n'; // First parse the github code block\n\n    codeblock = showdown.subParser('encodeCode')(codeblock);\n    codeblock = showdown.subParser('detab')(codeblock);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals); // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n\n    return '\\n\\n~G' + (globals.ghCodeBlocks.push({\n      text: wholeMatch,\n      codeblock: codeblock }) -\n    1) + 'G\\n\\n';\n  }); // attacklab: strip sentinel\n\n  text = text.replace(/~0/, '');\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  return '\\n\\n~K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n});\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1; // Undo double lines\n\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, ''); // strip trailing blank lines\n\n    blockText = blockText.replace(/\\n+$/g, ''); // Replace the element text with a marker (\"~KxK\" where x is its key)\n\n    blockText = '\\n\\n~K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n    return blockText;\n  };\n});\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n\n  var blockTags = ['pre', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'table', 'dl', 'ol', 'ul', 'script', 'noscript', 'form', 'fieldset', 'iframe', 'math', 'style', 'section', 'header', 'footer', 'nav', 'article', 'aside', 'address', 'audio', 'canvas', 'figure', 'hgroup', 'output', 'video', 'p'],\n  repFunc = function repFunc(wholeMatch, match, left, right) {\n    var txt = wholeMatch; // check if this html element is marked as markdown\n    // if so, it's contents should be parsed as markdown\n\n    if (left.search(/\\bmarkdown\\b/) !== -1) {\n      txt = left + globals.converter.makeHtml(match) + right;\n    }\n\n    return '\\n\\n~K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^(?: |\\\\t){0,3}<' + blockTags[i] + '\\\\b[^>]*>', '</' + blockTags[i] + '>', 'gim');\n  } // HR SPECIAL CASE\n\n\n  text = text.replace(/(\\n[ ]{0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g, showdown.subParser('hashElement')(text, options, globals)); // Special case for standalone HTML comments:\n\n  text = text.replace(/(<!--[\\s\\S]*?-->)/g, showdown.subParser('hashElement')(text, options, globals)); // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n\n  text = text.replace(/(?:\\n\\n)([ ]{0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g, showdown.subParser('hashElement')(text, options, globals));\n  return text;\n});\n/**\n     * Hash span elements that should not be parsed as markdown\n     */\n\nshowdown.subParser('hashHTMLSpans', function (text, config, globals) {\n  'use strict';\n\n  var matches = showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');\n\n  for (var i = 0; i < matches.length; ++i) {\n    text = text.replace(matches[i][0], '~L' + (globals.gHtmlSpans.push(matches[i][0]) - 1) + 'L');\n  }\n\n  return text;\n});\n/**\n     * Unhash HTML spans\n     */\n\nshowdown.subParser('unhashHTMLSpans', function (text, config, globals) {\n  'use strict';\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    text = text.replace('~L' + i + 'L', globals.gHtmlSpans[i]);\n  }\n\n  return text;\n});\n/**\n     * Hash span elements that should not be parsed as markdown\n     */\n\nshowdown.subParser('hashPreCodeTags', function (text, config, globals) {\n  'use strict';\n\n  var repFunc = function repFunc(wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match) + right;\n    return '\\n\\n~G' + (globals.ghCodeBlocks.push({\n      text: wholeMatch,\n      codeblock: codeblock }) -\n    1) + 'G\\n\\n';\n  };\n\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^(?: |\\\\t){0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^(?: |\\\\t){0,3}</code>\\\\s*</pre>', 'gim');\n  return text;\n});\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n  var prefixHeader = options.prefixHeaderId,\n  headerLevelStart = isNaN(parseInt(options.headerLevelStart)) ? 1 : parseInt(options.headerLevelStart),\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n  setextRegexH1 = options.smoothLivePreview ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n  setextRegexH2 = options.smoothLivePreview ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n    hID = options.noHeaderId ? '' : ' id=\"' + headerId(m1) + '\"',\n    hLevel = headerLevelStart,\n    hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n    hID = options.noHeaderId ? '' : ' id=\"' + headerId(m1) + '\"',\n    hLevel = headerLevelStart + 1,\n    hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  }); // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n\n  text = text.replace(/^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm, function (wholeMatch, m1, m2) {\n    var span = showdown.subParser('spanGamut')(m2, options, globals),\n    hID = options.noHeaderId ? '' : ' id=\"' + headerId(m2) + '\"',\n    hLevel = headerLevelStart - 1 + m1.length,\n    header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId(m) {\n    var title,\n    escapedId = m.replace(/[^\\w]/g, '').toLowerCase();\n\n    if (globals.hashLinkCounts[escapedId]) {\n      title = escapedId + '-' + globals.hashLinkCounts[escapedId]++;\n    } else {\n      title = escapedId;\n      globals.hashLinkCounts[escapedId] = 1;\n    } // Prefix id to prevent causing inadvertent pre-existing style matches.\n\n\n    if (prefixHeader === true) {\n      prefixHeader = 'section';\n    }\n\n    if (showdown.helper.isString(prefixHeader)) {\n      return prefixHeader + title;\n    }\n\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n/**\n     * Turn Markdown image shortcuts into <img> tags.\n     */\n\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n  var inlineRegExp = /!\\[(.*?)]\\s?\\([ \\t]*()<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(['\"])(.*?)\\6[ \\t]*)?\\)/g,\n  referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g;\n\n  function writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title) {\n    var gUrls = globals.gUrls,\n    gTitles = globals.gTitles,\n    gDims = globals.gDimensions;\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n\n    if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText.replace(/\"/g, '&quot;');\n    altText = showdown.helper.escapeCharacters(altText, '*_', false);\n    url = showdown.helper.escapeCharacters(url, '*_', false);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title.replace(/\"/g, '&quot;');\n      title = showdown.helper.escapeCharacters(title, '*_', false);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width = width === '*' ? 'auto' : width;\n      height = height === '*' ? 'auto' : height;\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n    return result;\n  } // First, handle reference-style labeled images: ![alt text][id]\n\n\n  text = text.replace(referenceRegExp, writeImageTag); // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n\n  text = text.replace(inlineRegExp, writeImageTag);\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  if (options.literalMidWordUnderscores) {\n    //underscores\n    // Since we are consuming a \\s character, we need to add it\n    text = text.replace(/(^|\\s|>|\\b)__(?=\\S)([\\s\\S]+?)__(?=\\b|<|\\s|$)/gm, '$1<strong>$2</strong>');\n    text = text.replace(/(^|\\s|>|\\b)_(?=\\S)([\\s\\S]+?)_(?=\\b|<|\\s|$)/gm, '$1<em>$2</em>'); //asterisks\n\n    text = text.replace(/(\\*\\*)(?=\\S)([^\\r]*?\\S[*]*)\\1/g, '<strong>$2</strong>');\n    text = text.replace(/(\\*)(?=\\S)([^\\r]*?\\S)\\1/g, '<em>$2</em>');\n  } else {\n    // <strong> must go first:\n    text = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g, '<strong>$2</strong>');\n    text = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g, '<em>$2</em>');\n  }\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n/**\n     * Form HTML ordered (numbered) and unordered (bulleted) lists.\n     */\n\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n  /**\n                                                                               * Process the contents of a single ordered or unordered list, splitting it\n                                                                               * into individual list items.\n                                                                               * @param {string} listStr\n                                                                               * @param {boolean} trimTrailing\n                                                                               * @returns {string}\n                                                                               */\n\n  function processListItems(listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++; // trim trailing blank lines:\n\n    listStr = listStr.replace(/\\n{2,}$/, '\\n'); // attacklab: add sentinel to emulate \\z\n\n    listStr += '~0';\n    var rgx = /(\\n)?(^[ \\t]*)([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm,\n    isParagraphed = /\\n[ \\t]*\\n(?!~0)/.test(listStr);\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = checked && checked.trim() !== '';\n      var item = showdown.subParser('outdent')(m4, options, globals),\n      bulletStyle = ''; // Support for github tasklists\n\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n\n          if (checked) {\n            otp += ' checked';\n          }\n\n          otp += '>';\n          return otp;\n        });\n      } // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n\n\n      if (m1 || item.search(/\\n{2,}/) > -1) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n      }\n\n      item = '\\n<li' + bulletStyle + '>' + item + '</li>\\n';\n      return item;\n    }); // attacklab: strip sentinel\n\n    listStr = listStr.replace(/~0/g, '');\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n  /**\n     * Check and parse consecutive lists (better fix for issue #142)\n     * @param {string} list\n     * @param {string} listType\n     * @param {boolean} trimTrailing\n     * @returns {string}\n     */\n\n\n  function parseConsecutiveLists(list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for UL and vice versa\n    var counterRxg = listType === 'ul' ? /^ {0,2}\\d+\\.[ \\t]/gm : /^ {0,2}[*+-][ \\t]/gm,\n    subLists = [],\n    result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL(txt) {\n        var pos = txt.search(counterRxg);\n\n        if (pos !== -1) {\n          // slice\n          result += '\\n\\n<' + listType + '>' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n\\n'; // invert counterType and listType\n\n          listType = listType === 'ul' ? 'ol' : 'ul';\n          counterRxg = listType === 'ul' ? /^ {0,2}\\d+\\.[ \\t]/gm : /^ {0,2}[*+-][ \\t]/gm; //recurse\n\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n\\n<' + listType + '>' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n\\n';\n        }\n      })(list);\n\n      for (var i = 0; i < subLists.length; ++i) {}\n    } else {\n      result = '\\n\\n<' + listType + '>' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n\\n';\n    }\n\n    return result;\n  } // attacklab: add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n\n\n  text += '~0'; // Re-usable pattern to match any entire ul or ol list:\n\n  var wholeList = /^(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm;\n\n  if (globals.gListLevel) {\n    text = text.replace(wholeList, function (wholeMatch, list, m2) {\n      var listType = m2.search(/[*+-]/g) > -1 ? 'ul' : 'ol';\n      return parseConsecutiveLists(list, listType, true);\n    });\n  } else {\n    wholeList = /(\\n\\n|^\\n?)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm; //wholeList = /(\\n\\n|^\\n?)( {0,3}([*+-]|\\d+\\.)[ \\t]+[\\s\\S]+?)(?=(~0)|(\\n\\n(?!\\t| {2,}| {0,3}([*+-]|\\d+\\.)[ \\t])))/g;\n\n    text = text.replace(wholeList, function (wholeMatch, m1, list, m3) {\n      var listType = m3.search(/[*+-]/g) > -1 ? 'ul' : 'ol';\n      return parseConsecutiveLists(list, listType);\n    });\n  } // attacklab: strip sentinel\n\n\n  text = text.replace(/~0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n/**\n     * Remove one level of line-leading tabs or spaces\n     */\n\nshowdown.subParser('outdent', function (text) {\n  'use strict'; // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '~0'); // attacklab: g_tab_width\n  // attacklab: clean up hack\n\n  text = text.replace(/~0/g, '');\n  return text;\n});\n/**\n     *\n     */\n\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals); // Strip leading and trailing lines:\n\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  var grafs = text.split(/\\n{2,}/g),\n  grafsOut = [],\n  end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i]; // if this is an HTML marker, copy it\n\n    if (str.search(/~(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n    } else {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n  /** Unhashify HTML blocks */\n\n\n  end = grafsOut.length;\n\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n    grafsOutIt = grafsOut[i],\n    codeFlag = false; // if this is a marker for an html block...\n\n    while (grafsOutIt.search(/~(K|G)(\\d+)\\1/) >= 0) {\n      var delim = RegExp.$1,\n      num = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?~(K|G)\\d+\\2(\\n\\n)?/, blockText); // Check if grafsOutIt is a pre->code\n\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n\n    grafsOut[i] = grafsOutIt;\n  }\n\n  text = grafsOut.join('\\n\\n'); // Strip leading and trailing lines:\n\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n/**\n     * Run extension\n     */\n\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n\n    if (!re instanceof RegExp) {\n      re = new RegExp(re, 'g');\n    }\n\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n/**\n     * These are all the transformations that occur *within* block-level\n     * tags like paragraphs, headers, and list items.\n     */\n\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals); // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals); // Make links out of things like `<http://example.com/>`\n  // Must come after _DoAnchors(), because you can use < and >\n  // delimiters in inline links like [this](<url>).\n\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals); // Do hard breaks:\n\n  text = text.replace(/  +\\n/g, ' <br />\\n');\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~T){2}([\\s\\S]+?)(?:~T){2}/g, '<del>$1</del>');\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n/**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n\nshowdown.subParser('stripBlankLines', function (text) {\n  'use strict';\n\n  return text.replace(/^[ \\t]+$/mg, '');\n});\n/**\n     * Strips link definitions from text, stores the URLs and titles in\n     * hash references.\n     * Link defs are in the form: ^[id]: url \"optional title\"\n     *\n     * ^[ ]{0,3}\\[(.+)\\]: // id = $1  attacklab: g_tab_width - 1\n     * [ \\t]*\n     * \\n?                  // maybe *one* newline\n     * [ \\t]*\n     * <?(\\S+?)>?          // url = $2\n     * [ \\t]*\n     * \\n?                // maybe one newline\n     * [ \\t]*\n     * (?:\n     * (\\n*)              // any lines skipped = $3 attacklab: lookbehind removed\n     * [\"(]\n     * (.+?)              // title = $4\n     * [\")]\n     * [ \\t]*\n     * )?                 // title is optional\n     * (?:\\n+|$)\n     * /gm,\n     * function(){...});\n     *\n     */\n\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=~0))/gm; // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n\n  text += '~0';\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url); // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width: width,\n          height: height };\n\n      }\n    } // Completely remove the definition from the text\n\n\n    return '';\n  }); // attacklab: strip sentinel\n\n  text = text.replace(/~0/, '');\n  return text;\n});\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^[ \\t]{0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|~0)/gm;\n\n  function parseStyles(sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders(header, style) {\n    var id = '';\n    header = header.trim();\n\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n\n    header = showdown.subParser('spanGamut')(header, options, globals);\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells(cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable(headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n    tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n\n      tb += '</tr>\\n';\n    }\n\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n  text = text.replace(tableRgx, function (rawTable) {\n    var i,\n    tableLines = rawTable.split('\\n'); // strip wrong first and last column if wrapped tables are used\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^[ \\t]{0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^[ \\t]{0,3}\\|/, '');\n      }\n\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) {\n      return s.trim();\n    }),\n    rawStyles = tableLines[1].split('|').map(function (s) {\n      return s.trim();\n    }),\n    rawCells = [],\n    headers = [],\n    styles = [],\n    cells = [];\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n\n      rawCells.push(tableLines[i].split('|').map(function (s) {\n        return s.trim();\n      }));\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {}\n\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n  return text;\n});\n/**\n     * Swap back in all the special characters we've hidden.\n     */\n\nshowdown.subParser('unescapeSpecialChars', function (text) {\n  'use strict';\n\n  text = text.replace(/~E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n  return text;\n});\nmodule.exports = showdown;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 8)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd3hQYXJzZS9zaG93ZG93bi5qcyJdLCJuYW1lcyI6WyJnZXREZWZhdWx0T3B0cyIsInNpbXBsZSIsImRlZmF1bHRPcHRpb25zIiwib21pdEV4dHJhV0xJbkNvZGVCbG9ja3MiLCJkZWZhdWx0VmFsdWUiLCJkZXNjcmliZSIsInR5cGUiLCJub0hlYWRlcklkIiwicHJlZml4SGVhZGVySWQiLCJoZWFkZXJMZXZlbFN0YXJ0IiwicGFyc2VJbWdEaW1lbnNpb25zIiwic2ltcGxpZmllZEF1dG9MaW5rIiwibGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlcyIsInN0cmlrZXRocm91Z2giLCJ0YWJsZXMiLCJ0YWJsZXNIZWFkZXJJZCIsImdoQ29kZUJsb2NrcyIsInRhc2tsaXN0cyIsInNtb290aExpdmVQcmV2aWV3Iiwic21hcnRJbmRlbnRhdGlvbkZpeCIsImRlc2NyaXB0aW9uIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicmV0Iiwib3B0IiwiaGFzT3duUHJvcGVydHkiLCJzaG93ZG93biIsInBhcnNlcnMiLCJleHRlbnNpb25zIiwiZ2xvYmFsT3B0aW9ucyIsImZsYXZvciIsImdpdGh1YiIsInZhbmlsbGEiLCJoZWxwZXIiLCJzZXRPcHRpb24iLCJrZXkiLCJ2YWx1ZSIsImdldE9wdGlvbiIsImdldE9wdGlvbnMiLCJyZXNldE9wdGlvbnMiLCJzZXRGbGF2b3IiLCJuYW1lIiwicHJlc2V0Iiwib3B0aW9uIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdWJQYXJzZXIiLCJmdW5jIiwiaXNTdHJpbmciLCJFcnJvciIsImV4dGVuc2lvbiIsImV4dCIsInN0ZEV4dE5hbWUiLCJpc1VuZGVmaW5lZCIsImlzQXJyYXkiLCJ2YWxpZEV4dGVuc2lvbiIsInZhbGlkYXRlIiwidmFsaWQiLCJlcnJvciIsImdldEFsbEV4dGVuc2lvbnMiLCJyZW1vdmVFeHRlbnNpb24iLCJyZXNldEV4dGVuc2lvbnMiLCJlcnJNc2ciLCJpIiwibGVuZ3RoIiwiYmFzZU1zZyIsInRvTG93ZXJDYXNlIiwibGlzdGVuZXJzIiwiZmlsdGVyIiwicmVnZXgiLCJsbiIsIlJlZ0V4cCIsInJlcGxhY2UiLCJ2YWxpZGF0ZUV4dGVuc2lvbiIsImNvbnNvbGUiLCJ3YXJuIiwiYSIsIlN0cmluZyIsImlzRnVuY3Rpb24iLCJnZXRUeXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZm9yRWFjaCIsIm9iaiIsImNhbGxiYWNrIiwiY29uc3RydWN0b3IiLCJBcnJheSIsInMiLCJlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2siLCJ3aG9sZU1hdGNoIiwibTEiLCJjaGFyQ29kZVRvRXNjYXBlIiwiY2hhckNvZGVBdCIsImVzY2FwZUNoYXJhY3RlcnMiLCJ0ZXh0IiwiY2hhcnNUb0VzY2FwZSIsImFmdGVyQmFja3NsYXNoIiwicmVnZXhTdHJpbmciLCJyZ3hGaW5kTWF0Y2hQb3MiLCJzdHIiLCJsZWZ0IiwicmlnaHQiLCJmbGFncyIsImYiLCJnIiwiaW5kZXhPZiIsIngiLCJsIiwicG9zIiwidCIsIm0iLCJzdGFydCIsImVuZCIsImV4ZWMiLCJ0ZXN0IiwibGFzdEluZGV4IiwiaW5kZXgiLCJtYXRjaCIsInB1c2giLCJtYXRjaFJlY3Vyc2l2ZVJlZ0V4cCIsIm1hdGNoUG9zIiwicmVzdWx0cyIsInNsaWNlIiwicmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCIsInJlcGxhY2VtZW50IiwicmVwU3RyIiwiZmluYWxTdHIiLCJsbmciLCJiaXRzIiwiam9pbiIsIm1zZyIsImFsZXJ0IiwibG9nIiwiQ29udmVydGVyIiwiY29udmVydGVyT3B0aW9ucyIsIm9wdGlvbnMiLCJsYW5nRXh0ZW5zaW9ucyIsIm91dHB1dE1vZGlmaWVycyIsIl9jb25zdHJ1Y3RvciIsImdPcHQiLCJfcGFyc2VFeHRlbnNpb24iLCJsZWdhY3lFeHRlbnNpb25Mb2FkaW5nIiwidmFsaWRFeHQiLCJsaXN0ZW4iLCJyVHJpbUlucHV0VGV4dCIsInJzcCIsInJneCIsIl9kaXNwYXRjaCIsImRpc3BhdGNoIiwiZXZ0TmFtZSIsImdsb2JhbHMiLCJlaSIsIm5UZXh0IiwibWFrZUh0bWwiLCJnSHRtbEJsb2NrcyIsImdIdG1sTWRCbG9ja3MiLCJnSHRtbFNwYW5zIiwiZ1VybHMiLCJnVGl0bGVzIiwiZ0RpbWVuc2lvbnMiLCJnTGlzdExldmVsIiwiaGFzaExpbmtDb3VudHMiLCJjb252ZXJ0ZXIiLCJhZGRFeHRlbnNpb24iLCJ1c2VFeHRlbnNpb24iLCJleHRlbnNpb25OYW1lIiwic3BsaWNlIiwiaWkiLCJsYW5ndWFnZSIsIm91dHB1dCIsIndyaXRlQW5jaG9yVGFnIiwibTIiLCJtMyIsIm00IiwibTUiLCJtNiIsIm03IiwibGlua1RleHQiLCJsaW5rSWQiLCJ1cmwiLCJ0aXRsZSIsInNlYXJjaCIsInJlc3VsdCIsInNpbXBsZVVSTFJlZ2V4IiwiZGVsaW1VcmxSZWdleCIsInNpbXBsZU1haWxSZWdleCIsImRlbGltTWFpbFJlZ2V4IiwicmVwbGFjZUxpbmsiLCJyZXBsYWNlTWFpbCIsIndtIiwibGluayIsImxua1R4dCIsInVuZXNjYXBlZFN0ciIsImJxIiwicHJlIiwicGF0dGVybiIsImNvZGVibG9jayIsIm5leHRDaGFyIiwiYyIsImxlYWRpbmdUZXh0IiwibnVtU3BhY2VzIiwiYWRkciIsImVuY29kZSIsImNoIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiciIsInRhZyIsImJsb2NrVGV4dCIsImJsb2NrVGFncyIsInJlcEZ1bmMiLCJ0eHQiLCJjb25maWciLCJtYXRjaGVzIiwicHJlZml4SGVhZGVyIiwiaXNOYU4iLCJwYXJzZUludCIsInNldGV4dFJlZ2V4SDEiLCJzZXRleHRSZWdleEgyIiwic3BhbkdhbXV0IiwiaElEIiwiaGVhZGVySWQiLCJoTGV2ZWwiLCJoYXNoQmxvY2siLCJtYXRjaEZvdW5kIiwic3BhbiIsImhlYWRlciIsImVzY2FwZWRJZCIsImlubGluZVJlZ0V4cCIsInJlZmVyZW5jZVJlZ0V4cCIsIndyaXRlSW1hZ2VUYWciLCJhbHRUZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJnRGltcyIsInByb2Nlc3NMaXN0SXRlbXMiLCJsaXN0U3RyIiwidHJpbVRyYWlsaW5nIiwiaXNQYXJhZ3JhcGhlZCIsInRhc2tidG4iLCJjaGVja2VkIiwidHJpbSIsIml0ZW0iLCJidWxsZXRTdHlsZSIsIm90cCIsInBhcnNlQ29uc2VjdXRpdmVMaXN0cyIsImxpc3QiLCJsaXN0VHlwZSIsImNvdW50ZXJSeGciLCJzdWJMaXN0cyIsInBhcnNlQ0wiLCJ3aG9sZUxpc3QiLCJncmFmcyIsInNwbGl0IiwiZ3JhZnNPdXQiLCJncmFmc091dEl0IiwiY29kZUZsYWciLCJkZWxpbSIsIiQxIiwibnVtIiwiJDIiLCJyZSIsImJsYW5rTGluZXMiLCJ0YWJsZVJneCIsInBhcnNlU3R5bGVzIiwic0xpbmUiLCJwYXJzZUhlYWRlcnMiLCJzdHlsZSIsImlkIiwidGFibGVIZWFkZXJJZCIsInBhcnNlQ2VsbHMiLCJjZWxsIiwic3ViVGV4dCIsImJ1aWxkVGFibGUiLCJoZWFkZXJzIiwiY2VsbHMiLCJ0YiIsInRibExnbiIsInJhd1RhYmxlIiwidGFibGVMaW5lcyIsInJhd0hlYWRlcnMiLCJtYXAiLCJyYXdTdHlsZXMiLCJyYXdDZWxscyIsInN0eWxlcyIsInNoaWZ0Iiwicm93IiwiY2hhckNvZGVUb1JlcGxhY2UiLCJmcm9tQ2hhckNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOENBQUE7Ozs7Ozs7Ozs7Ozs7QUFhQSxTQUFTQSxjQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUM5Qjs7QUFFQSxNQUFJQyxjQUFjLEdBQUc7QUFDbkJDLDJCQUF1QixFQUFFO0FBQ3ZCQyxrQkFBWSxFQUFFLEtBRFM7QUFFdkJDLGNBQVEsRUFBRSx1REFGYTtBQUd2QkMsVUFBSSxFQUFFLFNBSGlCLEVBRE47O0FBTW5CQyxjQUFVLEVBQUU7QUFDVkgsa0JBQVksRUFBRSxLQURKO0FBRVZDLGNBQVEsRUFBRSxpQ0FGQTtBQUdWQyxVQUFJLEVBQUUsU0FISSxFQU5POztBQVduQkUsa0JBQWMsRUFBRTtBQUNkSixrQkFBWSxFQUFFLEtBREE7QUFFZEMsY0FBUSxFQUFF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RCxJQUFQO0FBQ0QsQ0FwSUQ7QUFxSUE7Ozs7QUFJQW5FLFFBQVEsQ0FBQ21CLFNBQVQsQ0FBbUIsc0JBQW5CLEVBQTJDLFVBQVVnRCxJQUFWLEVBQWdCO0FBQ3pEOztBQUVBQSxNQUFJLEdBQUdBLElBQUksQ0FBQ3RCLE9BQUwsQ0FBYSxXQUFiLEVBQTBCLFVBQVVpQixVQUFWLEVBQXNCQyxFQUF0QixFQUEwQjtBQUN6RCxRQUFJc00saUJBQWlCLEdBQUd2RSxRQUFRLENBQUMvSCxFQUFELENBQWhDO0FBQ0EsV0FBT2IsTUFBTSxDQUFDb04sWUFBUCxDQUFvQkQsaUJBQXBCLENBQVA7QUFDRCxHQUhNLENBQVA7QUFJQSxTQUFPbE0sSUFBUDtBQUNELENBUkQ7QUFTQW9NLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhRLFFBQWpCLEMiLCJmaWxlIjoiMTA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBcbiAqIHNob3dkb3duOiBodHRwczovL2dpdGh1Yi5jb20vc2hvd2Rvd25qcy9zaG93ZG93blxuICogXG4gKiBhdXRob3I6IERpICjlvq7kv6HlsI/nqIvluo/lvIDlj5Hlt6XnqIvluIgpXG4gKiBvcmdhbml6YXRpb246IFdlQXBwRGV2KOW+ruS/oeWwj+eoi+W6j+W8gOWPkeiuuuWdmykoaHR0cDovL3dlYXBwZGV2LmNvbSlcbiAqICAgICAgICAgICAgICAg5Z6C55u05b6u5L+h5bCP56iL5bqP5byA5Y+R5Lqk5rWB56S+5Yy6XG4gKiBcbiAqIGdpdGh1YuWcsOWdgDogaHR0cHM6Ly9naXRodWIuY29tL2ljaW5keS93eFBhcnNlXG4gKiBcbiAqIGZvcjog5b6u5L+h5bCP56iL5bqP5a+M5paH5pys6Kej5p6QXG4gKiBkZXRhaWwgOiBodHRwOi8vd2VhcHBkZXYuY29tL3Qvd3hwYXJzZS1hbHBoYTAtMS1odG1sLW1hcmtkb3duLzE4NFxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0T3B0cyhzaW1wbGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2Nrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnT21pdCB0aGUgZGVmYXVsdCBleHRyYSB3aGl0ZWxpbmUgYWRkZWQgdG8gY29kZSBibG9ja3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBub0hlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBnZW5lcmF0ZWQgaGVhZGVyIGlkJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgcHJlZml4SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1NwZWNpZnkgYSBwcmVmaXggdG8gZ2VuZXJhdGVkIGhlYWRlciBpZHMnLFxuICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIGhlYWRlckxldmVsU3RhcnQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1RoZSBoZWFkZXIgYmxvY2tzIGxldmVsIHN0YXJ0JyxcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJ1xuICAgIH0sXG4gICAgcGFyc2VJbWdEaW1lbnNpb25zOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBpbWFnZSBkaW1lbnNpb24gcGFyc2luZycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNpbXBsaWZpZWRBdXRvTGluazoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIGF1dG9saW5rIHN0eWxlJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUGFyc2UgbWlkd29yZCB1bmRlcnNjb3JlcyBhcyBsaXRlcmFsIHVuZGVyc2NvcmVzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc3RyaWtldGhyb3VnaDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgc3RyaWtldGhyb3VnaCBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdGFibGVzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiB0YWJsZXMgc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHRhYmxlc0hlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdBZGQgYW4gaWQgdG8gdGFibGUgaGVhZGVycycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGdoQ29kZUJsb2Nrczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBHRk0gZmVuY2VkIGNvZGUgYmxvY2tzIHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB0YXNrbGlzdHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIEdGTSB0YXNrbGlzdCBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgc21vb3RoTGl2ZVByZXZpZXc6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1ByZXZlbnRzIHdlaXJkIGVmZmVjdHMgaW4gbGl2ZSBwcmV2aWV3cyBkdWUgdG8gaW5jb21wbGV0ZSBpbnB1dCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNtYXJ0SW5kZW50YXRpb25GaXg6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmlwdGlvbjogJ1RyaWVzIHRvIHNtYXJ0bHkgZml4IGlkZW50YXRpb24gaW4gZXM2IHN0cmluZ3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfVxuICB9O1xuXG4gIGlmIChzaW1wbGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGVmYXVsdE9wdGlvbnMpKTtcbiAgfVxuXG4gIHZhciByZXQgPSB7fTtcblxuICBmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpIHtcbiAgICBpZiAoZGVmYXVsdE9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0W29wdF0gPSBkZWZhdWx0T3B0aW9uc1tvcHRdLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuLyoqXG4gKiBDcmVhdGVkIGJ5IFRpdmllIG9uIDA2LTAxLTIwMTUuXG4gKi9cbi8vIFByaXZhdGUgcHJvcGVydGllc1xuXG5cbnZhciBzaG93ZG93biA9IHt9LFxuICAgIHBhcnNlcnMgPSB7fSxcbiAgICBleHRlbnNpb25zID0ge30sXG4gICAgZ2xvYmFsT3B0aW9ucyA9IGdldERlZmF1bHRPcHRzKHRydWUpLFxuICAgIGZsYXZvciA9IHtcbiAgZ2l0aHViOiB7XG4gICAgb21pdEV4dHJhV0xJbkNvZGVCbG9ja3M6IHRydWUsXG4gICAgcHJlZml4SGVhZGVySWQ6ICd1c2VyLWNvbnRlbnQtJyxcbiAgICBzaW1wbGlmaWVkQXV0b0xpbms6IHRydWUsXG4gICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlczogdHJ1ZSxcbiAgICBzdHJpa2V0aHJvdWdoOiB0cnVlLFxuICAgIHRhYmxlczogdHJ1ZSxcbiAgICB0YWJsZXNIZWFkZXJJZDogdHJ1ZSxcbiAgICBnaENvZGVCbG9ja3M6IHRydWUsXG4gICAgdGFza2xpc3RzOiB0cnVlXG4gIH0sXG4gIHZhbmlsbGE6IGdldERlZmF1bHRPcHRzKHRydWUpXG59O1xuLyoqXG4gKiBoZWxwZXIgbmFtZXNwYWNlXG4gKiBAdHlwZSB7e319XG4gKi9cblxuc2hvd2Rvd24uaGVscGVyID0ge307XG4vKipcbiAqIFRPRE8gTEVHQUNZIFNVUFBPUlQgQ09ERVxuICogQHR5cGUge3t9fVxuICovXG5cbnNob3dkb3duLmV4dGVuc2lvbnMgPSB7fTtcbi8qKlxuICogU2V0IGEgZ2xvYmFsIG9wdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybnMge3Nob3dkb3dufVxuICovXG5cbnNob3dkb3duLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBnbG9iYWxPcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuLyoqXG4gKiBHZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuXG5cbnNob3dkb3duLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiBnbG9iYWxPcHRpb25zW2tleV07XG59O1xuLyoqXG4gKiBHZXQgdGhlIGdsb2JhbCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcmV0dXJucyB7e319XG4gKi9cblxuXG5zaG93ZG93bi5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGdsb2JhbE9wdGlvbnM7XG59O1xuLyoqXG4gKiBSZXNldCBnbG9iYWwgb3B0aW9ucyB0byB0aGUgZGVmYXVsdCB2YWx1ZXNcbiAqIEBzdGF0aWNcbiAqL1xuXG5cbnNob3dkb3duLnJlc2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGdsb2JhbE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0cyh0cnVlKTtcbn07XG4vKipcbiAqIFNldCB0aGUgZmxhdm9yIHNob3dkb3duIHNob3VsZCB1c2UgYXMgZGVmYXVsdFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuXG5cbnNob3dkb3duLnNldEZsYXZvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoZmxhdm9yLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgdmFyIHByZXNldCA9IGZsYXZvcltuYW1lXTtcblxuICAgIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICAgIGlmIChwcmVzZXQuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICBnbG9iYWxPcHRpb25zW29wdGlvbl0gPSBwcmVzZXRbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaW1wbGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuXG5cbnNob3dkb3duLmdldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gKHNpbXBsZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGdldERlZmF1bHRPcHRzKHNpbXBsZSk7XG59O1xuLyoqXG4gKiBHZXQgb3Igc2V0IGEgc3ViUGFyc2VyXG4gKlxuICogc3ViUGFyc2VyKG5hbWUpICAgICAgIC0gR2V0IGEgcmVnaXN0ZXJlZCBzdWJQYXJzZXJcbiAqIHN1YlBhcnNlcihuYW1lLCBmdW5jKSAtIFJlZ2lzdGVyIGEgc3ViUGFyc2VyXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2Z1bmNdXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuXG5cbnNob3dkb3duLnN1YlBhcnNlciA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG5hbWUpKSB7XG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2Vyc1tuYW1lXSA9IGZ1bmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJzZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXJzW25hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1N1YlBhcnNlciBuYW1lZCAnICsgbmFtZSArICcgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuLyoqXG4gKiBHZXRzIG9yIHJlZ2lzdGVycyBhbiBleHRlbnNpb25cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbj19IGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cblxuXG5zaG93ZG93bi5leHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSwgZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXFwnbmFtZVxcJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBuYW1lID0gc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUobmFtZSk7IC8vIEdldHRlclxuXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0KSkge1xuICAgIGlmICghZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBuYW1lZCAnICsgbmFtZSArICcgaXMgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dGVuc2lvbnNbbmFtZV07IC8vIFNldHRlclxuICB9IGVsc2Uge1xuICAgIC8vIEV4cGFuZCBleHRlbnNpb24gaWYgaXQncyB3cmFwcGVkIGluIGEgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXh0ID0gZXh0KCk7XG4gICAgfSAvLyBFbnN1cmUgZXh0ZW5zaW9uIGlzIGFuIGFycmF5XG5cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkRXh0ZW5zaW9uID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICh2YWxpZEV4dGVuc2lvbi52YWxpZCkge1xuICAgICAgZXh0ZW5zaW9uc1tuYW1lXSA9IGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IodmFsaWRFeHRlbnNpb24uZXJyb3IpO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogR2V0cyBhbGwgZXh0ZW5zaW9ucyByZWdpc3RlcmVkXG4gKiBAcmV0dXJucyB7e319XG4gKi9cblxuXG5zaG93ZG93bi5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIGV4dGVuc2lvbnM7XG59O1xuLyoqXG4gKiBSZW1vdmUgYW4gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5cblxuc2hvd2Rvd24ucmVtb3ZlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGRlbGV0ZSBleHRlbnNpb25zW25hbWVdO1xufTtcbi8qKlxuICogUmVtb3ZlcyBhbGwgZXh0ZW5zaW9uc1xuICovXG5cblxuc2hvd2Rvd24ucmVzZXRFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXh0ZW5zaW9ucyA9IHt9O1xufTtcbi8qKlxuICogVmFsaWRhdGUgZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge2FycmF5fSBleHRlbnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7e3ZhbGlkOiBib29sZWFuLCBlcnJvcjogc3RyaW5nfX1cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlKGV4dGVuc2lvbiwgbmFtZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGVyck1zZyA9IG5hbWUgPyAnRXJyb3IgaW4gJyArIG5hbWUgKyAnIGV4dGVuc2lvbi0+JyA6ICdFcnJvciBpbiB1bm5hbWVkIGV4dGVuc2lvbicsXG4gICAgICByZXQgPSB7XG4gICAgdmFsaWQ6IHRydWUsXG4gICAgZXJyb3I6ICcnXG4gIH07XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgZXh0ZW5zaW9uID0gW2V4dGVuc2lvbl07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiYXNlTXNnID0gZXJyTXNnICsgJyBzdWItZXh0ZW5zaW9uICcgKyBpICsgJzogJyxcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBleHQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnbXVzdCBiZSBhbiBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGV4dCArICcgZ2l2ZW4nO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhleHQudHlwZSkpIHtcbiAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdwcm9wZXJ0eSBcInR5cGVcIiBtdXN0IGJlIGEgc3RyaW5nLCBidXQgJyArIHR5cGVvZiBleHQudHlwZSArICcgZ2l2ZW4nO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IGV4dC50eXBlID0gZXh0LnR5cGUudG9Mb3dlckNhc2UoKTsgLy8gbm9ybWFsaXplIGV4dGVuc2lvbiB0eXBlXG5cbiAgICBpZiAodHlwZSA9PT0gJ2xhbmd1YWdlJykge1xuICAgICAgdHlwZSA9IGV4dC50eXBlID0gJ2xhbmcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnaHRtbCcpIHtcbiAgICAgIHR5cGUgPSBleHQudHlwZSA9ICdvdXRwdXQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlICE9PSAnbGFuZycgJiYgdHlwZSAhPT0gJ291dHB1dCcgJiYgdHlwZSAhPT0gJ2xpc3RlbmVyJykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ3R5cGUgJyArIHR5cGUgKyAnIGlzIG5vdCByZWNvZ25pemVkLiBWYWxpZCB2YWx1ZXM6IFwibGFuZy9sYW5ndWFnZVwiLCBcIm91dHB1dC9odG1sXCIgb3IgXCJsaXN0ZW5lclwiJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdsaXN0ZW5lcicpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0Lmxpc3RlbmVycykpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnLiBFeHRlbnNpb25zIG9mIHR5cGUgXCJsaXN0ZW5lclwiIG11c3QgaGF2ZSBhIHByb3BlcnR5IGNhbGxlZCBcImxpc3RlbmVyc1wiJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQuZmlsdGVyKSAmJiBzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlZ2V4KSkge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArIHR5cGUgKyAnIGV4dGVuc2lvbnMgbXVzdCBkZWZpbmUgZWl0aGVyIGEgXCJyZWdleFwiIHByb3BlcnR5IG9yIGEgXCJmaWx0ZXJcIiBtZXRob2QnO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHQubGlzdGVuZXJzKSB7XG4gICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wibGlzdGVuZXJzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBvYmplY3QgYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVycyArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBsbiBpbiBleHQubGlzdGVuZXJzKSB7XG4gICAgICAgIGlmIChleHQubGlzdGVuZXJzLmhhc093blByb3BlcnR5KGxuKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXh0Lmxpc3RlbmVyc1tsbl0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcImxpc3RlbmVyc1wiIHByb3BlcnR5IG11c3QgYmUgYW4gaGFzaCBvZiBbZXZlbnQgbmFtZV06IFtjYWxsYmFja10uIGxpc3RlbmVycy4nICsgbG4gKyAnIG11c3QgYmUgYSBmdW5jdGlvbiBidXQgJyArIHR5cGVvZiBleHQubGlzdGVuZXJzW2xuXSArICcgZ2l2ZW4nO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0LmZpbHRlcikge1xuICAgICAgaWYgKHR5cGVvZiBleHQuZmlsdGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wiZmlsdGVyXCIgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgJyArIHR5cGVvZiBleHQuZmlsdGVyICsgJyBnaXZlbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChleHQucmVnZXgpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoZXh0LnJlZ2V4KSkge1xuICAgICAgICBleHQucmVnZXggPSBuZXcgUmVnRXhwKGV4dC5yZWdleCwgJ2cnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFleHQucmVnZXggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJyZWdleFwiIHByb3BlcnR5IG11c3QgZWl0aGVyIGJlIGEgc3RyaW5nIG9yIGEgUmVnRXhwIG9iamVjdCwgYnV0ICcgKyB0eXBlb2YgZXh0LnJlZ2V4ICsgJyBnaXZlbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlcGxhY2UpKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wicmVnZXhcIiBleHRlbnNpb25zIG11c3QgaW1wbGVtZW50IGEgcmVwbGFjZSBzdHJpbmcgb3IgZnVuY3Rpb24nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG4vKipcbiAqIFZhbGlkYXRlIGV4dGVuc2lvblxuICogQHBhcmFtIHtvYmplY3R9IGV4dFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuXG5zaG93ZG93bi52YWxpZGF0ZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIChleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB2YWxpZGF0ZUV4dGVuc2lvbiA9IHZhbGlkYXRlKGV4dCwgbnVsbCk7XG5cbiAgaWYgKCF2YWxpZGF0ZUV4dGVuc2lvbi52YWxpZCkge1xuICAgIGNvbnNvbGUud2Fybih2YWxpZGF0ZUV4dGVuc2lvbi5lcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBzaG93ZG93bmpzIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuXG5cbmlmICghc2hvd2Rvd24uaGFzT3duUHJvcGVydHkoJ2hlbHBlcicpKSB7XG4gIHNob3dkb3duLmhlbHBlciA9IHt9O1xufVxuLyoqXG4gKiBDaGVjayBpZiB2YXIgaXMgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuXG5zaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyhhKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnIHx8IGEgaW5zdGFuY2VvZiBTdHJpbmc7XG59O1xuLyoqXG4gKiBDaGVjayBpZiB2YXIgaXMgYSBmdW5jdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5cblxuc2hvd2Rvd24uaGVscGVyLmlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBhICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG4vKipcbiAqIEZvckVhY2ggaGVscGVyIGZ1bmN0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuXG5cbnNob3dkb3duLmhlbHBlci5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChvYmosIGNhbGxiYWNrKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAodHlwZW9mIG9iai5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2JqLmZvckVhY2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjYWxsYmFjayhvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9XG59O1xuLyoqXG4gKiBpc0FycmF5IGhlbHBlciBmdW5jdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSBhXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG5cbnNob3dkb3duLmhlbHBlci5pc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gYS5jb25zdHJ1Y3RvciA9PT0gQXJyYXk7XG59O1xuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG5cbnNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn07XG4vKipcbiAqIFN0YW5kYXJkaWRpemUgZXh0ZW5zaW9uIG5hbWVcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzIGV4dGVuc2lvbiBuYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cblxuc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUgPSBmdW5jdGlvbiAocykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgcmV0dXJuIHMucmVwbGFjZSgvW18tXXx8XFxzL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKHdob2xlTWF0Y2gsIG0xKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgY2hhckNvZGVUb0VzY2FwZSA9IG0xLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiAnfkUnICsgY2hhckNvZGVUb0VzY2FwZSArICdFJztcbn1cbi8qKlxuICogQ2FsbGJhY2sgdXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyB3aGVuIHBhc3NpbmcgdGhyb3VnaCBTdHJpbmcucmVwbGFjZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IHdob2xlTWF0Y2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBtMVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG5cbnNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2sgPSBlc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2s7XG4vKipcbiAqIEVzY2FwZSBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJzVG9Fc2NhcGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWZ0ZXJCYWNrc2xhc2hcbiAqIEByZXR1cm5zIHtYTUx8c3RyaW5nfHZvaWR8Kn1cbiAqL1xuXG5zaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyA9IGZ1bmN0aW9uIGVzY2FwZUNoYXJhY3RlcnModGV4dCwgY2hhcnNUb0VzY2FwZSwgYWZ0ZXJCYWNrc2xhc2gpIHtcbiAgJ3VzZSBzdHJpY3QnOyAvLyBGaXJzdCB3ZSBoYXZlIHRvIGVzY2FwZSB0aGUgZXNjYXBlIGNoYXJhY3RlcnMgc28gdGhhdFxuICAvLyB3ZSBjYW4gYnVpbGQgYSBjaGFyYWN0ZXIgY2xhc3Mgb3V0IG9mIHRoZW1cblxuICB2YXIgcmVnZXhTdHJpbmcgPSAnKFsnICsgY2hhcnNUb0VzY2FwZS5yZXBsYWNlKC8oW1xcW1xcXVxcXFxdKS9nLCAnXFxcXCQxJykgKyAnXSknO1xuXG4gIGlmIChhZnRlckJhY2tzbGFzaCkge1xuICAgIHJlZ2V4U3RyaW5nID0gJ1xcXFxcXFxcJyArIHJlZ2V4U3RyaW5nO1xuICB9XG5cbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFN0cmluZywgJ2cnKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG52YXIgcmd4RmluZE1hdGNoUG9zID0gZnVuY3Rpb24gKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZiA9IGZsYWdzIHx8ICcnLFxuICAgICAgZyA9IGYuaW5kZXhPZignZycpID4gLTEsXG4gICAgICB4ID0gbmV3IFJlZ0V4cChsZWZ0ICsgJ3wnICsgcmlnaHQsICdnJyArIGYucmVwbGFjZSgvZy9nLCAnJykpLFxuICAgICAgbCA9IG5ldyBSZWdFeHAobGVmdCwgZi5yZXBsYWNlKC9nL2csICcnKSksXG4gICAgICBwb3MgPSBbXSxcbiAgICAgIHQsXG4gICAgICBzLFxuICAgICAgbSxcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kO1xuXG4gIGRvIHtcbiAgICB0ID0gMDtcblxuICAgIHdoaWxlIChtID0geC5leGVjKHN0cikpIHtcbiAgICAgIGlmIChsLnRlc3QobVswXSkpIHtcbiAgICAgICAgaWYgKCF0KyspIHtcbiAgICAgICAgICBzID0geC5sYXN0SW5kZXg7XG4gICAgICAgICAgc3RhcnQgPSBzIC0gbVswXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodCkge1xuICAgICAgICBpZiAoISAtLXQpIHtcbiAgICAgICAgICBlbmQgPSBtLmluZGV4ICsgbVswXS5sZW5ndGg7XG4gICAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICBlbmQ6IHNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXRjaDoge1xuICAgICAgICAgICAgICBzdGFydDogcyxcbiAgICAgICAgICAgICAgZW5kOiBtLmluZGV4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmlnaHQ6IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IG0uaW5kZXgsXG4gICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2hvbGVNYXRjaDoge1xuICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwb3MucHVzaChvYmopO1xuXG4gICAgICAgICAgaWYgKCFnKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAodCAmJiAoeC5sYXN0SW5kZXggPSBzKSk7XG5cbiAgcmV0dXJuIHBvcztcbn07XG4vKipcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwXG4gKlxuICogKGMpIDIwMDcgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+XG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIEFjY2VwdHMgYSBzdHJpbmcgdG8gc2VhcmNoLCBhIGxlZnQgYW5kIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJcbiAqIGFzIHJlZ2V4IHBhdHRlcm5zLCBhbmQgb3B0aW9uYWwgcmVnZXggZmxhZ3MuIFJldHVybnMgYW4gYXJyYXlcbiAqIG9mIG1hdGNoZXMsIGFsbG93aW5nIG5lc3RlZCBpbnN0YW5jZXMgb2YgbGVmdC9yaWdodCBkZWxpbWl0ZXJzLlxuICogVXNlIHRoZSBcImdcIiBmbGFnIHRvIHJldHVybiBhbGwgbWF0Y2hlcywgb3RoZXJ3aXNlIG9ubHkgdGhlXG4gKiBmaXJzdCBpcyByZXR1cm5lZC4gQmUgY2FyZWZ1bCB0byBlbnN1cmUgdGhhdCB0aGUgbGVmdCBhbmRcbiAqIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJzIHByb2R1Y2UgbXV0dWFsbHkgZXhjbHVzaXZlIG1hdGNoZXMuXG4gKiBCYWNrcmVmZXJlbmNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoaW4gdGhlIHJpZ2h0IGRlbGltaXRlclxuICogZHVlIHRvIGhvdyBpdCBpcyBpbnRlcm5hbGx5IGNvbWJpbmVkIHdpdGggdGhlIGxlZnQgZGVsaW1pdGVyLlxuICogV2hlbiBtYXRjaGluZyBzdHJpbmdzIHdob3NlIGZvcm1hdCBkZWxpbWl0ZXJzIGFyZSB1bmJhbGFuY2VkXG4gKiB0byB0aGUgbGVmdCBvciByaWdodCwgdGhlIG91dHB1dCBpcyBpbnRlbnRpb25hbGx5IGFzIGFcbiAqIGNvbnZlbnRpb25hbCByZWdleCBsaWJyYXJ5IHdpdGggcmVjdXJzaW9uIHN1cHBvcnQgd291bGRcbiAqIHByb2R1Y2UsIGUuZy4gXCI8PHg+XCIgYW5kIFwiPHg+PlwiIGJvdGggcHJvZHVjZSBbXCJ4XCJdIHdoZW4gdXNpbmdcbiAqIFwiPFwiIGFuZCBcIj5cIiBhcyB0aGUgZGVsaW1pdGVycyAoYm90aCBzdHJpbmdzIGNvbnRhaW4gYSBzaW5nbGUsXG4gKiBiYWxhbmNlZCBpbnN0YW5jZSBvZiBcIjx4PlwiKS5cbiAqXG4gKiBleGFtcGxlczpcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwidGVzdFwiLCBcIlxcXFwoXCIsIFwiXFxcXClcIilcbiAqIHJldHVybnM6IFtdXG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cChcIjx0PDxlPj48cz4+dDw+XCIsIFwiPFwiLCBcIj5cIiwgXCJnXCIpXG4gKiByZXR1cm5zOiBbXCJ0PDxlPj48cz5cIiwgXCJcIl1cbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwiPGRpdiBpZD1cXFwieFxcXCI+dGVzdDwvZGl2PlwiLCBcIjxkaXZcXFxcYltePl0qPlwiLCBcIjwvZGl2PlwiLCBcImdpXCIpXG4gKiByZXR1cm5zOiBbXCJ0ZXN0XCJdXG4gKi9cblxuXG5zaG93ZG93bi5oZWxwZXIubWF0Y2hSZWN1cnNpdmVSZWdFeHAgPSBmdW5jdGlvbiAoc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaFBvcyA9IHJneEZpbmRNYXRjaFBvcyhzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncyksXG4gICAgICByZXN1bHRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaFBvcy5sZW5ndGg7ICsraSkge1xuICAgIHJlc3VsdHMucHVzaChbc3RyLnNsaWNlKG1hdGNoUG9zW2ldLndob2xlTWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLndob2xlTWF0Y2guZW5kKSwgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLm1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS5tYXRjaC5lbmQpLCBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubGVmdC5zdGFydCwgbWF0Y2hQb3NbaV0ubGVmdC5lbmQpLCBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ucmlnaHQuc3RhcnQsIG1hdGNoUG9zW2ldLnJpZ2h0LmVuZCldKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufTtcbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSByZXBsYWNlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGxlZnRcbiAqIEBwYXJhbSB7c3RyaW5nfSByaWdodFxuICogQHBhcmFtIHtzdHJpbmd9IGZsYWdzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cblxuc2hvd2Rvd24uaGVscGVyLnJlcGxhY2VSZWN1cnNpdmVSZWdFeHAgPSBmdW5jdGlvbiAoc3RyLCByZXBsYWNlbWVudCwgbGVmdCwgcmlnaHQsIGZsYWdzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0Z1bmN0aW9uKHJlcGxhY2VtZW50KSkge1xuICAgIHZhciByZXBTdHIgPSByZXBsYWNlbWVudDtcblxuICAgIHJlcGxhY2VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcFN0cjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIG1hdGNoUG9zID0gcmd4RmluZE1hdGNoUG9zKHN0ciwgbGVmdCwgcmlnaHQsIGZsYWdzKSxcbiAgICAgIGZpbmFsU3RyID0gc3RyLFxuICAgICAgbG5nID0gbWF0Y2hQb3MubGVuZ3RoO1xuXG4gIGlmIChsbmcgPiAwKSB7XG4gICAgdmFyIGJpdHMgPSBbXTtcblxuICAgIGlmIChtYXRjaFBvc1swXS53aG9sZU1hdGNoLnN0YXJ0ICE9PSAwKSB7XG4gICAgICBiaXRzLnB1c2goc3RyLnNsaWNlKDAsIG1hdGNoUG9zWzBdLndob2xlTWF0Y2guc3RhcnQpKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxuZzsgKytpKSB7XG4gICAgICBiaXRzLnB1c2gocmVwbGFjZW1lbnQoc3RyLnNsaWNlKG1hdGNoUG9zW2ldLndob2xlTWF0Y2guc3RhcnQsIG1hdGNoUG9zW2ldLndob2xlTWF0Y2guZW5kKSwgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLm1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS5tYXRjaC5lbmQpLCBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubGVmdC5zdGFydCwgbWF0Y2hQb3NbaV0ubGVmdC5lbmQpLCBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ucmlnaHQuc3RhcnQsIG1hdGNoUG9zW2ldLnJpZ2h0LmVuZCkpKTtcblxuICAgICAgaWYgKGkgPCBsbmcgLSAxKSB7XG4gICAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQsIG1hdGNoUG9zW2kgKyAxXS53aG9sZU1hdGNoLnN0YXJ0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoUG9zW2xuZyAtIDFdLndob2xlTWF0Y2guZW5kIDwgc3RyLmxlbmd0aCkge1xuICAgICAgYml0cy5wdXNoKHN0ci5zbGljZShtYXRjaFBvc1tsbmcgLSAxXS53aG9sZU1hdGNoLmVuZCkpO1xuICAgIH1cblxuICAgIGZpbmFsU3RyID0gYml0cy5qb2luKCcnKTtcbiAgfVxuXG4gIHJldHVybiBmaW5hbFN0cjtcbn07XG4vKipcbiAqIFBPTFlGSUxMU1xuICovXG5cblxuaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChjb25zb2xlKSkge1xuICBjb25zb2xlID0ge1xuICAgIHdhcm46IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgYWxlcnQobXNnKTtcbiAgICB9LFxuICAgIGxvZzogZnVuY3Rpb24gKG1zZykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBhbGVydChtc2cpO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgdGhyb3cgbXNnO1xuICAgIH1cbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlZCBieSBFc3RldmFvIG9uIDMxLTA1LTIwMTUuXG4gKi9cblxuLyoqXG4gKiBTaG93ZG93biBDb252ZXJ0ZXIgY2xhc3NcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvYmplY3R9IFtjb252ZXJ0ZXJPcHRpb25zXVxuICogQHJldHVybnMge0NvbnZlcnRlcn1cbiAqL1xuXG5cbnNob3dkb3duLkNvbnZlcnRlciA9IGZ1bmN0aW9uIChjb252ZXJ0ZXJPcHRpb25zKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXJcbiAgLyoqXG4gICAqIE9wdGlvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7e319XG4gICAqL1xuICBvcHRpb25zID0ge30sXG5cbiAgLyoqXG4gICAqIExhbmd1YWdlIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBsYW5nRXh0ZW5zaW9ucyA9IFtdLFxuXG4gIC8qKlxuICAgKiBPdXRwdXQgbW9kaWZpZXJzIGV4dGVuc2lvbnMgdXNlZCBieSB0aGlzIGNvbnZlcnRlclxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBvdXRwdXRNb2RpZmllcnMgPSBbXSxcblxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXJzXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHt7fX1cbiAgICovXG4gIGxpc3RlbmVycyA9IHt9O1xuXG4gIF9jb25zdHJ1Y3RvcigpO1xuICAvKipcbiAgICogQ29udmVydGVyIGNvbnN0cnVjdG9yXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gX2NvbnN0cnVjdG9yKCkge1xuICAgIGNvbnZlcnRlck9wdGlvbnMgPSBjb252ZXJ0ZXJPcHRpb25zIHx8IHt9O1xuXG4gICAgZm9yICh2YXIgZ09wdCBpbiBnbG9iYWxPcHRpb25zKSB7XG4gICAgICBpZiAoZ2xvYmFsT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShnT3B0KSkge1xuICAgICAgICBvcHRpb25zW2dPcHRdID0gZ2xvYmFsT3B0aW9uc1tnT3B0XTtcbiAgICAgIH1cbiAgICB9IC8vIE1lcmdlIG9wdGlvbnNcblxuXG4gICAgaWYgKHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgb3B0IGluIGNvbnZlcnRlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNvbnZlcnRlck9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgICAgIG9wdGlvbnNbb3B0XSA9IGNvbnZlcnRlck9wdGlvbnNbb3B0XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignQ29udmVydGVyIGV4cGVjdHMgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgdG8gYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBjb252ZXJ0ZXJPcHRpb25zICsgJyB3YXMgcGFzc2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXh0ZW5zaW9ucykge1xuICAgICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3B0aW9ucy5leHRlbnNpb25zLCBfcGFyc2VFeHRlbnNpb24pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUGFyc2UgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7Kn0gZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nJ11cbiAgICogQHByaXZhdGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBfcGFyc2VFeHRlbnNpb24oZXh0LCBuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgbnVsbDsgLy8gSWYgaXQncyBhIHN0cmluZywgdGhlIGV4dGVuc2lvbiB3YXMgcHJldmlvdXNseSBsb2FkZWRcblxuICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoZXh0KSkge1xuICAgICAgZXh0ID0gc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUoZXh0KTtcbiAgICAgIG5hbWUgPSBleHQ7IC8vIExFR0FDWV9TVVBQT1JUIENPREVcblxuICAgICAgaWYgKHNob3dkb3duLmV4dGVuc2lvbnNbZXh0XSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RFUFJFQ0FUSU9OIFdBUk5JTkc6ICcgKyBleHQgKyAnIGlzIGFuIG9sZCBleHRlbnNpb24gdGhhdCB1c2VzIGEgZGVwcmVjYXRlZCBsb2FkaW5nIG1ldGhvZC4nICsgJ1BsZWFzZSBpbmZvcm0gdGhlIGRldmVsb3BlciB0aGF0IHRoZSBleHRlbnNpb24gc2hvdWxkIGJlIHVwZGF0ZWQhJyk7XG4gICAgICAgIGxlZ2FjeUV4dGVuc2lvbkxvYWRpbmcoc2hvd2Rvd24uZXh0ZW5zaW9uc1tleHRdLCBleHQpO1xuICAgICAgICByZXR1cm47IC8vIEVORCBMRUdBQ1kgU1VQUE9SVCBDT0RFXG4gICAgICB9IGVsc2UgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0ZW5zaW9uc1tleHRdKSkge1xuICAgICAgICBleHQgPSBleHRlbnNpb25zW2V4dF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignRXh0ZW5zaW9uIFwiJyArIGV4dCArICdcIiBjb3VsZCBub3QgYmUgbG9hZGVkLiBJdCB3YXMgZWl0aGVyIG5vdCBmb3VuZCBvciBpcyBub3QgYSB2YWxpZCBleHRlbnNpb24uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dCgpO1xuICAgIH1cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkRXh0ID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICghdmFsaWRFeHQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkRXh0LmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXh0W2ldLmhhc093blByb3BlcnR5KGxpc3RlbmVycykpIHtcbiAgICAgICAgZm9yICh2YXIgbG4gaW4gZXh0W2ldLmxpc3RlbmVycykge1xuICAgICAgICAgIGlmIChleHRbaV0ubGlzdGVuZXJzLmhhc093blByb3BlcnR5KGxuKSkge1xuICAgICAgICAgICAgbGlzdGVuKGxuLCBleHRbaV0ubGlzdGVuZXJzW2xuXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMRUdBQ1lfU1VQUE9SVFxuICAgKiBAcGFyYW0geyp9IGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGxlZ2FjeUV4dGVuc2lvbkxvYWRpbmcoZXh0LCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dChuZXcgc2hvd2Rvd24uQ29udmVydGVyKCkpO1xuICAgIH1cblxuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0KSkge1xuICAgICAgZXh0ID0gW2V4dF07XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkID0gdmFsaWRhdGUoZXh0LCBuYW1lKTtcblxuICAgIGlmICghdmFsaWQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkLmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcbiAgICAgICAgICB0aHJvdyBFcnJvcignRXh0ZW5zaW9uIGxvYWRlciBlcnJvcjogVHlwZSB1bnJlY29nbml6ZWQhISEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGxpc3RlbihuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBpbiBjb252ZXJ0ZXIubGlzdGVuKCkgbWV0aG9kOiBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCAnICsgdHlwZW9mIG5hbWUgKyAnIGdpdmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgaW4gY29udmVydGVyLmxpc3RlbigpIG1ldGhvZDogY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgJyArIHR5cGVvZiBjYWxsYmFjayArICcgZ2l2ZW4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgbGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gclRyaW1JbnB1dFRleHQodGV4dCkge1xuICAgIHZhciByc3AgPSB0ZXh0Lm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aCxcbiAgICAgICAgcmd4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzezAsJyArIHJzcCArICd9JywgJ2dtJyk7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShyZ3gsICcnKTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2ggYW4gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dE5hbWUgRXZlbnQgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0XG4gICAqIEBwYXJhbSB7e319IG9wdGlvbnMgQ29udmVydGVyIE9wdGlvbnNcbiAgICogQHBhcmFtIHt7fX0gZ2xvYmFsc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIHRoaXMuX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goZXZ0TmFtZSwgdGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZ0TmFtZSkpIHtcbiAgICAgIGZvciAodmFyIGVpID0gMDsgZWkgPCBsaXN0ZW5lcnNbZXZ0TmFtZV0ubGVuZ3RoOyArK2VpKSB7XG4gICAgICAgIHZhciBuVGV4dCA9IGxpc3RlbmVyc1tldnROYW1lXVtlaV0oZXZ0TmFtZSwgdGV4dCwgdGhpcywgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAgICAgaWYgKG5UZXh0ICYmIHR5cGVvZiBuVGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0ZXh0ID0gblRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7c2hvd2Rvd24uQ29udmVydGVyfVxuICAgKi9cblxuXG4gIHRoaXMubGlzdGVuID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgbGlzdGVuKG5hbWUsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgbWFya2Rvd24gc3RyaW5nIGludG8gSFRNTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG5cblxuICB0aGlzLm1ha2VIdG1sID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAvL2NoZWNrIGlmIHRleHQgaXMgbm90IGZhbHN5XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFscyA9IHtcbiAgICAgIGdIdG1sQmxvY2tzOiBbXSxcbiAgICAgIGdIdG1sTWRCbG9ja3M6IFtdLFxuICAgICAgZ0h0bWxTcGFuczogW10sXG4gICAgICBnVXJsczoge30sXG4gICAgICBnVGl0bGVzOiB7fSxcbiAgICAgIGdEaW1lbnNpb25zOiB7fSxcbiAgICAgIGdMaXN0TGV2ZWw6IDAsXG4gICAgICBoYXNoTGlua0NvdW50czoge30sXG4gICAgICBsYW5nRXh0ZW5zaW9uczogbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXRNb2RpZmllcnM6IG91dHB1dE1vZGlmaWVycyxcbiAgICAgIGNvbnZlcnRlcjogdGhpcyxcbiAgICAgIGdoQ29kZUJsb2NrczogW11cbiAgICB9OyAvLyBhdHRhY2tsYWI6IFJlcGxhY2UgfiB3aXRoIH5UXG4gICAgLy8gVGhpcyBsZXRzIHVzIHVzZSB0aWxkZSBhcyBhbiBlc2NhcGUgY2hhciB0byBhdm9pZCBtZDUgaGFzaGVzXG4gICAgLy8gVGhlIGNob2ljZSBvZiBjaGFyYWN0ZXIgaXMgYXJiaXRyYXJ5OyBhbnl0aGluZyB0aGF0IGlzbid0XG4gICAgLy8gbWFnaWMgaW4gTWFya2Rvd24gd2lsbCB3b3JrLlxuXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvfi9nLCAnflQnKTsgLy8gYXR0YWNrbGFiOiBSZXBsYWNlICQgd2l0aCB+RFxuICAgIC8vIFJlZ0V4cCBpbnRlcnByZXRzICQgYXMgYSBzcGVjaWFsIGNoYXJhY3RlclxuICAgIC8vIHdoZW4gaXQncyBpbiBhIHJlcGxhY2VtZW50IHN0cmluZ1xuXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwkL2csICd+RCcpOyAvLyBTdGFuZGFyZGl6ZSBsaW5lIGVuZGluZ3NcblxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7IC8vIERPUyB0byBVbml4XG5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHIvZywgJ1xcbicpOyAvLyBNYWMgdG8gVW5peFxuXG4gICAgaWYgKG9wdGlvbnMuc21hcnRJbmRlbnRhdGlvbkZpeCkge1xuICAgICAgdGV4dCA9IHJUcmltSW5wdXRUZXh0KHRleHQpO1xuICAgIH0gLy8gTWFrZSBzdXJlIHRleHQgYmVnaW5zIGFuZCBlbmRzIHdpdGggYSBjb3VwbGUgb2YgbmV3bGluZXM6XG4gICAgLy90ZXh0ID0gJ1xcblxcbicgKyB0ZXh0ICsgJ1xcblxcbic7XG5cblxuICAgIHRleHQgPSB0ZXh0OyAvLyBkZXRhYlxuXG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZGV0YWInKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gc3RyaXBCbGFua0xpbmVzXG5cbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpcEJsYW5rTGluZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTsgLy9ydW4gbGFuZ3VhZ2VFeHRlbnNpb25zXG5cbiAgICBzaG93ZG93bi5oZWxwZXIuZm9yRWFjaChsYW5nRXh0ZW5zaW9ucywgZnVuY3Rpb24gKGV4dCkge1xuICAgICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigncnVuRXh0ZW5zaW9uJykoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9KTsgLy8gcnVuIHRoZSBzdWIgcGFyc2Vyc1xuXG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaFByZUNvZGVUYWdzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlwTGlua0RlZmluaXRpb25zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuaGFzaEhUTUxTcGFucycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIGF0dGFja2xhYjogUmVzdG9yZSBkb2xsYXIgc2lnbnNcblxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL35EL2csICckJCcpOyAvLyBhdHRhY2tsYWI6IFJlc3RvcmUgdGlsZGVzXG5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9+VC9nLCAnficpOyAvLyBSdW4gb3V0cHV0IG1vZGlmaWVyc1xuXG4gICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3V0cHV0TW9kaWZpZXJzLCBmdW5jdGlvbiAoZXh0KSB7XG4gICAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nKShleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH0pO1xuICAgIHJldHVybiB0ZXh0O1xuICB9O1xuICAvKipcbiAgICogU2V0IGFuIG9wdGlvbiBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG5cblxuICB0aGlzLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gIH07XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9wdGlvbiBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cblxuXG4gIHRoaXMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvcHRpb25zW2tleV07XG4gIH07XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9wdGlvbnMgb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cblxuXG4gIHRoaXMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcbiAgLyoqXG4gICAqIEFkZCBleHRlbnNpb24gdG8gVEhJUyBjb252ZXJ0ZXJcbiAgICogQHBhcmFtIHt7fX0gZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1udWxsXVxuICAgKi9cblxuXG4gIHRoaXMuYWRkRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbiwgbmFtZSkge1xuICAgIG5hbWUgPSBuYW1lIHx8IG51bGw7XG5cbiAgICBfcGFyc2VFeHRlbnNpb24oZXh0ZW5zaW9uLCBuYW1lKTtcbiAgfTtcbiAgLyoqXG4gICAqIFVzZSBhIGdsb2JhbCByZWdpc3RlcmVkIGV4dGVuc2lvbiB3aXRoIFRISVMgY29udmVydGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb25OYW1lIE5hbWUgb2YgdGhlIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBleHRlbnNpb25cbiAgICovXG5cblxuICB0aGlzLnVzZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIChleHRlbnNpb25OYW1lKSB7XG4gICAgX3BhcnNlRXh0ZW5zaW9uKGV4dGVuc2lvbk5hbWUpO1xuICB9O1xuICAvKipcbiAgICogU2V0IHRoZSBmbGF2b3IgVEhJUyBjb252ZXJ0ZXIgc2hvdWxkIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cblxuXG4gIHRoaXMuc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoZmxhdm9yLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICB2YXIgcHJlc2V0ID0gZmxhdm9yW25hbWVdO1xuXG4gICAgICBmb3IgKHZhciBvcHRpb24gaW4gcHJlc2V0KSB7XG4gICAgICAgIGlmIChwcmVzZXQuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICAgIG9wdGlvbnNbb3B0aW9uXSA9IHByZXNldFtvcHRpb25dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogUmVtb3ZlIGFuIGV4dGVuc2lvbiBmcm9tIFRISVMgY29udmVydGVyLlxuICAgKiBOb3RlOiBUaGlzIGlzIGEgY29zdGx5IG9wZXJhdGlvbi4gSXQncyBiZXR0ZXIgdG8gaW5pdGlhbGl6ZSBhIG5ldyBjb252ZXJ0ZXJcbiAgICogYW5kIHNwZWNpZnkgdGhlIGV4dGVuc2lvbnMgeW91IHdpc2ggdG8gdXNlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGV4dGVuc2lvblxuICAgKi9cblxuXG4gIHRoaXMucmVtb3ZlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKGV4dGVuc2lvbikge1xuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzQXJyYXkoZXh0ZW5zaW9uKSkge1xuICAgICAgZXh0ZW5zaW9uID0gW2V4dGVuc2lvbl07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgYSA9IDA7IGEgPCBleHRlbnNpb24ubGVuZ3RoOyArK2EpIHtcbiAgICAgIHZhciBleHQgPSBleHRlbnNpb25bYV07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFuZ0V4dGVuc2lvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGxhbmdFeHRlbnNpb25zW2ldID09PSBleHQpIHtcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9uc1tpXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG91dHB1dE1vZGlmaWVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAob3V0cHV0TW9kaWZpZXJzW2lpXSA9PT0gZXh0KSB7XG4gICAgICAgICAgb3V0cHV0TW9kaWZpZXJzW2lpXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBHZXQgYWxsIGV4dGVuc2lvbiBvZiBUSElTIGNvbnZlcnRlclxuICAgKiBAcmV0dXJucyB7e2xhbmd1YWdlOiBBcnJheSwgb3V0cHV0OiBBcnJheX19XG4gICAqL1xuXG5cbiAgdGhpcy5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsYW5ndWFnZTogbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXQ6IG91dHB1dE1vZGlmaWVyc1xuICAgIH07XG4gIH07XG59O1xuLyoqXG4gKiBUdXJuIE1hcmtkb3duIGxpbmsgc2hvcnRjdXRzIGludG8gWEhUTUwgPGE+IHRhZ3MuXG4gKi9cblxuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2FuY2hvcnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYW5jaG9ycy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgd3JpdGVBbmNob3JUYWcgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMywgbTQsIG01LCBtNiwgbTcpIHtcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKG03KSkge1xuICAgICAgbTcgPSAnJztcbiAgICB9XG5cbiAgICB3aG9sZU1hdGNoID0gbTE7XG4gICAgdmFyIGxpbmtUZXh0ID0gbTIsXG4gICAgICAgIGxpbmtJZCA9IG0zLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHVybCA9IG00LFxuICAgICAgICB0aXRsZSA9IG03O1xuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIGlmICghbGlua0lkKSB7XG4gICAgICAgIC8vIGxvd2VyLWNhc2UgYW5kIHR1cm4gZW1iZWRkZWQgbmV3bGluZXMgaW50byBzcGFjZXNcbiAgICAgICAgbGlua0lkID0gbGlua1RleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSAnIycgKyBsaW5rSWQ7XG5cbiAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdsb2JhbHMuZ1VybHNbbGlua0lkXSkpIHtcbiAgICAgICAgdXJsID0gZ2xvYmFscy5nVXJsc1tsaW5rSWRdO1xuXG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdsb2JhbHMuZ1RpdGxlc1tsaW5rSWRdKSkge1xuICAgICAgICAgIHRpdGxlID0gZ2xvYmFscy5nVGl0bGVzW2xpbmtJZF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh3aG9sZU1hdGNoLnNlYXJjaCgvXFwoXFxzKlxcKSQvbSkgPiAtMSkge1xuICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgICAgICAgdXJsID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cmwgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh1cmwsICcqXycsIGZhbHNlKTtcbiAgICB2YXIgcmVzdWx0ID0gJzxhIGhyZWY9XCInICsgdXJsICsgJ1wiJztcblxuICAgIGlmICh0aXRsZSAhPT0gJycgJiYgdGl0bGUgIT09IG51bGwpIHtcbiAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgICAgdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpO1xuICAgICAgcmVzdWx0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSAnPicgKyBsaW5rVGV4dCArICc8L2E+JztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9OyAvLyBGaXJzdCwgaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBsaW5rczogW2xpbmsgdGV4dF0gW2lkXVxuXG4gIC8qXG4gICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cbiAgIChcdFx0XHRcdFx0XHRcdC8vIHdyYXAgd2hvbGUgbWF0Y2ggaW4gJDFcbiAgIFxcW1xuICAgKFxuICAgKD86XG4gICBcXFtbXlxcXV0qXFxdXHRcdC8vIGFsbG93IGJyYWNrZXRzIG5lc3RlZCBvbmUgbGV2ZWxcbiAgIHxcbiAgIFteXFxbXVx0XHRcdC8vIG9yIGFueXRoaW5nIGVsc2VcbiAgICkqXG4gICApXG4gICBcXF1cbiAgICBbIF0/XHRcdFx0XHRcdC8vIG9uZSBvcHRpb25hbCBzcGFjZVxuICAgKD86XFxuWyBdKik/XHRcdFx0XHQvLyBvbmUgb3B0aW9uYWwgbmV3bGluZSBmb2xsb3dlZCBieSBzcGFjZXNcbiAgICBcXFtcbiAgICguKj8pXHRcdFx0XHRcdC8vIGlkID0gJDNcbiAgIFxcXVxuICAgKSgpKCkoKSgpXHRcdFx0XHRcdC8vIHBhZCByZW1haW5pbmcgYmFja3JlZmVyZW5jZXNcbiAgIC9nLF9Eb0FuY2hvcnNfY2FsbGJhY2spO1xuICAgKi9cblxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhcXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXVsgXT8oPzpcXG5bIF0qKT9cXFsoLio/KV0pKCkoKSgpKCkvZywgd3JpdGVBbmNob3JUYWcpOyAvL1xuICAvLyBOZXh0LCBpbmxpbmUtc3R5bGUgbGlua3M6IFtsaW5rIHRleHRdKHVybCBcIm9wdGlvbmFsIHRpdGxlXCIpXG4gIC8vXG5cbiAgLypcbiAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xuICAgKFx0XHRcdFx0XHRcdC8vIHdyYXAgd2hvbGUgbWF0Y2ggaW4gJDFcbiAgIFxcW1xuICAgKFxuICAgKD86XG4gICBcXFtbXlxcXV0qXFxdXHQvLyBhbGxvdyBicmFja2V0cyBuZXN0ZWQgb25lIGxldmVsXG4gICB8XG4gICBbXlxcW1xcXV1cdFx0XHQvLyBvciBhbnl0aGluZyBlbHNlXG4gICApXG4gICApXG4gICBcXF1cbiAgIFxcKFx0XHRcdFx0XHRcdC8vIGxpdGVyYWwgcGFyZW5cbiAgIFsgXFx0XSpcbiAgICgpXHRcdFx0XHRcdFx0Ly8gbm8gaWQsIHNvIGxlYXZlICQzIGVtcHR5XG4gICA8PyguKj8pPj9cdFx0XHRcdC8vIGhyZWYgPSAkNFxuICAgWyBcXHRdKlxuICAgKFx0XHRcdFx0XHRcdC8vICQ1XG4gICAoWydcIl0pXHRcdFx0XHQvLyBxdW90ZSBjaGFyID0gJDZcbiAgICguKj8pXHRcdFx0XHQvLyBUaXRsZSA9ICQ3XG4gICBcXDZcdFx0XHRcdFx0Ly8gbWF0Y2hpbmcgcXVvdGVcbiAgIFsgXFx0XSpcdFx0XHRcdC8vIGlnbm9yZSBhbnkgc3BhY2VzL3RhYnMgYmV0d2VlbiBjbG9zaW5nIHF1b3RlIGFuZCApXG4gICApP1x0XHRcdFx0XHRcdC8vIHRpdGxlIGlzIG9wdGlvbmFsXG4gICBcXClcbiAgIClcbiAgIC9nLHdyaXRlQW5jaG9yVGFnKTtcbiAgICovXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcWygoPzpcXFtbXlxcXV0qXXxbXlxcW1xcXV0pKildXFwoWyBcXHRdKigpPD8oLio/KD86XFwoLio/XFwpLio/KT8pPj9bIFxcdF0qKChbJ1wiXSkoLio/KVxcNlsgXFx0XSopP1xcKSkvZywgd3JpdGVBbmNob3JUYWcpOyAvL1xuICAvLyBMYXN0LCBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIHNob3J0Y3V0czogW2xpbmsgdGV4dF1cbiAgLy8gVGhlc2UgbXVzdCBjb21lIGxhc3QgaW4gY2FzZSB5b3UndmUgYWxzbyBnb3QgW2xpbmsgdGVzdF1bMV1cbiAgLy8gb3IgW2xpbmsgdGVzdF0oL2ZvbylcbiAgLy9cblxuICAvKlxuICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXG4gICAoICAgICAgICAgICAgICAgIC8vIHdyYXAgd2hvbGUgbWF0Y2ggaW4gJDFcbiAgIFxcW1xuICAgKFteXFxbXFxdXSspICAgICAgIC8vIGxpbmsgdGV4dCA9ICQyOyBjYW4ndCBjb250YWluICdbJyBvciAnXSdcbiAgIFxcXVxuICAgKSgpKCkoKSgpKCkgICAgICAvLyBwYWQgcmVzdCBvZiBiYWNrcmVmZXJlbmNlc1xuICAgL2csIHdyaXRlQW5jaG9yVGFnKTtcbiAgICovXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcWyhbXlxcW1xcXV0rKV0pKCkoKSgpKCkoKS9nLCB3cml0ZUFuY2hvclRhZyk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2FuY2hvcnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbnNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdmFyIHNpbXBsZVVSTFJlZ2V4ID0gL1xcYigoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbXidcIj5cXHNdK1xcLlteJ1wiPlxcc10rKSg/PVxcc3wkKSg/IVtcIjw+XSkvZ2ksXG4gICAgICBkZWxpbVVybFJlZ2V4ID0gLzwoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXSspPi9naSxcbiAgICAgIHNpbXBsZU1haWxSZWdleCA9IC8oPzpefFsgXFxuXFx0XSkoW0EtWmEtejAtOSEjJCUmJyorLS89P15fYFxce3x9flxcLl0rQFstYS16MC05XSsoXFwuWy1hLXowLTldKykqXFwuW2Etel0rKSg/OiR8WyBcXG5cXHRdKS9naSxcbiAgICAgIGRlbGltTWFpbFJlZ2V4ID0gLzwoPzptYWlsdG86KT8oWy0uXFx3XStAWy1hLXowLTldKyhcXC5bLWEtejAtOV0rKSpcXC5bYS16XSspPi9naTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShkZWxpbVVybFJlZ2V4LCByZXBsYWNlTGluayk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoZGVsaW1NYWlsUmVnZXgsIHJlcGxhY2VNYWlsKTsgLy8gc2ltcGxlVVJMUmVnZXggID0gL1xcYigoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbLS4rfjo/I0AhJCYnKCkqLDs9W1xcXVxcd10rKVxcYi9naSxcbiAgLy8gRW1haWwgYWRkcmVzc2VzOiA8YWRkcmVzc0Bkb21haW4uZm9vPlxuXG4gIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2ltcGxlVVJMUmVnZXgsIHJlcGxhY2VMaW5rKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZU1haWxSZWdleCwgcmVwbGFjZU1haWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZUxpbmsod20sIGxpbmspIHtcbiAgICB2YXIgbG5rVHh0ID0gbGluaztcblxuICAgIGlmICgvXnd3d1xcLi9pLnRlc3QobGluaykpIHtcbiAgICAgIGxpbmsgPSBsaW5rLnJlcGxhY2UoL153d3dcXC4vaSwgJ2h0dHA6Ly93d3cuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICc8YSBocmVmPVwiJyArIGxpbmsgKyAnXCI+JyArIGxua1R4dCArICc8L2E+JztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VNYWlsKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIHVuZXNjYXBlZFN0ciA9IHNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnKShtMSk7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlRW1haWxBZGRyZXNzJykodW5lc2NhcGVkU3RyKTtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBUaGVzZSBhcmUgYWxsIHRoZSB0cmFuc2Zvcm1hdGlvbnMgdGhhdCBmb3JtIGJsb2NrLWxldmVsXG4gKiB0YWdzIGxpa2UgcGFyYWdyYXBocywgaGVhZGVycywgYW5kIGxpc3QgaXRlbXMuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIHdlIHBhcnNlIGJsb2NrcXVvdGVzIGZpcnN0IHNvIHRoYXQgd2UgY2FuIGhhdmUgaGVhZGluZ3MgYW5kIGhyc1xuICAvLyBpbnNpZGUgYmxvY2txdW90ZXNcblxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja1F1b3RlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIERvIEhvcml6b250YWwgUnVsZXM6XG5cbiAgdmFyIGtleSA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoJzxociAvPicsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eWyBdezAsMn0oWyBdP1xcKlsgXT8pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eWyBdezAsMn0oWyBdP1xcLVsgXT8pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eWyBdezAsMn0oWyBdP19bIF0/KXszLH1bIFxcdF0qJC9nbSwga2V5KTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbGlzdHMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29kZUJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCd0YWJsZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gV2UgYWxyZWFkeSByYW4gX0hhc2hIVE1MQmxvY2tzKCkgYmVmb3JlLCBpbiBNYXJrZG93bigpLCBidXQgdGhhdFxuICAvLyB3YXMgdG8gZXNjYXBlIHJhdyBIVE1MIGluIHRoZSBvcmlnaW5hbCBNYXJrZG93biBzb3VyY2UuIFRoaXMgdGltZSxcbiAgLy8gd2UncmUgZXNjYXBpbmcgdGhlIG1hcmt1cCB3ZSd2ZSBqdXN0IGNyZWF0ZWQsIHNvIHRoYXQgd2UgZG9uJ3Qgd3JhcFxuICAvLyA8cD4gdGFncyBhcm91bmQgYmxvY2stbGV2ZWwgdGFncy5cblxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdwYXJhZ3JhcGhzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbnNob3dkb3duLnN1YlBhcnNlcignYmxvY2tRdW90ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tRdW90ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8qXG4gICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cbiAgIChcdFx0XHRcdFx0XHRcdFx0Ly8gV3JhcCB3aG9sZSBtYXRjaCBpbiAkMVxuICAgKFxuICAgXlsgXFx0XSo+WyBcXHRdP1x0XHRcdC8vICc+JyBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lXG4gICAuK1xcblx0XHRcdFx0XHQvLyByZXN0IG9mIHRoZSBmaXJzdCBsaW5lXG4gICAoLitcXG4pKlx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGNvbnNlY3V0aXZlIGxpbmVzXG4gICBcXG4qXHRcdFx0XHRcdFx0Ly8gYmxhbmtzXG4gICApK1xuICAgKVxuICAgL2dtLCBmdW5jdGlvbigpey4uLn0pO1xuICAgKi9cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oKF5bIFxcdF17MCwzfT5bIFxcdF0/LitcXG4oLitcXG4pKlxcbiopKykvZ20sIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBicSA9IG0xOyAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gICAgLy8gXCItLS0tLS0tLS0tYnVnXCIucmVwbGFjZSgvXi0vZyxcIlwiKSA9PSBcImJ1Z1wiXG5cbiAgICBicSA9IGJxLnJlcGxhY2UoL15bIFxcdF0qPlsgXFx0XT8vZ20sICd+MCcpOyAvLyB0cmltIG9uZSBsZXZlbCBvZiBxdW90aW5nXG4gICAgLy8gYXR0YWNrbGFiOiBjbGVhbiB1cCBoYWNrXG5cbiAgICBicSA9IGJxLnJlcGxhY2UoL34wL2csICcnKTtcbiAgICBicSA9IGJxLnJlcGxhY2UoL15bIFxcdF0rJC9nbSwgJycpOyAvLyB0cmltIHdoaXRlc3BhY2Utb25seSBsaW5lc1xuXG4gICAgYnEgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKShicSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgYnEgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrR2FtdXQnKShicSwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIHJlY3Vyc2VcblxuICAgIGJxID0gYnEucmVwbGFjZSgvKF58XFxuKS9nLCAnJDEgICcpOyAvLyBUaGVzZSBsZWFkaW5nIHNwYWNlcyBzY3JldyB3aXRoIDxwcmU+IGNvbnRlbnQsIHNvIHdlIG5lZWQgdG8gZml4IHRoYXQ6XG5cbiAgICBicSA9IGJxLnJlcGxhY2UoLyhcXHMqPHByZT5bXlxccl0rPzxcXC9wcmU+KS9nbSwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgICB2YXIgcHJlID0gbTE7IC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcblxuICAgICAgcHJlID0gcHJlLnJlcGxhY2UoL14gIC9tZywgJ34wJyk7XG4gICAgICBwcmUgPSBwcmUucmVwbGFjZSgvfjAvZywgJycpO1xuICAgICAgcmV0dXJuIHByZTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKSgnPGJsb2NrcXVvdGU+XFxuJyArIGJxICsgJ1xcbjwvYmxvY2txdW90ZT4nLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrUXVvdGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqIFByb2Nlc3MgTWFya2Rvd24gYDxwcmU+PGNvZGU+YCBibG9ja3MuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlQmxvY2tzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8qXG4gICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHRleHQsXG4gICAvKD86XFxuXFxufF4pXG4gICAoXHRcdFx0XHRcdFx0XHRcdC8vICQxID0gdGhlIGNvZGUgYmxvY2sgLS0gb25lIG9yIG1vcmUgbGluZXMsIHN0YXJ0aW5nIHdpdGggYSBzcGFjZS90YWJcbiAgICg/OlxuICAgKD86WyBdezR9fFxcdClcdFx0XHQvLyBMaW5lcyBtdXN0IHN0YXJ0IHdpdGggYSB0YWIgb3IgYSB0YWItd2lkdGggb2Ygc3BhY2VzIC0gYXR0YWNrbGFiOiBnX3RhYl93aWR0aFxuICAgLipcXG4rXG4gICApK1xuICAgKVxuICAgKFxcbipbIF17MCwzfVteIFxcdFxcbl18KD89fjApKVx0Ly8gYXR0YWNrbGFiOiBnX3RhYl93aWR0aFxuICAgL2csZnVuY3Rpb24oKXsuLi59KTtcbiAgICovXG4gIC8vIGF0dGFja2xhYjogc2VudGluZWwgd29ya2Fyb3VuZHMgZm9yIGxhY2sgb2YgXFxBIGFuZCBcXFosIHNhZmFyaVxca2h0bWwgYnVnXG5cbiAgdGV4dCArPSAnfjAnO1xuICB2YXIgcGF0dGVybiA9IC8oPzpcXG5cXG58XikoKD86KD86WyBdezR9fFxcdCkuKlxcbispKykoXFxuKlsgXXswLDN9W14gXFx0XFxuXXwoPz1+MCkpL2c7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocGF0dGVybiwgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBtMikge1xuICAgIHZhciBjb2RlYmxvY2sgPSBtMSxcbiAgICAgICAgbmV4dENoYXIgPSBtMixcbiAgICAgICAgZW5kID0gJ1xcbic7XG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdvdXRkZW50JykoY29kZWJsb2NrKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjb2RlYmxvY2spO1xuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignZGV0YWInKShjb2RlYmxvY2spO1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7IC8vIHRyaW0gbGVhZGluZyBuZXdsaW5lc1xuXG4gICAgY29kZWJsb2NrID0gY29kZWJsb2NrLnJlcGxhY2UoL1xcbiskL2csICcnKTsgLy8gdHJpbSB0cmFpbGluZyBuZXdsaW5lc1xuXG4gICAgaWYgKG9wdGlvbnMub21pdEV4dHJhV0xJbkNvZGVCbG9ja3MpIHtcbiAgICAgIGVuZCA9ICcnO1xuICAgIH1cblxuICAgIGNvZGVibG9jayA9ICc8cHJlPjxjb2RlPicgKyBjb2RlYmxvY2sgKyBlbmQgKyAnPC9jb2RlPjwvcHJlPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKSArIG5leHRDaGFyO1xuICB9KTsgLy8gYXR0YWNrbGFiOiBzdHJpcCBzZW50aW5lbFxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL34wLywgJycpO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlQmxvY2tzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqXG4gKiAgICogIEJhY2t0aWNrIHF1b3RlcyBhcmUgdXNlZCBmb3IgPGNvZGU+PC9jb2RlPiBzcGFucy5cbiAqXG4gKiAgICogIFlvdSBjYW4gdXNlIG11bHRpcGxlIGJhY2t0aWNrcyBhcyB0aGUgZGVsaW1pdGVycyBpZiB5b3Ugd2FudCB0b1xuICogICAgIGluY2x1ZGUgbGl0ZXJhbCBiYWNrdGlja3MgaW4gdGhlIGNvZGUgc3Bhbi4gU28sIHRoaXMgaW5wdXQ6XG4gKlxuICogICAgICAgICBKdXN0IHR5cGUgYGBmb28gYGJhcmAgYmF6YGAgYXQgdGhlIHByb21wdC5cbiAqXG4gKiAgICAgICBXaWxsIHRyYW5zbGF0ZSB0bzpcbiAqXG4gKiAgICAgICAgIDxwPkp1c3QgdHlwZSA8Y29kZT5mb28gYGJhcmAgYmF6PC9jb2RlPiBhdCB0aGUgcHJvbXB0LjwvcD5cbiAqXG4gKiAgICBUaGVyZSdzIG5vIGFyYml0cmFyeSBsaW1pdCB0byB0aGUgbnVtYmVyIG9mIGJhY2t0aWNrcyB5b3VcbiAqICAgIGNhbiB1c2UgYXMgZGVsaW10ZXJzLiBJZiB5b3UgbmVlZCB0aHJlZSBjb25zZWN1dGl2ZSBiYWNrdGlja3NcbiAqICAgIGluIHlvdXIgY29kZSwgdXNlIGZvdXIgZm9yIGRlbGltaXRlcnMsIGV0Yy5cbiAqXG4gKiAgKiAgWW91IGNhbiB1c2Ugc3BhY2VzIHRvIGdldCBsaXRlcmFsIGJhY2t0aWNrcyBhdCB0aGUgZWRnZXM6XG4gKlxuICogICAgICAgICAuLi4gdHlwZSBgYCBgYmFyYCBgYCAuLi5cbiAqXG4gKiAgICAgICBUdXJucyB0bzpcbiAqXG4gKiAgICAgICAgIC4uLiB0eXBlIDxjb2RlPmBiYXJgPC9jb2RlPiAuLi5cbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVTcGFucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlU3BhbnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8qXG4gICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cbiAgIChefFteXFxcXF0pXHRcdFx0XHRcdC8vIENoYXJhY3RlciBiZWZvcmUgb3BlbmluZyBgIGNhbid0IGJlIGEgYmFja3NsYXNoXG4gICAoYCspXHRcdFx0XHRcdFx0Ly8gJDIgPSBPcGVuaW5nIHJ1biBvZiBgXG4gICAoXHRcdFx0XHRcdFx0XHQvLyAkMyA9IFRoZSBjb2RlIGJsb2NrXG4gICBbXlxccl0qP1xuICAgW15gXVx0XHRcdFx0XHQvLyBhdHRhY2tsYWI6IHdvcmsgYXJvdW5kIGxhY2sgb2YgbG9va2JlaGluZFxuICAgKVxuICAgXFwyXHRcdFx0XHRcdFx0XHQvLyBNYXRjaGluZyBjbG9zZXJcbiAgICg/IWApXG4gICAvZ20sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAqL1xuXG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0ZXh0ID0gJyc7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxbXlxcXFxdKShgKykoW15cXHJdKj9bXmBdKVxcMig/IWApL2dtLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMykge1xuICAgIHZhciBjID0gbTM7XG4gICAgYyA9IGMucmVwbGFjZSgvXihbIFxcdF0qKS9nLCAnJyk7IC8vIGxlYWRpbmcgd2hpdGVzcGFjZVxuXG4gICAgYyA9IGMucmVwbGFjZSgvWyBcXHRdKiQvZywgJycpOyAvLyB0cmFpbGluZyB3aGl0ZXNwYWNlXG5cbiAgICBjID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoYyk7XG4gICAgcmV0dXJuIG0xICsgJzxjb2RlPicgKyBjICsgJzwvY29kZT4nO1xuICB9KTtcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZVNwYW5zLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqIENvbnZlcnQgYWxsIHRhYnMgdG8gc3BhY2VzXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicsIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JzsgLy8gZXhwYW5kIGZpcnN0IG4tMSB0YWJzXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx0KD89XFx0KS9nLCAnICAgICcpOyAvLyBnX3RhYl93aWR0aFxuICAvLyByZXBsYWNlIHRoZSBudGggd2l0aCB0d28gc2VudGluZWxzXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFx0L2csICd+QX5CJyk7IC8vIHVzZSB0aGUgc2VudGluZWwgdG8gYW5jaG9yIG91ciByZWdleCBzbyBpdCBkb2Vzbid0IGV4cGxvZGVcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9+QiguKz8pfkEvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGxlYWRpbmdUZXh0ID0gbTEsXG4gICAgICAgIG51bVNwYWNlcyA9IDQgLSBsZWFkaW5nVGV4dC5sZW5ndGggJSA0OyAvLyBnX3RhYl93aWR0aFxuICAgIC8vIHRoZXJlICptdXN0KiBiZSBhIGJldHRlciB3YXkgdG8gZG8gdGhpczpcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3BhY2VzOyBpKyspIHtcbiAgICAgIGxlYWRpbmdUZXh0ICs9ICcgJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZGluZ1RleHQ7XG4gIH0pOyAvLyBjbGVhbiB1cCBzZW50aW5lbHNcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9+QS9nLCAnICAgICcpOyAvLyBnX3RhYl93aWR0aFxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL35CL2csICcnKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogU21hcnQgcHJvY2Vzc2luZyBmb3IgYW1wZXJzYW5kcyBhbmQgYW5nbGUgYnJhY2tldHMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVBbXBzQW5kQW5nbGVzJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnOyAvLyBBbXBlcnNhbmQtZW5jb2RpbmcgYmFzZWQgZW50aXJlbHkgb24gTmF0IElyb25zJ3MgQW1wdXRhdG9yIE1UIHBsdWdpbjpcbiAgLy8gaHR0cDovL2J1bXBwby5uZXQvcHJvamVjdHMvYW1wdXRhdG9yL1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyYoPyEjP1t4WF0/KD86WzAtOWEtZkEtRl0rfFxcdyspOykvZywgJyZhbXA7Jyk7IC8vIEVuY29kZSBuYWtlZCA8J3NcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88KD8hW2EtelxcLz9cXCQhXSkvZ2ksICcmbHQ7Jyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZywgd2l0aCBhZnRlciBwcm9jZXNzaW5nIHRoZSBmb2xsb3dpbmcgYmFja3NsYXNoIGVzY2FwZSBzZXF1ZW5jZXMuXG4gKlxuICogYXR0YWNrbGFiOiBUaGUgcG9saXRlIHdheSB0byBkbyB0aGlzIGlzIHdpdGggdGhlIG5ldyBlc2NhcGVDaGFyYWN0ZXJzKCkgZnVuY3Rpb246XG4gKlxuICogICAgdGV4dCA9IGVzY2FwZUNoYXJhY3RlcnModGV4dCxcIlxcXFxcIix0cnVlKTtcbiAqICAgIHRleHQgPSBlc2NhcGVDaGFyYWN0ZXJzKHRleHQsXCJgKl97fVtdKCk+IystLiFcIix0cnVlKTtcbiAqXG4gKiAuLi5idXQgd2UncmUgc2lkZXN0ZXBwaW5nIGl0cyB1c2Ugb2YgdGhlIChzbG93KSBSZWdFeHAgY29uc3RydWN0b3JcbiAqIGFzIGFuIG9wdGltaXphdGlvbiBmb3IgRmlyZWZveC4gIFRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgYSBMT1QuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoXFxcXCkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFwoW2AqX3t9XFxbXFxdKCk+IystLiFdKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogRW5jb2RlL2VzY2FwZSBjZXJ0YWluIGNoYXJhY3RlcnMgaW5zaWRlIE1hcmtkb3duIGNvZGUgcnVucy5cbiAqIFRoZSBwb2ludCBpcyB0aGF0IGluIGNvZGUsIHRoZXNlIGNoYXJhY3RlcnMgYXJlIGxpdGVyYWxzLFxuICogYW5kIGxvc2UgdGhlaXIgc3BlY2lhbCBNYXJrZG93biBtZWFuaW5ncy5cbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnLCBmdW5jdGlvbiAodGV4dCkge1xuICAndXNlIHN0cmljdCc7IC8vIEVuY29kZSBhbGwgYW1wZXJzYW5kczsgSFRNTCBlbnRpdGllcyBhcmUgbm90XG4gIC8vIGVudGl0aWVzIHdpdGhpbiBhIE1hcmtkb3duIGNvZGUgc3Bhbi5cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mL2csICcmYW1wOycpOyAvLyBEbyB0aGUgYW5nbGUgYnJhY2tldCBzb25nIGFuZCBkYW5jZTpcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88L2csICcmbHQ7Jyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz4vZywgJyZndDsnKTsgLy8gTm93LCBlc2NhcGUgY2hhcmFjdGVycyB0aGF0IGFyZSBtYWdpYyBpbiBNYXJrZG93bjpcblxuICB0ZXh0ID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModGV4dCwgJypfe31bXVxcXFwnLCBmYWxzZSk7IC8vIGpqIHRoZSBsaW5lIGFib3ZlIGJyZWFrcyB0aGlzOlxuICAvLy0tLVxuICAvLyogSXRlbVxuICAvLyAgIDEuIFN1Yml0ZW1cbiAgLy8gICAgICAgICAgICBzcGVjaWFsIGNoYXI6ICpcbiAgLy8gLS0tXG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogIElucHV0OiBhbiBlbWFpbCBhZGRyZXNzLCBlLmcuIFwiZm9vQGV4YW1wbGUuY29tXCJcbiAqXG4gKiAgT3V0cHV0OiB0aGUgZW1haWwgYWRkcmVzcyBhcyBhIG1haWx0byBsaW5rLCB3aXRoIGVhY2ggY2hhcmFjdGVyXG4gKiAgICBvZiB0aGUgYWRkcmVzcyBlbmNvZGVkIGFzIGVpdGhlciBhIGRlY2ltYWwgb3IgaGV4IGVudGl0eSwgaW5cbiAqICAgIHRoZSBob3BlcyBvZiBmb2lsaW5nIG1vc3QgYWRkcmVzcyBoYXJ2ZXN0aW5nIHNwYW0gYm90cy4gRS5nLjpcbiAqXG4gKiAgICA8YSBocmVmPVwiJiN4NkQ7JiM5NzsmIzEwNTsmIzEwODsmI3g3NDsmIzExMTs6JiMxMDI7JiMxMTE7JiMxMTE7JiM2NDsmIzEwMTtcbiAqICAgICAgIHgmI3g2MTsmIzEwOTsmI3g3MDsmIzEwODsmI3g2NTsmI3gyRTsmIzk5OyYjMTExOyYjMTA5O1wiPiYjMTAyOyYjMTExOyYjMTExO1xuICogICAgICAgJiM2NDsmIzEwMTt4JiN4NjE7JiMxMDk7JiN4NzA7JiMxMDg7JiN4NjU7JiN4MkU7JiM5OTsmIzExMTsmIzEwOTs8L2E+XG4gKlxuICogIEJhc2VkIG9uIGEgZmlsdGVyIGJ5IE1hdHRoZXcgV2lja2xpbmUsIHBvc3RlZCB0byB0aGUgQkJFZGl0LVRhbGtcbiAqICBtYWlsaW5nIGxpc3Q6IDxodHRwOi8vdGlueXVybC5jb20veXU3dWU+XG4gKlxuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlRW1haWxBZGRyZXNzJywgZnVuY3Rpb24gKGFkZHIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBlbmNvZGUgPSBbZnVuY3Rpb24gKGNoKSB7XG4gICAgcmV0dXJuICcmIycgKyBjaC5jaGFyQ29kZUF0KDApICsgJzsnO1xuICB9LCBmdW5jdGlvbiAoY2gpIHtcbiAgICByZXR1cm4gJyYjeCcgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArICc7JztcbiAgfSwgZnVuY3Rpb24gKGNoKSB7XG4gICAgcmV0dXJuIGNoO1xuICB9XTtcbiAgYWRkciA9ICdtYWlsdG86JyArIGFkZHI7XG4gIGFkZHIgPSBhZGRyLnJlcGxhY2UoLy4vZywgZnVuY3Rpb24gKGNoKSB7XG4gICAgaWYgKGNoID09PSAnQCcpIHtcbiAgICAgIC8vIHRoaXMgKm11c3QqIGJlIGVuY29kZWQuIEkgaW5zaXN0LlxuICAgICAgY2ggPSBlbmNvZGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildKGNoKTtcbiAgICB9IGVsc2UgaWYgKGNoICE9PSAnOicpIHtcbiAgICAgIC8vIGxlYXZlICc6JyBhbG9uZSAodG8gc3BvdCBtYWlsdG86IGxhdGVyKVxuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpOyAvLyByb3VnaGx5IDEwJSByYXcsIDQ1JSBoZXgsIDQ1JSBkZWNcblxuICAgICAgY2ggPSByID4gMC45ID8gZW5jb2RlWzJdKGNoKSA6IHIgPiAwLjQ1ID8gZW5jb2RlWzFdKGNoKSA6IGVuY29kZVswXShjaCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoO1xuICB9KTtcbiAgYWRkciA9ICc8YSBocmVmPVwiJyArIGFkZHIgKyAnXCI+JyArIGFkZHIgKyAnPC9hPic7XG4gIGFkZHIgPSBhZGRyLnJlcGxhY2UoL1wiPi4rOi9nLCAnXCI+Jyk7IC8vIHN0cmlwIHRoZSBtYWlsdG86IGZyb20gdGhlIHZpc2libGUgcGFydFxuXG4gIHJldHVybiBhZGRyO1xufSk7XG4vKipcbiAqIFdpdGhpbiB0YWdzIC0tIG1lYW5pbmcgYmV0d2VlbiA8IGFuZCA+IC0tIGVuY29kZSBbXFwgYCAqIF9dIHNvIHRoZXlcbiAqIGRvbid0IGNvbmZsaWN0IHdpdGggdGhlaXIgdXNlIGluIE1hcmtkb3duIGZvciBjb2RlLCBpdGFsaWNzIGFuZCBzdHJvbmcuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdlc2NhcGVTcGVjaWFsQ2hhcnNXaXRoaW5UYWdBdHRyaWJ1dGVzJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnOyAvLyBCdWlsZCBhIHJlZ2V4IHRvIGZpbmQgSFRNTCB0YWdzIGFuZCBjb21tZW50cy4gIFNlZSBGcmllZGwnc1xuICAvLyBcIk1hc3RlcmluZyBSZWd1bGFyIEV4cHJlc3Npb25zXCIsIDJuZCBFZC4sIHBwLiAyMDAtMjAxLlxuXG4gIHZhciByZWdleCA9IC8oPFthLXpcXC8hJF0oXCJbXlwiXSpcInwnW14nXSonfFteJ1wiPl0pKj58PCEoLS0uKj8tLVxccyopKz4pL2dpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZ2V4LCBmdW5jdGlvbiAod2hvbGVNYXRjaCkge1xuICAgIHZhciB0YWcgPSB3aG9sZU1hdGNoLnJlcGxhY2UoLyguKTxcXC8/Y29kZT4oPz0uKS9nLCAnJDFgJyk7XG4gICAgdGFnID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModGFnLCAnXFxcXGAqXycsIGZhbHNlKTtcbiAgICByZXR1cm4gdGFnO1xuICB9KTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogSGFuZGxlIGdpdGh1YiBjb2RlYmxvY2tzIHByaW9yIHRvIHJ1bm5pbmcgSGFzaEhUTUwgc28gdGhhdFxuICogSFRNTCBjb250YWluZWQgd2l0aGluIHRoZSBjb2RlYmxvY2sgZ2V0cyBlc2NhcGVkIHByb3Blcmx5XG4gKiBFeGFtcGxlOlxuICogYGBgcnVieVxuICogICAgIGRlZiBoZWxsb193b3JsZCh4KVxuICogICAgICAgcHV0cyBcIkhlbGxvLCAje3h9XCJcbiAqICAgICBlbmRcbiAqIGBgYFxuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JzsgLy8gZWFybHkgZXhpdCBpZiBvcHRpb24gaXMgbm90IGVuYWJsZWRcblxuICBpZiAoIW9wdGlvbnMuZ2hDb2RlQmxvY2tzKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdnaXRodWJDb2RlQmxvY2tzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ICs9ICd+MCc7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyg/Ol58XFxuKWBgYCguKilcXG4oW1xcc1xcU10qPylcXG5gYGAvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxhbmd1YWdlLCBjb2RlYmxvY2spIHtcbiAgICB2YXIgZW5kID0gb3B0aW9ucy5vbWl0RXh0cmFXTEluQ29kZUJsb2NrcyA/ICcnIDogJ1xcbic7IC8vIEZpcnN0IHBhcnNlIHRoZSBnaXRodWIgY29kZSBibG9ja1xuXG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoY29kZWJsb2NrKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykoY29kZWJsb2NrKTtcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXlxcbisvZywgJycpOyAvLyB0cmltIGxlYWRpbmcgbmV3bGluZXNcblxuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7IC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuXG4gICAgY29kZWJsb2NrID0gJzxwcmU+PGNvZGUnICsgKGxhbmd1YWdlID8gJyBjbGFzcz1cIicgKyBsYW5ndWFnZSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlICsgJ1wiJyA6ICcnKSArICc+JyArIGNvZGVibG9jayArIGVuZCArICc8L2NvZGU+PC9wcmU+JztcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7IC8vIFNpbmNlIEdIQ29kZWJsb2NrcyBjYW4gYmUgZmFsc2UgcG9zaXRpdmVzLCB3ZSBuZWVkIHRvXG4gICAgLy8gc3RvcmUgdGhlIHByaW1pdGl2ZSB0ZXh0IGFuZCB0aGUgcGFyc2VkIHRleHQgaW4gYSBnbG9iYWwgdmFyLFxuICAgIC8vIGFuZCB0aGVuIHJldHVybiBhIHRva2VuXG5cbiAgICByZXR1cm4gJ1xcblxcbn5HJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHtcbiAgICAgIHRleHQ6IHdob2xlTWF0Y2gsXG4gICAgICBjb2RlYmxvY2s6IGNvZGVibG9ja1xuICAgIH0pIC0gMSkgKyAnR1xcblxcbic7XG4gIH0pOyAvLyBhdHRhY2tsYWI6IHN0cmlwIHNlbnRpbmVsXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvfjAvLCAnJyk7XG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2dpdGh1YkNvZGVCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXG4rfFxcbiskKS9nLCAnJyk7XG4gIHJldHVybiAnXFxuXFxufksnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaCh0ZXh0KSAtIDEpICsgJ0tcXG5cXG4nO1xufSk7XG5zaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICB2YXIgYmxvY2tUZXh0ID0gbTE7IC8vIFVuZG8gZG91YmxlIGxpbmVzXG5cbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFxuXFxuL2csICdcXG4nKTtcbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXlxcbi8sICcnKTsgLy8gc3RyaXAgdHJhaWxpbmcgYmxhbmsgbGluZXNcblxuICAgIGJsb2NrVGV4dCA9IGJsb2NrVGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7IC8vIFJlcGxhY2UgdGhlIGVsZW1lbnQgdGV4dCB3aXRoIGEgbWFya2VyIChcIn5LeEtcIiB3aGVyZSB4IGlzIGl0cyBrZXkpXG5cbiAgICBibG9ja1RleHQgPSAnXFxuXFxufksnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaChibG9ja1RleHQpIC0gMSkgKyAnS1xcblxcbic7XG4gICAgcmV0dXJuIGJsb2NrVGV4dDtcbiAgfTtcbn0pO1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgYmxvY2tUYWdzID0gWydwcmUnLCAnZGl2JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2Jsb2NrcXVvdGUnLCAndGFibGUnLCAnZGwnLCAnb2wnLCAndWwnLCAnc2NyaXB0JywgJ25vc2NyaXB0JywgJ2Zvcm0nLCAnZmllbGRzZXQnLCAnaWZyYW1lJywgJ21hdGgnLCAnc3R5bGUnLCAnc2VjdGlvbicsICdoZWFkZXInLCAnZm9vdGVyJywgJ25hdicsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2FkZHJlc3MnLCAnYXVkaW8nLCAnY2FudmFzJywgJ2ZpZ3VyZScsICdoZ3JvdXAnLCAnb3V0cHV0JywgJ3ZpZGVvJywgJ3AnXSxcbiAgICAgIHJlcEZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbWF0Y2gsIGxlZnQsIHJpZ2h0KSB7XG4gICAgdmFyIHR4dCA9IHdob2xlTWF0Y2g7IC8vIGNoZWNrIGlmIHRoaXMgaHRtbCBlbGVtZW50IGlzIG1hcmtlZCBhcyBtYXJrZG93blxuICAgIC8vIGlmIHNvLCBpdCdzIGNvbnRlbnRzIHNob3VsZCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cblxuICAgIGlmIChsZWZ0LnNlYXJjaCgvXFxibWFya2Rvd25cXGIvKSAhPT0gLTEpIHtcbiAgICAgIHR4dCA9IGxlZnQgKyBnbG9iYWxzLmNvbnZlcnRlci5tYWtlSHRtbChtYXRjaCkgKyByaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gJ1xcblxcbn5LJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2godHh0KSAtIDEpICsgJ0tcXG5cXG4nO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tUYWdzLmxlbmd0aDsgKytpKSB7XG4gICAgdGV4dCA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHRleHQsIHJlcEZ1bmMsICdeKD86IHxcXFxcdCl7MCwzfTwnICsgYmxvY2tUYWdzW2ldICsgJ1xcXFxiW14+XSo+JywgJzwvJyArIGJsb2NrVGFnc1tpXSArICc+JywgJ2dpbScpO1xuICB9IC8vIEhSIFNQRUNJQUwgQ0FTRVxuXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcblsgXXswLDN9KDwoaHIpXFxiKFtePD5dKSo/XFwvPz4pWyBcXHRdKig/PVxcbnsyLH0pKS9nLCBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpOyAvLyBTcGVjaWFsIGNhc2UgZm9yIHN0YW5kYWxvbmUgSFRNTCBjb21tZW50czpcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPCEtLVtcXHNcXFNdKj8tLT4pL2csIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSk7IC8vIFBIUCBhbmQgQVNQLXN0eWxlIHByb2Nlc3NvciBpbnN0cnVjdGlvbnMgKDw/Li4uPz4gYW5kIDwlLi4uJT4pXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKD86XFxuXFxuKShbIF17MCwzfSg/OjwoWz8lXSlbXlxccl0qP1xcMj4pWyBcXHRdKig/PVxcbnsyLH0pKS9nLCBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBIYXNoIHNwYW4gZWxlbWVudHMgdGhhdCBzaG91bGQgbm90IGJlIHBhcnNlZCBhcyBtYXJrZG93blxuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxTcGFucycsIGZ1bmN0aW9uICh0ZXh0LCBjb25maWcsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaGVzID0gc2hvd2Rvd24uaGVscGVyLm1hdGNoUmVjdXJzaXZlUmVnRXhwKHRleHQsICc8Y29kZVxcXFxiW14+XSo+JywgJzwvY29kZT4nLCAnZ2knKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKG1hdGNoZXNbaV1bMF0sICd+TCcgKyAoZ2xvYmFscy5nSHRtbFNwYW5zLnB1c2gobWF0Y2hlc1tpXVswXSkgLSAxKSArICdMJyk7XG4gIH1cblxuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBVbmhhc2ggSFRNTCBzcGFuc1xuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcigndW5oYXNoSFRNTFNwYW5zJywgZnVuY3Rpb24gKHRleHQsIGNvbmZpZywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbG9iYWxzLmdIdG1sU3BhbnMubGVuZ3RoOyArK2kpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCd+TCcgKyBpICsgJ0wnLCBnbG9iYWxzLmdIdG1sU3BhbnNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogSGFzaCBzcGFuIGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hQcmVDb2RlVGFncycsIGZ1bmN0aW9uICh0ZXh0LCBjb25maWcsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciByZXBGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICAgIC8vIGVuY29kZSBodG1sIGVudGl0aWVzXG4gICAgdmFyIGNvZGVibG9jayA9IGxlZnQgKyBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShtYXRjaCkgKyByaWdodDtcbiAgICByZXR1cm4gJ1xcblxcbn5HJyArIChnbG9iYWxzLmdoQ29kZUJsb2Nrcy5wdXNoKHtcbiAgICAgIHRleHQ6IHdob2xlTWF0Y2gsXG4gICAgICBjb2RlYmxvY2s6IGNvZGVibG9ja1xuICAgIH0pIC0gMSkgKyAnR1xcblxcbic7XG4gIH07XG5cbiAgdGV4dCA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHRleHQsIHJlcEZ1bmMsICdeKD86IHxcXFxcdCl7MCwzfTxwcmVcXFxcYltePl0qPlxcXFxzKjxjb2RlXFxcXGJbXj5dKj4nLCAnXig/OiB8XFxcXHQpezAsM308L2NvZGU+XFxcXHMqPC9wcmU+JywgJ2dpbScpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hlYWRlcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHZhciBwcmVmaXhIZWFkZXIgPSBvcHRpb25zLnByZWZpeEhlYWRlcklkLFxuICAgICAgaGVhZGVyTGV2ZWxTdGFydCA9IGlzTmFOKHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCkpID8gMSA6IHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCksXG4gICAgICAvLyBTZXQgdGV4dC1zdHlsZSBoZWFkZXJzOlxuICAvL1x0SGVhZGVyIDFcbiAgLy9cdD09PT09PT09XG4gIC8vXG4gIC8vXHRIZWFkZXIgMlxuICAvL1x0LS0tLS0tLS1cbiAgLy9cbiAgc2V0ZXh0UmVnZXhIMSA9IG9wdGlvbnMuc21vb3RoTGl2ZVByZXZpZXcgPyAvXiguKylbIFxcdF0qXFxuPXsyLH1bIFxcdF0qXFxuKy9nbSA6IC9eKC4rKVsgXFx0XSpcXG49K1sgXFx0XSpcXG4rL2dtLFxuICAgICAgc2V0ZXh0UmVnZXhIMiA9IG9wdGlvbnMuc21vb3RoTGl2ZVByZXZpZXcgPyAvXiguKylbIFxcdF0qXFxuLXsyLH1bIFxcdF0qXFxuKy9nbSA6IC9eKC4rKVsgXFx0XSpcXG4tK1sgXFx0XSpcXG4rL2dtO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNldGV4dFJlZ2V4SDEsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuICAgIHZhciBzcGFuR2FtdXQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKG0xLCBvcHRpb25zLCBnbG9iYWxzKSxcbiAgICAgICAgaElEID0gb3B0aW9ucy5ub0hlYWRlcklkID8gJycgOiAnIGlkPVwiJyArIGhlYWRlcklkKG0xKSArICdcIicsXG4gICAgICAgIGhMZXZlbCA9IGhlYWRlckxldmVsU3RhcnQsXG4gICAgICAgIGhhc2hCbG9jayA9ICc8aCcgKyBoTGV2ZWwgKyBoSUQgKyAnPicgKyBzcGFuR2FtdXQgKyAnPC9oJyArIGhMZXZlbCArICc+JztcbiAgICByZXR1cm4gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snKShoYXNoQmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9KTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShzZXRleHRSZWdleEgyLCBmdW5jdGlvbiAobWF0Y2hGb3VuZCwgbTEpIHtcbiAgICB2YXIgc3BhbkdhbXV0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShtMSwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgIGhJRCA9IG9wdGlvbnMubm9IZWFkZXJJZCA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMSkgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0ICsgMSxcbiAgICAgICAgaGFzaEJsb2NrID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW5HYW11dCArICc8L2gnICsgaExldmVsICsgJz4nO1xuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhhc2hCbG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pOyAvLyBhdHgtc3R5bGUgaGVhZGVyczpcbiAgLy8gICMgSGVhZGVyIDFcbiAgLy8gICMjIEhlYWRlciAyXG4gIC8vICAjIyBIZWFkZXIgMiB3aXRoIGNsb3NpbmcgaGFzaGVzICMjXG4gIC8vICAuLi5cbiAgLy8gICMjIyMjIyBIZWFkZXIgNlxuICAvL1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14oI3sxLDZ9KVsgXFx0XSooLis/KVsgXFx0XSojKlxcbisvZ20sIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIpIHtcbiAgICB2YXIgc3BhbiA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykobTIsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSBvcHRpb25zLm5vSGVhZGVySWQgPyAnJyA6ICcgaWQ9XCInICsgaGVhZGVySWQobTIpICsgJ1wiJyxcbiAgICAgICAgaExldmVsID0gaGVhZGVyTGV2ZWxTdGFydCAtIDEgKyBtMS5sZW5ndGgsXG4gICAgICAgIGhlYWRlciA9ICc8aCcgKyBoTGV2ZWwgKyBoSUQgKyAnPicgKyBzcGFuICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGVhZGVyLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGVhZGVySWQobSkge1xuICAgIHZhciB0aXRsZSxcbiAgICAgICAgZXNjYXBlZElkID0gbS5yZXBsYWNlKC9bXlxcd10vZywgJycpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoZ2xvYmFscy5oYXNoTGlua0NvdW50c1tlc2NhcGVkSWRdKSB7XG4gICAgICB0aXRsZSA9IGVzY2FwZWRJZCArICctJyArIGdsb2JhbHMuaGFzaExpbmtDb3VudHNbZXNjYXBlZElkXSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IGVzY2FwZWRJZDtcbiAgICAgIGdsb2JhbHMuaGFzaExpbmtDb3VudHNbZXNjYXBlZElkXSA9IDE7XG4gICAgfSAvLyBQcmVmaXggaWQgdG8gcHJldmVudCBjYXVzaW5nIGluYWR2ZXJ0ZW50IHByZS1leGlzdGluZyBzdHlsZSBtYXRjaGVzLlxuXG5cbiAgICBpZiAocHJlZml4SGVhZGVyID09PSB0cnVlKSB7XG4gICAgICBwcmVmaXhIZWFkZXIgPSAnc2VjdGlvbic7XG4gICAgfVxuXG4gICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1N0cmluZyhwcmVmaXhIZWFkZXIpKSB7XG4gICAgICByZXR1cm4gcHJlZml4SGVhZGVyICsgdGl0bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGVhZGVycy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBUdXJuIE1hcmtkb3duIGltYWdlIHNob3J0Y3V0cyBpbnRvIDxpbWc+IHRhZ3MuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdpbWFnZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaW1hZ2VzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB2YXIgaW5saW5lUmVnRXhwID0gLyFcXFsoLio/KV1cXHM/XFwoWyBcXHRdKigpPD8oXFxTKz8pPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qKD86KFsnXCJdKSguKj8pXFw2WyBcXHRdKik/XFwpL2csXG4gICAgICByZWZlcmVuY2VSZWdFeHAgPSAvIVxcWyhbXlxcXV0qPyldID8oPzpcXG4gKik/XFxbKC4qPyldKCkoKSgpKCkoKS9nO1xuXG4gIGZ1bmN0aW9uIHdyaXRlSW1hZ2VUYWcod2hvbGVNYXRjaCwgYWx0VGV4dCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIG01LCB0aXRsZSkge1xuICAgIHZhciBnVXJscyA9IGdsb2JhbHMuZ1VybHMsXG4gICAgICAgIGdUaXRsZXMgPSBnbG9iYWxzLmdUaXRsZXMsXG4gICAgICAgIGdEaW1zID0gZ2xvYmFscy5nRGltZW5zaW9ucztcbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghdGl0bGUpIHtcbiAgICAgIHRpdGxlID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHVybCA9PT0gJycgfHwgdXJsID09PSBudWxsKSB7XG4gICAgICBpZiAobGlua0lkID09PSAnJyB8fCBsaW5rSWQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gbG93ZXItY2FzZSBhbmQgdHVybiBlbWJlZGRlZCBuZXdsaW5lcyBpbnRvIHNwYWNlc1xuICAgICAgICBsaW5rSWQgPSBhbHRUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvID9cXG4vZywgJyAnKTtcbiAgICAgIH1cblxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnVXJsc1tsaW5rSWRdKSkge1xuICAgICAgICB1cmwgPSBnVXJsc1tsaW5rSWRdO1xuXG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdUaXRsZXNbbGlua0lkXSkpIHtcbiAgICAgICAgICB0aXRsZSA9IGdUaXRsZXNbbGlua0lkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKGdEaW1zW2xpbmtJZF0pKSB7XG4gICAgICAgICAgd2lkdGggPSBnRGltc1tsaW5rSWRdLndpZHRoO1xuICAgICAgICAgIGhlaWdodCA9IGdEaW1zW2xpbmtJZF0uaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gd2hvbGVNYXRjaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbHRUZXh0ID0gYWx0VGV4dC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgYWx0VGV4dCA9IHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzKGFsdFRleHQsICcqXycsIGZhbHNlKTtcbiAgICB1cmwgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh1cmwsICcqXycsIGZhbHNlKTtcbiAgICB2YXIgcmVzdWx0ID0gJzxpbWcgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgYWx0VGV4dCArICdcIic7XG5cbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgICAgdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpO1xuICAgICAgcmVzdWx0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICAgIH1cblxuICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgIHdpZHRoID0gd2lkdGggPT09ICcqJyA/ICdhdXRvJyA6IHdpZHRoO1xuICAgICAgaGVpZ2h0ID0gaGVpZ2h0ID09PSAnKicgPyAnYXV0bycgOiBoZWlnaHQ7XG4gICAgICByZXN1bHQgKz0gJyB3aWR0aD1cIicgKyB3aWR0aCArICdcIic7XG4gICAgICByZXN1bHQgKz0gJyBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiJztcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJyAvPic7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSAvLyBGaXJzdCwgaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBsYWJlbGVkIGltYWdlczogIVthbHQgdGV4dF1baWRdXG5cblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZmVyZW5jZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7IC8vIE5leHQsIGhhbmRsZSBpbmxpbmUgaW1hZ2VzOiAgIVthbHQgdGV4dF0odXJsID08d2lkdGg+eDxoZWlnaHQ+IFwib3B0aW9uYWwgdGl0bGVcIilcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGlubGluZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2ltYWdlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdpdGFsaWNzQW5kQm9sZCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBpZiAob3B0aW9ucy5saXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzKSB7XG4gICAgLy91bmRlcnNjb3Jlc1xuICAgIC8vIFNpbmNlIHdlIGFyZSBjb25zdW1pbmcgYSBcXHMgY2hhcmFjdGVyLCB3ZSBuZWVkIHRvIGFkZCBpdFxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhefFxcc3w+fFxcYilfXyg/PVxcUykoW1xcc1xcU10rPylfXyg/PVxcYnw8fFxcc3wkKS9nbSwgJyQxPHN0cm9uZz4kMjwvc3Ryb25nPicpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhefFxcc3w+fFxcYilfKD89XFxTKShbXFxzXFxTXSs/KV8oPz1cXGJ8PHxcXHN8JCkvZ20sICckMTxlbT4kMjwvZW0+Jyk7IC8vYXN0ZXJpc2tzXG5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFwqXFwqKSg/PVxcUykoW15cXHJdKj9cXFNbKl0qKVxcMS9nLCAnPHN0cm9uZz4kMjwvc3Ryb25nPicpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhcXCopKD89XFxTKShbXlxccl0qP1xcUylcXDEvZywgJzxlbT4kMjwvZW0+Jyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gPHN0cm9uZz4gbXVzdCBnbyBmaXJzdDpcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFwqXFwqfF9fKSg/PVxcUykoW15cXHJdKj9cXFNbKl9dKilcXDEvZywgJzxzdHJvbmc+JDI8L3N0cm9uZz4nKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFwqfF8pKD89XFxTKShbXlxccl0qP1xcUylcXDEvZywgJzxlbT4kMjwvZW0+Jyk7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBGb3JtIEhUTUwgb3JkZXJlZCAobnVtYmVyZWQpIGFuZCB1bm9yZGVyZWQgKGJ1bGxldGVkKSBsaXN0cy5cbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2xpc3RzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAvKipcbiAgICogUHJvY2VzcyB0aGUgY29udGVudHMgb2YgYSBzaW5nbGUgb3JkZXJlZCBvciB1bm9yZGVyZWQgbGlzdCwgc3BsaXR0aW5nIGl0XG4gICAqIGludG8gaW5kaXZpZHVhbCBsaXN0IGl0ZW1zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlzdFN0clxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiBwcm9jZXNzTGlzdEl0ZW1zKGxpc3RTdHIsIHRyaW1UcmFpbGluZykge1xuICAgIC8vIFRoZSAkZ19saXN0X2xldmVsIGdsb2JhbCBrZWVwcyB0cmFjayBvZiB3aGVuIHdlJ3JlIGluc2lkZSBhIGxpc3QuXG4gICAgLy8gRWFjaCB0aW1lIHdlIGVudGVyIGEgbGlzdCwgd2UgaW5jcmVtZW50IGl0OyB3aGVuIHdlIGxlYXZlIGEgbGlzdCxcbiAgICAvLyB3ZSBkZWNyZW1lbnQuIElmIGl0J3MgemVybywgd2UncmUgbm90IGluIGEgbGlzdCBhbnltb3JlLlxuICAgIC8vXG4gICAgLy8gV2UgZG8gdGhpcyBiZWNhdXNlIHdoZW4gd2UncmUgbm90IGluc2lkZSBhIGxpc3QsIHdlIHdhbnQgdG8gdHJlYXRcbiAgICAvLyBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICAgIC8vXG4gICAgLy8gICAgSSByZWNvbW1lbmQgdXBncmFkaW5nIHRvIHZlcnNpb25cbiAgICAvLyAgICA4LiBPb3BzLCBub3cgdGhpcyBsaW5lIGlzIHRyZWF0ZWRcbiAgICAvLyAgICBhcyBhIHN1Yi1saXN0LlxuICAgIC8vXG4gICAgLy8gQXMgYSBzaW5nbGUgcGFyYWdyYXBoLCBkZXNwaXRlIHRoZSBmYWN0IHRoYXQgdGhlIHNlY29uZCBsaW5lIHN0YXJ0c1xuICAgIC8vIHdpdGggYSBkaWdpdC1wZXJpb2Qtc3BhY2Ugc2VxdWVuY2UuXG4gICAgLy9cbiAgICAvLyBXaGVyZWFzIHdoZW4gd2UncmUgaW5zaWRlIGEgbGlzdCAob3Igc3ViLWxpc3QpLCB0aGF0IGxpbmUgd2lsbCBiZVxuICAgIC8vIHRyZWF0ZWQgYXMgdGhlIHN0YXJ0IG9mIGEgc3ViLWxpc3QuIFdoYXQgYSBrbHVkZ2UsIGh1aD8gVGhpcyBpc1xuICAgIC8vIGFuIGFzcGVjdCBvZiBNYXJrZG93bidzIHN5bnRheCB0aGF0J3MgaGFyZCB0byBwYXJzZSBwZXJmZWN0bHlcbiAgICAvLyB3aXRob3V0IHJlc29ydGluZyB0byBtaW5kLXJlYWRpbmcuIFBlcmhhcHMgdGhlIHNvbHV0aW9uIGlzIHRvXG4gICAgLy8gY2hhbmdlIHRoZSBzeW50YXggcnVsZXMgc3VjaCB0aGF0IHN1Yi1saXN0cyBtdXN0IHN0YXJ0IHdpdGggYVxuICAgIC8vIHN0YXJ0aW5nIGNhcmRpbmFsIG51bWJlcjsgZS5nLiBcIjEuXCIgb3IgXCJhLlwiLlxuICAgIGdsb2JhbHMuZ0xpc3RMZXZlbCsrOyAvLyB0cmltIHRyYWlsaW5nIGJsYW5rIGxpbmVzOlxuXG4gICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZSgvXFxuezIsfSQvLCAnXFxuJyk7IC8vIGF0dGFja2xhYjogYWRkIHNlbnRpbmVsIHRvIGVtdWxhdGUgXFx6XG5cbiAgICBsaXN0U3RyICs9ICd+MCc7XG4gICAgdmFyIHJneCA9IC8oXFxuKT8oXlsgXFx0XSopKFsqKy1dfFxcZCtbLl0pWyBcXHRdKygoXFxbKHh8WHwgKT9dKT9bIFxcdF0qW15cXHJdKz8oXFxuezEsMn0pKSg/PVxcbioofjB8XFwyKFsqKy1dfFxcZCtbLl0pWyBcXHRdKykpL2dtLFxuICAgICAgICBpc1BhcmFncmFwaGVkID0gL1xcblsgXFx0XSpcXG4oPyF+MCkvLnRlc3QobGlzdFN0cik7XG4gICAgbGlzdFN0ciA9IGxpc3RTdHIucmVwbGFjZShyZ3gsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIsIG0zLCBtNCwgdGFza2J0biwgY2hlY2tlZCkge1xuICAgICAgY2hlY2tlZCA9IGNoZWNrZWQgJiYgY2hlY2tlZC50cmltKCkgIT09ICcnO1xuICAgICAgdmFyIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ291dGRlbnQnKShtNCwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgICAgYnVsbGV0U3R5bGUgPSAnJzsgLy8gU3VwcG9ydCBmb3IgZ2l0aHViIHRhc2tsaXN0c1xuXG4gICAgICBpZiAodGFza2J0biAmJiBvcHRpb25zLnRhc2tsaXN0cykge1xuICAgICAgICBidWxsZXRTdHlsZSA9ICcgY2xhc3M9XCJ0YXNrLWxpc3QtaXRlbVwiIHN0eWxlPVwibGlzdC1zdHlsZS10eXBlOiBub25lO1wiJztcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXlsgXFx0XSpcXFsoeHxYfCApP10vbSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvdHAgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGRpc2FibGVkIHN0eWxlPVwibWFyZ2luOiAwcHggMC4zNWVtIDAuMjVlbSAtMS42ZW07IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XCInO1xuXG4gICAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIG90cCArPSAnIGNoZWNrZWQnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG90cCArPSAnPic7XG4gICAgICAgICAgcmV0dXJuIG90cDtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIG0xIC0gTGVhZGluZyBsaW5lIG9yXG4gICAgICAvLyBIYXMgYSBkb3VibGUgcmV0dXJuIChtdWx0aSBwYXJhZ3JhcGgpIG9yXG4gICAgICAvLyBIYXMgc3VibGlzdFxuXG5cbiAgICAgIGlmIChtMSB8fCBpdGVtLnNlYXJjaCgvXFxuezIsfS8pID4gLTEpIHtcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWN1cnNpb24gZm9yIHN1Yi1saXN0czpcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignbGlzdHMnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXFxuJC8sICcnKTsgLy8gY2hvbXAoaXRlbSlcblxuICAgICAgICBpZiAoaXNQYXJhZ3JhcGhlZCkge1xuICAgICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpdGVtID0gJ1xcbjxsaScgKyBidWxsZXRTdHlsZSArICc+JyArIGl0ZW0gKyAnPC9saT5cXG4nO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7IC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcblxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL34wL2csICcnKTtcbiAgICBnbG9iYWxzLmdMaXN0TGV2ZWwtLTtcblxuICAgIGlmICh0cmltVHJhaWxpbmcpIHtcbiAgICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL1xccyskLywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0U3RyO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBhbmQgcGFyc2UgY29uc2VjdXRpdmUgbGlzdHMgKGJldHRlciBmaXggZm9yIGlzc3VlICMxNDIpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0VHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHBhcnNlQ29uc2VjdXRpdmVMaXN0cyhsaXN0LCBsaXN0VHlwZSwgdHJpbVRyYWlsaW5nKSB7XG4gICAgLy8gY2hlY2sgaWYgd2UgY2F1Z2h0IDIgb3IgbW9yZSBjb25zZWN1dGl2ZSBsaXN0cyBieSBtaXN0YWtlXG4gICAgLy8gd2UgdXNlIHRoZSBjb3VudGVyUmd4LCBtZWFuaW5nIGlmIGxpc3RUeXBlIGlzIFVMIHdlIGxvb2sgZm9yIFVMIGFuZCB2aWNlIHZlcnNhXG4gICAgdmFyIGNvdW50ZXJSeGcgPSBsaXN0VHlwZSA9PT0gJ3VsJyA/IC9eIHswLDJ9XFxkK1xcLlsgXFx0XS9nbSA6IC9eIHswLDJ9WyorLV1bIFxcdF0vZ20sXG4gICAgICAgIHN1Ykxpc3RzID0gW10sXG4gICAgICAgIHJlc3VsdCA9ICcnO1xuXG4gICAgaWYgKGxpc3Quc2VhcmNoKGNvdW50ZXJSeGcpICE9PSAtMSkge1xuICAgICAgKGZ1bmN0aW9uIHBhcnNlQ0wodHh0KSB7XG4gICAgICAgIHZhciBwb3MgPSB0eHQuc2VhcmNoKGNvdW50ZXJSeGcpO1xuXG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgLy8gc2xpY2VcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyAnPicgKyBwcm9jZXNzTGlzdEl0ZW1zKHR4dC5zbGljZSgwLCBwb3MpLCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcblxcbic7IC8vIGludmVydCBjb3VudGVyVHlwZSBhbmQgbGlzdFR5cGVcblxuICAgICAgICAgIGxpc3RUeXBlID0gbGlzdFR5cGUgPT09ICd1bCcgPyAnb2wnIDogJ3VsJztcbiAgICAgICAgICBjb3VudGVyUnhnID0gbGlzdFR5cGUgPT09ICd1bCcgPyAvXiB7MCwyfVxcZCtcXC5bIFxcdF0vZ20gOiAvXiB7MCwyfVsqKy1dWyBcXHRdL2dtOyAvL3JlY3Vyc2VcblxuICAgICAgICAgIHBhcnNlQ0wodHh0LnNsaWNlKHBvcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSAnXFxuXFxuPCcgKyBsaXN0VHlwZSArICc+JyArIHByb2Nlc3NMaXN0SXRlbXModHh0LCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcblxcbic7XG4gICAgICAgIH1cbiAgICAgIH0pKGxpc3QpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Ykxpc3RzLmxlbmd0aDsgKytpKSB7fVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSAnXFxuXFxuPCcgKyBsaXN0VHlwZSArICc+JyArIHByb2Nlc3NMaXN0SXRlbXMobGlzdCwgISF0cmltVHJhaWxpbmcpICsgJzwvJyArIGxpc3RUeXBlICsgJz5cXG5cXG4nO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gLy8gYXR0YWNrbGFiOiBhZGQgc2VudGluZWwgdG8gaGFjayBhcm91bmQga2h0bWwvc2FmYXJpIGJ1ZzpcbiAgLy8gaHR0cDovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTEyMzFcblxuXG4gIHRleHQgKz0gJ34wJzsgLy8gUmUtdXNhYmxlIHBhdHRlcm4gdG8gbWF0Y2ggYW55IGVudGlyZSB1bCBvciBvbCBsaXN0OlxuXG4gIHZhciB3aG9sZUxpc3QgPSAvXigoWyBdezAsM30oWyorLV18XFxkK1suXSlbIFxcdF0rKVteXFxyXSs/KH4wfFxcbnsyLH0oPz1cXFMpKD8hWyBcXHRdKig/OlsqKy1dfFxcZCtbLl0pWyBcXHRdKykpKS9nbTtcblxuICBpZiAoZ2xvYmFscy5nTGlzdExldmVsKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSh3aG9sZUxpc3QsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBsaXN0LCBtMikge1xuICAgICAgdmFyIGxpc3RUeXBlID0gbTIuc2VhcmNoKC9bKistXS9nKSA+IC0xID8gJ3VsJyA6ICdvbCc7XG4gICAgICByZXR1cm4gcGFyc2VDb25zZWN1dGl2ZUxpc3RzKGxpc3QsIGxpc3RUeXBlLCB0cnVlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB3aG9sZUxpc3QgPSAvKFxcblxcbnxeXFxuPykoKFsgXXswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKylbXlxccl0rPyh+MHxcXG57Mix9KD89XFxTKSg/IVsgXFx0XSooPzpbKistXXxcXGQrWy5dKVsgXFx0XSspKSkvZ207IC8vd2hvbGVMaXN0ID0gLyhcXG5cXG58Xlxcbj8pKCB7MCwzfShbKistXXxcXGQrXFwuKVsgXFx0XStbXFxzXFxTXSs/KSg/PSh+MCl8KFxcblxcbig/IVxcdHwgezIsfXwgezAsM30oWyorLV18XFxkK1xcLilbIFxcdF0pKSkvZztcblxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hvbGVMaXN0LCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIGxpc3QsIG0zKSB7XG4gICAgICB2YXIgbGlzdFR5cGUgPSBtMy5zZWFyY2goL1sqKy1dL2cpID4gLTEgPyAndWwnIDogJ29sJztcbiAgICAgIHJldHVybiBwYXJzZUNvbnNlY3V0aXZlTGlzdHMobGlzdCwgbGlzdFR5cGUpO1xuICAgIH0pO1xuICB9IC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcblxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL34wLywgJycpO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdsaXN0cy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuLyoqXG4gKiBSZW1vdmUgb25lIGxldmVsIG9mIGxpbmUtbGVhZGluZyB0YWJzIG9yIHNwYWNlc1xuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcsIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICd1c2Ugc3RyaWN0JzsgLy8gYXR0YWNrbGFiOiBoYWNrIGFyb3VuZCBLb25xdWVyb3IgMy41LjQgYnVnOlxuICAvLyBcIi0tLS0tLS0tLS1idWdcIi5yZXBsYWNlKC9eLS9nLFwiXCIpID09IFwiYnVnXCJcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKFxcdHxbIF17MSw0fSkvZ20sICd+MCcpOyAvLyBhdHRhY2tsYWI6IGdfdGFiX3dpZHRoXG4gIC8vIGF0dGFja2xhYjogY2xlYW4gdXAgaGFja1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL34wL2csICcnKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICpcbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3BhcmFncmFwaHMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgncGFyYWdyYXBocy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgbGluZXM6XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG4gIHZhciBncmFmcyA9IHRleHQuc3BsaXQoL1xcbnsyLH0vZyksXG4gICAgICBncmFmc091dCA9IFtdLFxuICAgICAgZW5kID0gZ3JhZnMubGVuZ3RoOyAvLyBXcmFwIDxwPiB0YWdzXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmQ7IGkrKykge1xuICAgIHZhciBzdHIgPSBncmFmc1tpXTsgLy8gaWYgdGhpcyBpcyBhbiBIVE1MIG1hcmtlciwgY29weSBpdFxuXG4gICAgaWYgKHN0ci5zZWFyY2goL34oS3xHKShcXGQrKVxcMS9nKSA+PSAwKSB7XG4gICAgICBncmFmc091dC5wdXNoKHN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0Jykoc3RyLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9eKFsgXFx0XSopL2csICc8cD4nKTtcbiAgICAgIHN0ciArPSAnPC9wPic7XG4gICAgICBncmFmc091dC5wdXNoKHN0cik7XG4gICAgfVxuICB9XG4gIC8qKiBVbmhhc2hpZnkgSFRNTCBibG9ja3MgKi9cblxuXG4gIGVuZCA9IGdyYWZzT3V0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICB2YXIgYmxvY2tUZXh0ID0gJycsXG4gICAgICAgIGdyYWZzT3V0SXQgPSBncmFmc091dFtpXSxcbiAgICAgICAgY29kZUZsYWcgPSBmYWxzZTsgLy8gaWYgdGhpcyBpcyBhIG1hcmtlciBmb3IgYW4gaHRtbCBibG9jay4uLlxuXG4gICAgd2hpbGUgKGdyYWZzT3V0SXQuc2VhcmNoKC9+KEt8RykoXFxkKylcXDEvKSA+PSAwKSB7XG4gICAgICB2YXIgZGVsaW0gPSBSZWdFeHAuJDEsXG4gICAgICAgICAgbnVtID0gUmVnRXhwLiQyO1xuXG4gICAgICBpZiAoZGVsaW0gPT09ICdLJykge1xuICAgICAgICBibG9ja1RleHQgPSBnbG9iYWxzLmdIdG1sQmxvY2tzW251bV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGdoQmxvY2sgaXMgYSBmYWxzZSBwb3NpdGl2ZVxuICAgICAgICBpZiAoY29kZUZsYWcpIHtcbiAgICAgICAgICAvLyB1c2UgZW5jb2RlZCB2ZXJzaW9uIG9mIGFsbCB0ZXh0XG4gICAgICAgICAgYmxvY2tUZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoZ2xvYmFscy5naENvZGVCbG9ja3NbbnVtXS50ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibG9ja1RleHQgPSBnbG9iYWxzLmdoQ29kZUJsb2Nrc1tudW1dLmNvZGVibG9jaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFwkL2csICckJCQkJyk7IC8vIEVzY2FwZSBhbnkgZG9sbGFyIHNpZ25zXG5cbiAgICAgIGdyYWZzT3V0SXQgPSBncmFmc091dEl0LnJlcGxhY2UoLyhcXG5cXG4pP34oS3xHKVxcZCtcXDIoXFxuXFxuKT8vLCBibG9ja1RleHQpOyAvLyBDaGVjayBpZiBncmFmc091dEl0IGlzIGEgcHJlLT5jb2RlXG5cbiAgICAgIGlmICgvXjxwcmVcXGJbXj5dKj5cXHMqPGNvZGVcXGJbXj5dKj4vLnRlc3QoZ3JhZnNPdXRJdCkpIHtcbiAgICAgICAgY29kZUZsYWcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGdyYWZzT3V0W2ldID0gZ3JhZnNPdXRJdDtcbiAgfVxuXG4gIHRleHQgPSBncmFmc091dC5qb2luKCdcXG5cXG4nKTsgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgbGluZXM6XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3BhcmFncmFwaHMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuLyoqXG4gKiBSdW4gZXh0ZW5zaW9uXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nLCBmdW5jdGlvbiAoZXh0LCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoZXh0LmZpbHRlcikge1xuICAgIHRleHQgPSBleHQuZmlsdGVyKHRleHQsIGdsb2JhbHMuY29udmVydGVyLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChleHQucmVnZXgpIHtcbiAgICAvLyBUT0RPIHJlbW92ZSB0aGlzIHdoZW4gb2xkIGV4dGVuc2lvbiBsb2FkaW5nIG1lY2hhbmlzbSBpcyBkZXByZWNhdGVkXG4gICAgdmFyIHJlID0gZXh0LnJlZ2V4O1xuXG4gICAgaWYgKCFyZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmUgPSBuZXcgUmVnRXhwKHJlLCAnZycpO1xuICAgIH1cblxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmUsIGV4dC5yZXBsYWNlKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IG9jY3VyICp3aXRoaW4qIGJsb2NrLWxldmVsXG4gKiB0YWdzIGxpa2UgcGFyYWdyYXBocywgaGVhZGVycywgYW5kIGxpc3QgaXRlbXMuXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnc3BhbkdhbXV0LmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlU3BhbnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZXNjYXBlU3BlY2lhbENoYXJzV2l0aGluVGFnQXR0cmlidXRlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7IC8vIFByb2Nlc3MgYW5jaG9yIGFuZCBpbWFnZSB0YWdzLiBJbWFnZXMgbXVzdCBjb21lIGZpcnN0LFxuICAvLyBiZWNhdXNlICFbZm9vXVtmXSBsb29rcyBsaWtlIGFuIGFuY2hvci5cblxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdpbWFnZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYW5jaG9ycycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpOyAvLyBNYWtlIGxpbmtzIG91dCBvZiB0aGluZ3MgbGlrZSBgPGh0dHA6Ly9leGFtcGxlLmNvbS8+YFxuICAvLyBNdXN0IGNvbWUgYWZ0ZXIgX0RvQW5jaG9ycygpLCBiZWNhdXNlIHlvdSBjYW4gdXNlIDwgYW5kID5cbiAgLy8gZGVsaW1pdGVycyBpbiBpbmxpbmUgbGlua3MgbGlrZSBbdGhpc10oPHVybD4pLlxuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2F1dG9MaW5rcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVBbXBzQW5kQW5nbGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2l0YWxpY3NBbmRCb2xkJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gRG8gaGFyZCBicmVha3M6XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvICArXFxuL2csICcgPGJyIC8+XFxuJyk7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NwYW5HYW11dC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpa2V0aHJvdWdoJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChvcHRpb25zLnN0cmlrZXRocm91Z2gpIHtcbiAgICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzdHJpa2V0aHJvdWdoLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyg/On5UKXsyfShbXFxzXFxTXSs/KSg/On5UKXsyfS9nLCAnPGRlbD4kMTwvZGVsPicpO1xuICAgIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3N0cmlrZXRocm91Z2guYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG4vKipcbiAqIFN0cmlwIGFueSBsaW5lcyBjb25zaXN0aW5nIG9ubHkgb2Ygc3BhY2VzIGFuZCB0YWJzLlxuICogVGhpcyBtYWtlcyBzdWJzZXF1ZW50IHJlZ2V4cyBlYXNpZXIgdG8gd3JpdGUsIGJlY2F1c2Ugd2UgY2FuXG4gKiBtYXRjaCBjb25zZWN1dGl2ZSBibGFuayBsaW5lcyB3aXRoIC9cXG4rLyBpbnN0ZWFkIG9mIHNvbWV0aGluZ1xuICogY29udG9ydGVkIGxpa2UgL1sgXFx0XSpcXG4rL1xuICovXG5cbnNob3dkb3duLnN1YlBhcnNlcignc3RyaXBCbGFua0xpbmVzJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL15bIFxcdF0rJC9tZywgJycpO1xufSk7XG4vKipcbiAqIFN0cmlwcyBsaW5rIGRlZmluaXRpb25zIGZyb20gdGV4dCwgc3RvcmVzIHRoZSBVUkxzIGFuZCB0aXRsZXMgaW5cbiAqIGhhc2ggcmVmZXJlbmNlcy5cbiAqIExpbmsgZGVmcyBhcmUgaW4gdGhlIGZvcm06IF5baWRdOiB1cmwgXCJvcHRpb25hbCB0aXRsZVwiXG4gKlxuICogXlsgXXswLDN9XFxbKC4rKVxcXTogLy8gaWQgPSAkMSAgYXR0YWNrbGFiOiBnX3RhYl93aWR0aCAtIDFcbiAqIFsgXFx0XSpcbiAqIFxcbj8gICAgICAgICAgICAgICAgICAvLyBtYXliZSAqb25lKiBuZXdsaW5lXG4gKiBbIFxcdF0qXG4gKiA8PyhcXFMrPyk+PyAgICAgICAgICAvLyB1cmwgPSAkMlxuICogWyBcXHRdKlxuICogXFxuPyAgICAgICAgICAgICAgICAvLyBtYXliZSBvbmUgbmV3bGluZVxuICogWyBcXHRdKlxuICogKD86XG4gKiAoXFxuKikgICAgICAgICAgICAgIC8vIGFueSBsaW5lcyBza2lwcGVkID0gJDMgYXR0YWNrbGFiOiBsb29rYmVoaW5kIHJlbW92ZWRcbiAqIFtcIihdXG4gKiAoLis/KSAgICAgICAgICAgICAgLy8gdGl0bGUgPSAkNFxuICogW1wiKV1cbiAqIFsgXFx0XSpcbiAqICk/ICAgICAgICAgICAgICAgICAvLyB0aXRsZSBpcyBvcHRpb25hbFxuICogKD86XFxuK3wkKVxuICogL2dtLFxuICogZnVuY3Rpb24oKXsuLi59KTtcbiAqXG4gKi9cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdzdHJpcExpbmtEZWZpbml0aW9ucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgcmVnZXggPSAvXiB7MCwzfVxcWyguKyldOlsgXFx0XSpcXG4/WyBcXHRdKjw/KFxcUys/KT4/KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKlxcbj9bIFxcdF0qKD86KFxcbiopW1wifCcoXSguKz8pW1wifCcpXVsgXFx0XSopPyg/Olxcbit8KD89fjApKS9nbTsgLy8gYXR0YWNrbGFiOiBzZW50aW5lbCB3b3JrYXJvdW5kcyBmb3IgbGFjayBvZiBcXEEgYW5kIFxcWiwgc2FmYXJpXFxraHRtbCBidWdcblxuICB0ZXh0ICs9ICd+MCc7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBsaW5rSWQsIHVybCwgd2lkdGgsIGhlaWdodCwgYmxhbmtMaW5lcywgdGl0bGUpIHtcbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcbiAgICBnbG9iYWxzLmdVcmxzW2xpbmtJZF0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnKSh1cmwpOyAvLyBMaW5rIElEcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXG4gICAgaWYgKGJsYW5rTGluZXMpIHtcbiAgICAgIC8vIE9vcHMsIGZvdW5kIGJsYW5rIGxpbmVzLCBzbyBpdCdzIG5vdCBhIHRpdGxlLlxuICAgICAgLy8gUHV0IGJhY2sgdGhlIHBhcmVudGhldGljYWwgc3RhdGVtZW50IHdlIHN0b2xlLlxuICAgICAgcmV0dXJuIGJsYW5rTGluZXMgKyB0aXRsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGdsb2JhbHMuZ1RpdGxlc1tsaW5rSWRdID0gdGl0bGUucmVwbGFjZSgvXCJ8Jy9nLCAnJnF1b3Q7Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnBhcnNlSW1nRGltZW5zaW9ucyAmJiB3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgICAgZ2xvYmFscy5nRGltZW5zaW9uc1tsaW5rSWRdID0ge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gLy8gQ29tcGxldGVseSByZW1vdmUgdGhlIGRlZmluaXRpb24gZnJvbSB0aGUgdGV4dFxuXG5cbiAgICByZXR1cm4gJyc7XG4gIH0pOyAvLyBhdHRhY2tsYWI6IHN0cmlwIHNlbnRpbmVsXG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvfjAvLCAnJyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5zaG93ZG93bi5zdWJQYXJzZXIoJ3RhYmxlcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMudGFibGVzKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB2YXIgdGFibGVSZ3ggPSAvXlsgXFx0XXswLDN9XFx8Py4rXFx8LitcXG5bIFxcdF17MCwzfVxcfD9bIFxcdF0qOj9bIFxcdF0qKD86LXw9KXsyLH1bIFxcdF0qOj9bIFxcdF0qXFx8WyBcXHRdKjo/WyBcXHRdKig/Oi18PSl7Mix9W1xcc1xcU10rPyg/Olxcblxcbnx+MCkvZ207XG5cbiAgZnVuY3Rpb24gcGFyc2VTdHlsZXMoc0xpbmUpIHtcbiAgICBpZiAoL146WyBcXHRdKi0tKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246bGVmdDtcIic7XG4gICAgfSBlbHNlIGlmICgvXi0tKlsgXFx0XSo6WyBcXHRdKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCInO1xuICAgIH0gZWxzZSBpZiAoL146WyBcXHRdKi0tKlsgXFx0XSo6JC8udGVzdChzTGluZSkpIHtcbiAgICAgIHJldHVybiAnIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlciwgc3R5bGUpIHtcbiAgICB2YXIgaWQgPSAnJztcbiAgICBoZWFkZXIgPSBoZWFkZXIudHJpbSgpO1xuXG4gICAgaWYgKG9wdGlvbnMudGFibGVIZWFkZXJJZCkge1xuICAgICAgaWQgPSAnIGlkPVwiJyArIGhlYWRlci5yZXBsYWNlKC8gL2csICdfJykudG9Mb3dlckNhc2UoKSArICdcIic7XG4gICAgfVxuXG4gICAgaGVhZGVyID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShoZWFkZXIsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHJldHVybiAnPHRoJyArIGlkICsgc3R5bGUgKyAnPicgKyBoZWFkZXIgKyAnPC90aD5cXG4nO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VDZWxscyhjZWxsLCBzdHlsZSkge1xuICAgIHZhciBzdWJUZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShjZWxsLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICByZXR1cm4gJzx0ZCcgKyBzdHlsZSArICc+JyArIHN1YlRleHQgKyAnPC90ZD5cXG4nO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRUYWJsZShoZWFkZXJzLCBjZWxscykge1xuICAgIHZhciB0YiA9ICc8dGFibGU+XFxuPHRoZWFkPlxcbjx0cj5cXG4nLFxuICAgICAgICB0YmxMZ24gPSBoZWFkZXJzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGJsTGduOyArK2kpIHtcbiAgICAgIHRiICs9IGhlYWRlcnNbaV07XG4gICAgfVxuXG4gICAgdGIgKz0gJzwvdHI+XFxuPC90aGVhZD5cXG48dGJvZHk+XFxuJztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7ICsraSkge1xuICAgICAgdGIgKz0gJzx0cj5cXG4nO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGJsTGduOyArK2lpKSB7XG4gICAgICAgIHRiICs9IGNlbGxzW2ldW2lpXTtcbiAgICAgIH1cblxuICAgICAgdGIgKz0gJzwvdHI+XFxuJztcbiAgICB9XG5cbiAgICB0YiArPSAnPC90Ym9keT5cXG48L3RhYmxlPlxcbic7XG4gICAgcmV0dXJuIHRiO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHRhYmxlUmd4LCBmdW5jdGlvbiAocmF3VGFibGUpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgdGFibGVMaW5lcyA9IHJhd1RhYmxlLnNwbGl0KCdcXG4nKTsgLy8gc3RyaXAgd3JvbmcgZmlyc3QgYW5kIGxhc3QgY29sdW1uIGlmIHdyYXBwZWQgdGFibGVzIGFyZSB1c2VkXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGVMaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKC9eWyBcXHRdezAsM31cXHwvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXlsgXFx0XXswLDN9XFx8LywgJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoL1xcfFsgXFx0XSokLy50ZXN0KHRhYmxlTGluZXNbaV0pKSB7XG4gICAgICAgIHRhYmxlTGluZXNbaV0gPSB0YWJsZUxpbmVzW2ldLnJlcGxhY2UoL1xcfFsgXFx0XSokLywgJycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByYXdIZWFkZXJzID0gdGFibGVMaW5lc1swXS5zcGxpdCgnfCcpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgIH0pLFxuICAgICAgICByYXdTdHlsZXMgPSB0YWJsZUxpbmVzWzFdLnNwbGl0KCd8JykubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy50cmltKCk7XG4gICAgfSksXG4gICAgICAgIHJhd0NlbGxzID0gW10sXG4gICAgICAgIGhlYWRlcnMgPSBbXSxcbiAgICAgICAgc3R5bGVzID0gW10sXG4gICAgICAgIGNlbGxzID0gW107XG4gICAgdGFibGVMaW5lcy5zaGlmdCgpO1xuICAgIHRhYmxlTGluZXMuc2hpZnQoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZUxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGFibGVMaW5lc1tpXS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByYXdDZWxscy5wdXNoKHRhYmxlTGluZXNbaV0uc3BsaXQoJ3wnKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChyYXdIZWFkZXJzLmxlbmd0aCA8IHJhd1N0eWxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByYXdUYWJsZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3U3R5bGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzdHlsZXMucHVzaChwYXJzZVN0eWxlcyhyYXdTdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3SGVhZGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChzdHlsZXNbaV0pKSB7XG4gICAgICAgIHN0eWxlc1tpXSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBoZWFkZXJzLnB1c2gocGFyc2VIZWFkZXJzKHJhd0hlYWRlcnNbaV0sIHN0eWxlc1tpXSkpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCByYXdDZWxscy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaGVhZGVycy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChyYXdDZWxsc1tpXVtpaV0pKSB7fVxuXG4gICAgICAgIHJvdy5wdXNoKHBhcnNlQ2VsbHMocmF3Q2VsbHNbaV1baWldLCBzdHlsZXNbaWldKSk7XG4gICAgICB9XG5cbiAgICAgIGNlbGxzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVpbGRUYWJsZShoZWFkZXJzLCBjZWxscyk7XG4gIH0pO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd0YWJsZXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbi8qKlxuICogU3dhcCBiYWNrIGluIGFsbCB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHdlJ3ZlIGhpZGRlbi5cbiAqL1xuXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3VuZXNjYXBlU3BlY2lhbENoYXJzJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL35FKFxcZCspRS9nLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICB2YXIgY2hhckNvZGVUb1JlcGxhY2UgPSBwYXJzZUludChtMSk7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGVUb1JlcGxhY2UpO1xuICB9KTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcbm1vZHVsZS5leHBvcnRzID0gc2hvd2Rvd247Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///104\n");

/***/ }),

/***/ 105:
/*!***************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/wxParse/html2json.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { /**\n               * html2Json 改造来自: https://github.com/Jxck/html2json\n               * \n               * \n               * author: Di (微信小程序开发工程师)\n               * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n               *               垂直微信小程序开发交流社区\n               * \n               * github地址: https://github.com/icindy/wxParse\n               * \n               * for: 微信小程序富文本解析\n               * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n               */\nvar __placeImgeUrlHttps = \"https\";\nvar __emojisReg = '';\nvar __emojisBaseSrc = '';\nvar __emojis = {};\n\nvar wxDiscode = __webpack_require__(/*! ./wxDiscode.js */ 106);\n\nvar HTMLParser = __webpack_require__(/*! ./htmlparser.js */ 107); // Empty Elements - HTML 5\n\n\nvar empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr\"); // Block Elements - HTML 5\n\nvar block = makeMap(\"br,a,code,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video\"); // Inline Elements - HTML 5\n\nvar inline = makeMap(\"abbr,acronym,applet,b,basefont,bdo,big,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\"); // Elements that you can, intentionally, leave open\n// (and which close themselves)\n\nvar closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\"); // Attributes that have their values filled in disabled=\"disabled\"\n\nvar fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\"); // Special Elements (can contain anything)\n\nvar special = makeMap(\"wxxxcode-style,script,style,view,scroll-view,block\");\n\nfunction makeMap(str) {\n  var obj = {},\n  items = str.split(\",\");\n\n  for (var i = 0; i < items.length; i++) {obj[items[i]] = true;}\n\n  return obj;\n}\n\nfunction q(v) {\n  return '\"' + v + '\"';\n}\n\nfunction removeDOCTYPE(html) {\n  return html.replace(/<\\?xml.*\\?>\\n/, '').replace(/<.*!doctype.*\\>\\n/, '').replace(/<.*!DOCTYPE.*\\>\\n/, '');\n}\n\nfunction html2json(html, bindName) {\n  //处理字符串\n  html = removeDOCTYPE(html);\n  html = wxDiscode.strDiscode(html); //生成node节点\n\n  var bufArray = [];\n  var results = {\n    node: bindName,\n    nodes: [],\n    images: [],\n    imageUrls: [] };\n\n  HTMLParser(html, {\n    start: function start(tag, attrs, unary) {\n      //debug(tag, attrs, unary);\n      // node for this element\n      var node = {\n        node: 'element',\n        tag: tag };\n\n\n      if (block[tag]) {\n        node.tagType = \"block\";\n      } else if (inline[tag]) {\n        node.tagType = \"inline\";\n      } else if (closeSelf[tag]) {\n        node.tagType = \"closeSelf\";\n      }\n\n      if (attrs.length !== 0) {\n        node.attr = attrs.reduce(function (pre, attr) {\n          var name = attr.name;\n          var value = attr.value;\n\n          if (name == 'class') {\n            console.dir(value); //  value = value.join(\"\")\n\n            node.classStr = value;\n          } // has multi attibutes\n          // make it array of attribute\n\n\n          if (name == 'style') {\n            console.dir(value); //  value = value.join(\"\")\n\n            node.styleStr = value;\n          }\n\n          if (value.match(/ /)) {\n            value = value.split(' ');\n          } // if attr already exists\n          // merge it\n\n\n          if (pre[name]) {\n            if (Array.isArray(pre[name])) {\n              // already array, push to last\n              pre[name].push(value);\n            } else {\n              // single value, make it array\n              pre[name] = [pre[name], value];\n            }\n          } else {\n            // not exist, put it\n            pre[name] = value;\n          }\n\n          return pre;\n        }, {});\n      } //对img添加额外数据\n\n\n      if (node.tag === 'img') {\n        node.imgIndex = results.images.length;\n        var imgUrl = node.attr.src;\n        imgUrl = wxDiscode.urlToHttpUrl(imgUrl, __placeImgeUrlHttps);\n        node.attr.src = imgUrl;\n        node.from = bindName;\n        results.images.push(node);\n        results.imageUrls.push(imgUrl);\n      } // 处理font标签样式属性\n\n\n      if (node.tag === 'font') {\n        var fontSize = ['x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', '-webkit-xxx-large'];\n        var styleAttrs = {\n          'color': 'color',\n          'face': 'font-family',\n          'size': 'font-size' };\n\n        if (!node.attr.style) node.attr.style = [];\n        if (!node.styleStr) node.styleStr = '';\n\n        for (var key in styleAttrs) {\n          if (node.attr[key]) {\n            var value = key === 'size' ? fontSize[node.attr[key] - 1] : node.attr[key];\n            node.attr.style.push(styleAttrs[key]);\n            node.attr.style.push(value);\n            node.styleStr += styleAttrs[key] + ': ' + value + ';';\n          }\n        }\n      } //临时记录source资源\n\n\n      if (node.tag === 'source') {\n        results.source = node.attr.src;\n      }\n\n      if (unary) {\n        // if this tag dosen't have end tag\n        // like <img src=\"hoge.png\"/>\n        // add to parents\n        var parent = bufArray[0] || results;\n\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n\n        parent.nodes.push(node);\n      } else {\n        bufArray.unshift(node);\n      }\n    },\n    end: function end(tag) {\n      //debug(tag);\n      // merge into parent tag\n      var node = bufArray.shift();\n      if (node.tag !== tag) console.error(__f__('invalid state: mismatch end tag', \" at wxParse\\\\html2json.js:181\")); //当有缓存source资源时于于video补上src资源\n\n      if (node.tag === 'video' && results.source) {\n        node.attr.src = results.source;\n        delete result.source;\n      }\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n\n        parent.nodes.push(node);\n      }\n    },\n    chars: function chars(text) {\n      //debug(text);\n      var node = {\n        node: 'text',\n        text: text,\n        textArray: transEmojiStr(text) };\n\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n\n        parent.nodes.push(node);\n      }\n    },\n    comment: function comment(text) {//debug(text);\n      // var node = {\n      //     node: 'comment',\n      //     text: text,\n      // };\n      // var parent = bufArray[0];\n      // if (parent.nodes === undefined) {\n      //     parent.nodes = [];\n      // }\n      // parent.nodes.push(node);\n    } });\n\n  return results;\n}\n\n;\n\nfunction transEmojiStr(str) {\n  // var eReg = new RegExp(\"[\"+__reg+' '+\"]\");\n  //   str = str.replace(/\\[([^\\[\\]]+)\\]/g,':$1:')\n  var emojiObjs = []; //如果正则表达式为空\n\n  if (__emojisReg.length == 0 || !__emojis) {\n    var emojiObj = {};\n    emojiObj.node = \"text\";\n    emojiObj.text = str;\n    array = [emojiObj];\n    return array;\n  } //这个地方需要调整\n\n\n  str = str.replace(/\\[([^\\[\\]]+)\\]/g, ':$1:');\n  var eReg = new RegExp(\"[:]\");\n  var array = str.split(eReg);\n\n  for (var i = 0; i < array.length; i++) {\n    var ele = array[i];\n    var emojiObj = {};\n\n    if (__emojis[ele]) {\n      emojiObj.node = \"element\";\n      emojiObj.tag = \"emoji\";\n      emojiObj.text = __emojis[ele];\n      emojiObj.baseSrc = __emojisBaseSrc;\n    } else {\n      emojiObj.node = \"text\";\n      emojiObj.text = ele;\n    }\n\n    emojiObjs.push(emojiObj);\n  }\n\n  return emojiObjs;\n}\n\nfunction emojisInit() {var reg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var baseSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/wxParse/emojis/\";var emojis = arguments.length > 2 ? arguments[2] : undefined;\n  __emojisReg = reg;\n  __emojisBaseSrc = baseSrc;\n  __emojis = emojis;\n}\n\nmodule.exports = {\n  html2json: html2json,\n  emojisInit: emojisInit };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 8)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///105\n");

/***/ }),

/***/ 106:
/*!***************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/wxParse/wxDiscode.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // HTML 支持的数学符号\nfunction strNumDiscode(str) {\n  str = str.replace(/&forall;/g, '∀');\n  str = str.replace(/&part;/g, '∂');\n  str = str.replace(/&exists;/g, '∃');\n  str = str.replace(/&empty;/g, '∅');\n  str = str.replace(/&nabla;/g, '∇');\n  str = str.replace(/&isin;/g, '∈');\n  str = str.replace(/&notin;/g, '∉');\n  str = str.replace(/&ni;/g, '∋');\n  str = str.replace(/&prod;/g, '∏');\n  str = str.replace(/&sum;/g, '∑');\n  str = str.replace(/&minus;/g, '−');\n  str = str.replace(/&lowast;/g, '∗');\n  str = str.replace(/&radic;/g, '√');\n  str = str.replace(/&prop;/g, '∝');\n  str = str.replace(/&infin;/g, '∞');\n  str = str.replace(/&ang;/g, '∠');\n  str = str.replace(/&and;/g, '∧');\n  str = str.replace(/&or;/g, '∨');\n  str = str.replace(/&cap;/g, '∩');\n  str = str.replace(/&cap;/g, '∪');\n  str = str.replace(/&int;/g, '∫');\n  str = str.replace(/&there4;/g, '∴');\n  str = str.replace(/&sim;/g, '∼');\n  str = str.replace(/&cong;/g, '≅');\n  str = str.replace(/&asymp;/g, '≈');\n  str = str.replace(/&ne;/g, '≠');\n  str = str.replace(/&le;/g, '≤');\n  str = str.replace(/&ge;/g, '≥');\n  str = str.replace(/&sub;/g, '⊂');\n  str = str.replace(/&sup;/g, '⊃');\n  str = str.replace(/&nsub;/g, '⊄');\n  str = str.replace(/&sube;/g, '⊆');\n  str = str.replace(/&supe;/g, '⊇');\n  str = str.replace(/&oplus;/g, '⊕');\n  str = str.replace(/&otimes;/g, '⊗');\n  str = str.replace(/&perp;/g, '⊥');\n  str = str.replace(/&sdot;/g, '⋅');\n  return str;\n} //HTML 支持的希腊字母\n\n\nfunction strGreeceDiscode(str) {\n  str = str.replace(/&Alpha;/g, 'Α');\n  str = str.replace(/&Beta;/g, 'Β');\n  str = str.replace(/&Gamma;/g, 'Γ');\n  str = str.replace(/&Delta;/g, 'Δ');\n  str = str.replace(/&Epsilon;/g, 'Ε');\n  str = str.replace(/&Zeta;/g, 'Ζ');\n  str = str.replace(/&Eta;/g, 'Η');\n  str = str.replace(/&Theta;/g, 'Θ');\n  str = str.replace(/&Iota;/g, 'Ι');\n  str = str.replace(/&Kappa;/g, 'Κ');\n  str = str.replace(/&Lambda;/g, 'Λ');\n  str = str.replace(/&Mu;/g, 'Μ');\n  str = str.replace(/&Nu;/g, 'Ν');\n  str = str.replace(/&Xi;/g, 'Ν');\n  str = str.replace(/&Omicron;/g, 'Ο');\n  str = str.replace(/&Pi;/g, 'Π');\n  str = str.replace(/&Rho;/g, 'Ρ');\n  str = str.replace(/&Sigma;/g, 'Σ');\n  str = str.replace(/&Tau;/g, 'Τ');\n  str = str.replace(/&Upsilon;/g, 'Υ');\n  str = str.replace(/&Phi;/g, 'Φ');\n  str = str.replace(/&Chi;/g, 'Χ');\n  str = str.replace(/&Psi;/g, 'Ψ');\n  str = str.replace(/&Omega;/g, 'Ω');\n  str = str.replace(/&alpha;/g, 'α');\n  str = str.replace(/&beta;/g, 'β');\n  str = str.replace(/&gamma;/g, 'γ');\n  str = str.replace(/&delta;/g, 'δ');\n  str = str.replace(/&epsilon;/g, 'ε');\n  str = str.replace(/&zeta;/g, 'ζ');\n  str = str.replace(/&eta;/g, 'η');\n  str = str.replace(/&theta;/g, 'θ');\n  str = str.replace(/&iota;/g, 'ι');\n  str = str.replace(/&kappa;/g, 'κ');\n  str = str.replace(/&lambda;/g, 'λ');\n  str = str.replace(/&mu;/g, 'μ');\n  str = str.replace(/&nu;/g, 'ν');\n  str = str.replace(/&xi;/g, 'ξ');\n  str = str.replace(/&omicron;/g, 'ο');\n  str = str.replace(/&pi;/g, 'π');\n  str = str.replace(/&rho;/g, 'ρ');\n  str = str.replace(/&sigmaf;/g, 'ς');\n  str = str.replace(/&sigma;/g, 'σ');\n  str = str.replace(/&tau;/g, 'τ');\n  str = str.replace(/&upsilon;/g, 'υ');\n  str = str.replace(/&phi;/g, 'φ');\n  str = str.replace(/&chi;/g, 'χ');\n  str = str.replace(/&psi;/g, 'ψ');\n  str = str.replace(/&omega;/g, 'ω');\n  str = str.replace(/&thetasym;/g, 'ϑ');\n  str = str.replace(/&upsih;/g, 'ϒ');\n  str = str.replace(/&piv;/g, 'ϖ');\n  str = str.replace(/&middot;/g, '·');\n  return str;\n} // \n\n\nfunction strcharacterDiscode(str) {\n  // 加入常用解析\n  str = str.replace(/&nbsp;/g, ' ');\n  str = str.replace(/&quot;/g, \"'\");\n  str = str.replace(/&amp;/g, '&'); // str = str.replace(/&lt;/g, '‹');\n  // str = str.replace(/&gt;/g, '›');\n\n  str = str.replace(/&lt;/g, '<');\n  str = str.replace(/&gt;/g, '>');\n  return str;\n} // HTML 支持的其他实体\n\n\nfunction strOtherDiscode(str) {\n  str = str.replace(/&OElig;/g, 'Œ');\n  str = str.replace(/&oelig;/g, 'œ');\n  str = str.replace(/&Scaron;/g, 'Š');\n  str = str.replace(/&scaron;/g, 'š');\n  str = str.replace(/&Yuml;/g, 'Ÿ');\n  str = str.replace(/&fnof;/g, 'ƒ');\n  str = str.replace(/&circ;/g, 'ˆ');\n  str = str.replace(/&tilde;/g, '˜');\n  str = str.replace(/&ensp;/g, '');\n  str = str.replace(/&emsp;/g, '');\n  str = str.replace(/&thinsp;/g, '');\n  str = str.replace(/&zwnj;/g, '');\n  str = str.replace(/&zwj;/g, '');\n  str = str.replace(/&lrm;/g, '');\n  str = str.replace(/&rlm;/g, '');\n  str = str.replace(/&ndash;/g, '–');\n  str = str.replace(/&mdash;/g, '—');\n  str = str.replace(/&lsquo;/g, '‘');\n  str = str.replace(/&rsquo;/g, '’');\n  str = str.replace(/&sbquo;/g, '‚');\n  str = str.replace(/&ldquo;/g, '“');\n  str = str.replace(/&rdquo;/g, '”');\n  str = str.replace(/&bdquo;/g, '„');\n  str = str.replace(/&dagger;/g, '†');\n  str = str.replace(/&Dagger;/g, '‡');\n  str = str.replace(/&bull;/g, '•');\n  str = str.replace(/&hellip;/g, '…');\n  str = str.replace(/&permil;/g, '‰');\n  str = str.replace(/&prime;/g, '′');\n  str = str.replace(/&Prime;/g, '″');\n  str = str.replace(/&lsaquo;/g, '‹');\n  str = str.replace(/&rsaquo;/g, '›');\n  str = str.replace(/&oline;/g, '‾');\n  str = str.replace(/&euro;/g, '€');\n  str = str.replace(/&trade;/g, '™');\n  str = str.replace(/&larr;/g, '←');\n  str = str.replace(/&uarr;/g, '↑');\n  str = str.replace(/&rarr;/g, '→');\n  str = str.replace(/&darr;/g, '↓');\n  str = str.replace(/&harr;/g, '↔');\n  str = str.replace(/&crarr;/g, '↵');\n  str = str.replace(/&lceil;/g, '⌈');\n  str = str.replace(/&rceil;/g, '⌉');\n  str = str.replace(/&lfloor;/g, '⌊');\n  str = str.replace(/&rfloor;/g, '⌋');\n  str = str.replace(/&loz;/g, '◊');\n  str = str.replace(/&spades;/g, '♠');\n  str = str.replace(/&clubs;/g, '♣');\n  str = str.replace(/&hearts;/g, '♥');\n  str = str.replace(/&diams;/g, '♦');\n  return str;\n}\n\nfunction strMoreDiscode(str) {\n  str = str.replace(/\\r\\n/g, \"\");\n  str = str.replace(/\\n/g, \"\");\n  str = str.replace(/code/g, \"wxxxcode-style\");\n  return str;\n}\n\nfunction strDiscode(str) {\n  str = strNumDiscode(str);\n  str = strGreeceDiscode(str);\n  str = strcharacterDiscode(str);\n  str = strOtherDiscode(str);\n  str = strMoreDiscode(str);\n  return str;\n}\n\nfunction urlToHttpUrl(url, rep) {\n  var patt1 = new RegExp(\"^//\");\n  var result = patt1.test(url);\n\n  if (result) {\n    url = rep + \":\" + url;\n  }\n\n  return url;\n}\n\nmodule.exports = {\n  strDiscode: strDiscode,\n  urlToHttpUrl: urlToHttpUrl };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///106\n");

/***/ }),

/***/ 107:
/*!****************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/wxParse/htmlparser.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\n               * \n               * htmlParser改造自: https://github.com/blowsie/Pure-JavaScript-HTML5-Parser\n               * \n               * author: Di (微信小程序开发工程师)\n               * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\n               *               垂直微信小程序开发交流社区\n               * \n               * github地址: https://github.com/icindy/wxParse\n               * \n               * for: 微信小程序富文本解析\n               * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\n               */\n// Regular Expressions for parsing tags and attributes\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,\nendTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/,\nattr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g; // Empty Elements - HTML 5\n\nvar empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr\"); // Block Elements - HTML 5\n\nvar block = makeMap(\"a,address,code,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video\"); // Inline Elements - HTML 5\n\nvar inline = makeMap(\"abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\"); // Elements that you can, intentionally, leave open\n// (and which close themselves)\n\nvar closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\"); // Attributes that have their values filled in disabled=\"disabled\"\n\nvar fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\"); // Special Elements (can contain anything)\n\nvar special = makeMap(\"wxxxcode-style,script,style,view,scroll-view,block\");\n\nfunction HTMLParser(html, handler) {\n  var index,\n  chars,\n  match,\n  stack = [],\n  last = html;\n\n  stack.last = function () {\n    return this[this.length - 1];\n  };\n\n  while (html) {\n    chars = true; // Make sure we're not in a script or style element\n\n    if (!stack.last() || !special[stack.last()]) {\n      // Comment\n      if (html.indexOf(\"<!--\") == 0) {\n        index = html.indexOf(\"-->\");\n\n        if (index >= 0) {\n          if (handler.comment) handler.comment(html.substring(4, index));\n          html = html.substring(index + 3);\n          chars = false;\n        } // end tag\n\n      } else if (html.indexOf(\"</\") == 0) {\n        match = html.match(endTag);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(endTag, parseEndTag);\n          chars = false;\n        } // start tag\n\n      } else if (html.indexOf(\"<\") == 0) {\n        match = html.match(startTag);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(startTag, parseStartTag);\n          chars = false;\n        }\n      }\n\n      if (chars) {\n        index = html.indexOf(\"<\");\n        var text = '';\n\n        while (index === 0) {\n          text += \"<\";\n          html = html.substring(1);\n          index = html.indexOf(\"<\");\n        }\n\n        text += index < 0 ? html : html.substring(0, index);\n        html = index < 0 ? \"\" : html.substring(index);\n        if (handler.chars) handler.chars(text);\n      }\n    } else {\n      html = html.replace(new RegExp(\"([\\\\s\\\\S]*?)<\\/\" + stack.last() + \"[^>]*>\"), function (all, text) {\n        text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, \"$1$2\");\n        if (handler.chars) handler.chars(text);\n        return \"\";\n      });\n      parseEndTag(\"\", stack.last());\n    }\n\n    if (html == last) throw \"Parse Error: \" + html;\n    last = html;\n  } // Clean up any remaining tags\n\n\n  parseEndTag();\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag(\"\", stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() == tagName) {\n      parseEndTag(\"\", tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n    if (!unary) stack.push(tagName);\n\n    if (handler.start) {\n      var attrs = [];\n      rest.replace(attr, function (match, name) {\n        var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : \"\";\n        attrs.push({\n          name: name,\n          value: value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') //\"\n        });\n\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    if (!tagName) var pos = 0; // Find the closest opened tag of the same type\n    else {\n        tagName = tagName.toLowerCase();\n\n        for (var pos = stack.length - 1; pos >= 0; pos--) {if (stack[pos] == tagName) break;}\n      }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {if (handler.end) handler.end(stack[i]);} // Remove the open elements from the stack\n\n\n      stack.length = pos;\n    }\n  }\n}\n\n;\n\nfunction makeMap(str) {\n  var obj = {},\n  items = str.split(\",\");\n\n  for (var i = 0; i < items.length; i++) {obj[items[i]] = true;}\n\n  return obj;\n}\n\nmodule.exports = HTMLParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n");

/***/ }),

/***/ 110:
/*!*************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fsearch%2Fsearch"} ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _search = _interopRequireDefault(__webpack_require__(/*! ./pages/search/search.vue */ 111));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_search.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjExMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3NlYXJjaC9zZWFyY2gudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///110\n");

/***/ }),

/***/ 118:
/*!*********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Flistdetail%2Flistdetail"} ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _listdetail = _interopRequireDefault(__webpack_require__(/*! ./pages/listdetail/listdetail.vue */ 119));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_listdetail.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0RztBQUNBQSxVQUFVLENBQUNDLG1CQUFELENBQVYsQyIsImZpbGUiOiIxMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9saXN0ZGV0YWlsL2xpc3RkZXRhaWwudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///118\n");

/***/ }),

/***/ 126:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FpageUrl%2FpageUrl"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _pageUrl = _interopRequireDefault(__webpack_require__(/*! ./pages/pageUrl/pageUrl.vue */ 127));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_pageUrl.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIxMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9wYWdlVXJsL3BhZ2VVcmwudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///126\n");

/***/ }),

/***/ 134:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FlistdetailTemplate%2FlistdetailTemplate"} ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _listdetailTemplate = _interopRequireDefault(__webpack_require__(/*! ./pages/listdetailTemplate/listdetailTemplate.vue */ 135));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_listdetailTemplate.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxvSTtBQUNBQSxVQUFVLENBQUNDLDJCQUFELENBQVYsQyIsImZpbGUiOiIxMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9saXN0ZGV0YWlsVGVtcGxhdGUvbGlzdGRldGFpbFRlbXBsYXRlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///134\n");

/***/ }),

/***/ 142:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fconfirm%2Fconfirm"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _confirm = _interopRequireDefault(__webpack_require__(/*! ./pages/confirm/confirm.vue */ 143));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_confirm.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIxNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb25maXJtL2NvbmZpcm0udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///142\n");

/***/ }),

/***/ 150:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fconfirm%2FselectCoupons%2FselectCoupons"} ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _selectCoupons = _interopRequireDefault(__webpack_require__(/*! ./pages/confirm/selectCoupons/selectCoupons.vue */ 151));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_selectCoupons.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw2SDtBQUNBQSxVQUFVLENBQUNDLHNCQUFELENBQVYsQyIsImZpbGUiOiIxNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb25maXJtL3NlbGVjdENvdXBvbnMvc2VsZWN0Q291cG9ucy52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///150\n");

/***/ }),

/***/ 158:
/*!*************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fconfirm%2Finvoice%2Finvoice"} ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _invoice = _interopRequireDefault(__webpack_require__(/*! ./pages/confirm/invoice/invoice.vue */ 159));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_invoice.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwyRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIxNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb25maXJtL2ludm9pY2UvaW52b2ljZS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///158\n");

/***/ }),

/***/ 16:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 166:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fconfirm%2FpaymentStatus%2FpaymentStatus"} ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _paymentStatus = _interopRequireDefault(__webpack_require__(/*! ./pages/confirm/paymentStatus/paymentStatus.vue */ 167));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_paymentStatus.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw2SDtBQUNBQSxVQUFVLENBQUNDLHNCQUFELENBQVYsQyIsImZpbGUiOiIxNjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb25maXJtL3BheW1lbnRTdGF0dXMvcGF5bWVudFN0YXR1cy52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///166\n");

/***/ }),

/***/ 174:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fcomment%2Fcomment"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _comment = _interopRequireDefault(__webpack_require__(/*! ./pages/comment/comment.vue */ 175));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_comment.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIxNzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb21tZW50L2NvbW1lbnQudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///174\n");

/***/ }),

/***/ 182:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Factivity%2Factivity"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _activity = _interopRequireDefault(__webpack_require__(/*! ./pages/activity/activity.vue */ 183));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_activity.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIxODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9hY3Rpdml0eS9hY3Rpdml0eS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///182\n");

/***/ }),

/***/ 190:
/*!*************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Faddress-edit%2Faddress-edit"} ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _addressEdit = _interopRequireDefault(__webpack_require__(/*! ./pages/address-edit/address-edit.vue */ 191));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_addressEdit.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxpSDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiIxOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9hZGRyZXNzLWVkaXQvYWRkcmVzcy1lZGl0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///190\n");

/***/ }),

/***/ 198:
/*!*******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FflashSale%2FflashSale"} ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _flashSale = _interopRequireDefault(__webpack_require__(/*! ./pages/flashSale/flashSale.vue */ 199));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_flashSale.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RztBQUNBQSxVQUFVLENBQUNDLGtCQUFELENBQVYsQyIsImZpbGUiOiIxOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9mbGFzaFNhbGUvZmxhc2hTYWxlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///198\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 206:
/*!***********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FprojectPage%2FprojectPage"} ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _projectPage = _interopRequireDefault(__webpack_require__(/*! ./pages/projectPage/projectPage.vue */ 207));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_projectPage.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwrRztBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiIyMDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9wcm9qZWN0UGFnZS9wcm9qZWN0UGFnZS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///206\n");

/***/ }),

/***/ 214:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Faddress%2Faddress"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _address = _interopRequireDefault(__webpack_require__(/*! ./pages/address/address.vue */ 215));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_address.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIyMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9hZGRyZXNzL2FkZHJlc3MudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///214\n");

/***/ }),

/***/ 222:
/*!*********************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Faddress%2FaddressList%2FaddressList"} ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _addressList = _interopRequireDefault(__webpack_require__(/*! ./pages/address/addressList/addressList.vue */ 223));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_addressList.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx1SDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiIyMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9hZGRyZXNzL2FkZHJlc3NMaXN0L2FkZHJlc3NMaXN0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///222\n");

/***/ }),

/***/ 230:
/*!*************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FcouponCenter%2FcouponCenter"} ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _couponCenter = _interopRequireDefault(__webpack_require__(/*! ./pages/couponCenter/couponCenter.vue */ 231));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_couponCenter.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrSDtBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiIyMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jb3Vwb25DZW50ZXIvY291cG9uQ2VudGVyLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///230\n");

/***/ }),

/***/ 238:
/*!*********************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fsign%2Fsign"} ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _sign = _interopRequireDefault(__webpack_require__(/*! ./pages/sign/sign.vue */ 239));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_sign.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwwRjtBQUNBQSxVQUFVLENBQUNDLGFBQUQsQ0FBVixDIiwiZmlsZSI6IjIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3NpZ24vc2lnbi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///238\n");

/***/ }),

/***/ 246:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fproblem%2Fproblem"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _problem = _interopRequireDefault(__webpack_require__(/*! ./pages/problem/problem.vue */ 247));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_problem.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiIyNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9wcm9ibGVtL3Byb2JsZW0udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///246\n");

/***/ }),

/***/ 254:
/*!***************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fproblem%2FfeedBook%2FfeedBook"} ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _feedBook = _interopRequireDefault(__webpack_require__(/*! ./pages/problem/feedBook/feedBook.vue */ 255));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_feedBook.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw4RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIyNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9wcm9ibGVtL2ZlZWRCb29rL2ZlZWRCb29rLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///254\n");

/***/ }),

/***/ 262:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fconfirm%2Fmap%2Fmap"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _map = _interopRequireDefault(__webpack_require__(/*! ./pages/confirm/map/map.vue */ 263));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_map.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwrRjtBQUNBQSxVQUFVLENBQUNDLFlBQUQsQ0FBVixDIiwiZmlsZSI6IjI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL2NvbmZpcm0vbWFwL21hcC52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///262\n");

/***/ }),

/***/ 270:
/*!*************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fcoupon%2Fcoupon"} ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _coupon = _interopRequireDefault(__webpack_require__(/*! ./pages/coupon/coupon.vue */ 271));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_coupon.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjI3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL2NvdXBvbi9jb3Vwb24udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///270\n");

/***/ }),

/***/ 278:
/*!*********************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Faddress%2FaddressEdit%2FaddressEdit"} ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _addressEdit = _interopRequireDefault(__webpack_require__(/*! ./pages/address/addressEdit/addressEdit.vue */ 279));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_addressEdit.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx1SDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiIyNzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9hZGRyZXNzL2FkZHJlc3NFZGl0L2FkZHJlc3NFZGl0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///278\n");

/***/ }),

/***/ 286:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fuser%2Fmoney%2Fmoney"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _money = _interopRequireDefault(__webpack_require__(/*! ./pages/user/money/money.vue */ 287));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_money.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrRztBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3VzZXIvbW9uZXkvbW9uZXkudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///286\n");

/***/ }),

/***/ 29:
/*!**********************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/common.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {var _module$exports;function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} // 商城通用方法\nvar MD5Encode = __webpack_require__(/*! ./MD5Encode.js */ 30);\n\nvar HmacSHA256 = __webpack_require__(/*! ./crypto/hmac-sha256.js */ 31);\n\nvar Base64 = __webpack_require__(/*! ./crypto/enc-base64.js */ 35);\n\nvar logger = __webpack_require__(/*! ./wxlog.js */ 36);\nvar VERSIONS = 'v2.3.5';\nvar userUri = '/user/checkLogin';\n\n//测试\n// var dataBase = {\n//   appId: \"wx196af9f8504bf22d\",\n//   appKey: \"82aa58e2ad2a28793ca2f586716a707d\"\n// }\n// // // 测试服\n// var hostUrl = 'https://api-t.st-llshop.surex.cc/v1';\n// var logisticUrl = 'https://st-ll-shipping.t.surex.cc/v1';\n// var coordinationUrl = 'https://api.rp.surex.cc';\n// var wxEnvVersion = 'develop';\n//切换正式服是还要切换pages/activity/activity 中的url\n//正式\nvar dataBase = {\n  appId: \"wx4b9a7f38ab66c90e\",\n  appKey: \"426a900db06d7410aeccbecd0a1e9d27\"\n\n\n  // 正式服\n};var hostUrl = 'https://wx.shop.haoyousheng.com.cn/v1';\nvar logisticUrl = 'https://api.express.haoyousheng.com.cn/v1';\nvar coordinationUrl = 'https://api.rp.haoyousheng.com.cn';\nvar wxEnvVersion = 'release';\n\nfunction wxEnvVersionFun() {\n  if (wxEnvVersion == 'develop') {\n    return 'develop';\n  } else {\n    return 'release';\n  }\n}\n\nfunction updateManager() {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n/**\r\n   * 对字符串判空\r\n   */\n\n\nfunction isStringEmpty(data) {\n  if (null == data || \"\" == data) {\n    return true;\n  }\n\n  return false;\n}\n/**header-name\r\n   * 跳转外部链接\r\n   */\n\n\nfunction goWebview(Type, pageUrl, share_title) {\n  wx.navigateTo({\n    url: '../pageUrl/pageUrl?pageUrl=' + pageUrl + '&share_title=' + share_title + '&type=' + Type,\n    success: function success(res) {\n      console.log(__f__(\"成功\", \" at utils\\\\common.js:88\"));\n    },\n    fail: function fail(res) {\n      console.log(__f__(\"失败\", \" at utils\\\\common.js:91\"));\n    } });\n\n}\n/**\r\n   * 唤起客服电话\r\n   */\n\n\nfunction phoneCall(phone) {\n  wx.makePhoneCall({\n    phoneNumber: phone,\n    success: function success(res) {\n      console.log(__f__(\"成功\", \" at utils\\\\common.js:104\"));\n    },\n    fail: function fail(res) {\n      console.log(__f__(\"失败\", \" at utils\\\\common.js:107\"));\n    } });\n\n}\n/**\r\n   * 阿里云API网关\r\n   */\n\n\nfunction ApiGateWayTest(uri, data, token, successCallback) {\n  var path = uri;\n  var data = data; // var date = '';\n  // if (getStorageSync('dateDvalue') != '' && getStorageSync('dateDvalue') != 0) {\n  //   date = new Date().getTime() - getStorageSync('dateDvalue');\n  // } else {\n  //   date = new Date().getTime();\n  // }\n  //获取微信最新版本\n\n  updateManager();\n  var signHeaderKeys = ['x-ca-timestamp', 'x-ca-key', 'x-ca-nonce', 'x-ca-stage'].sort();\n  var header = {\n    'accept': 'application/json',\n    'content-type': 'application/x-www-form-urlencoded',\n    'x-application': 'goodBuy',\n    'x-platform': 'wx',\n    'x-useragent': 'host',\n    'x-ver': VERSIONS,\n    'x-ca-timestamp': parseInt(new Date().getTime() / 1000),\n    'x-ca-key': '24814519',\n    'x-ca-nonce': uuid(),\n    'x-ca-stage': 'RELEASE',\n    \"X-PickUp\": 35,\n    'x-ca-systemInfo': getStorageSync('systemInfo'),\n    // 'x-ca-stage': 'TEST',\n    'x-ca-signature-headers': signHeaderKeys.join(',') };\n\n  header['X-Authorization'] = getStorageSync('token');\n  var signedHeadersStr = getSignedHeadersString(signHeaderKeys, header);\n  var parsedUrl = {\n    pathname: path,\n    path: '',\n    query: {} };\n\n  var stringToSign = buildStringToSign(header, signedHeadersStr, parsedUrl, data);\n  header['x-ca-signature'] = sign(stringToSign);\n\n  //提货点header添加\n  var getpickup = getStorageSync('getpickup');\n  console.log(__f__('缓存工厂', getpickup, \" at utils\\\\common.js:156\"));\n  if (getpickup.pickup_id != undefined) {\n    // console.log(1111111111111)\n    // header['X-PickUp'] = getpickup.pickup_id;\n  }\n\n  var city = getStorageSync('city');\n  console.log(__f__('缓存城市', city, \" at utils\\\\common.js:163\"));\n  if (city.warehouse_id != undefined) {\n    header['X-WAREHOUSE'] = city.warehouse_id;\n  }\n\n  var requestLog = {\n    name: 'requestLog',\n    url: path,\n    data: data };\n\n  logger.info(requestLog);\n  wx.request({\n    url: hostUrl + path,\n    data: data,\n    method: 'post',\n    header: header,\n    success: function success(ret) {\n      if (ret.data && ret.data.errorCode == 0) {\n        toast('网络异常');\n        getUserSessionKey();\n        logger.error({\n          name: \"serverError\",\n          url: path,\n          data: ret.data });\n\n      }\n\n      if (typeof successCallback === \"function\") {\n        successCallback(ret);\n        logger.info({\n          name: \"serverLog\",\n          url: path,\n          data: ret.data });\n\n      }\n    },\n    fail: function fail(err) {\n      toast('网络请求超时');\n    },\n    complete: function complete(res) {\n      // 验证token失败，跳转登录页面\n      // 10001  token过期      10002  token验证失败\n      if (res.data && (res.data.error_code == 10002 || res.data.error_code == 10001)) {\n        goRegister();\n      } // if (res.header.Date != undefined) {\n      //   var datevalue = (new Date(res.header.Date)).toDateString() + \" \" + (new Date(res.header.Date)).toTimeString();\n      //   var dateDvalue = new Date().getTime() - new Date(datevalue).getTime();\n      //   if ((dateDvalue > 600000 && res.statusCode == 400) || (dateDvalue < -600000 && res.statusCode == 400)) {\n      //     setStorageSync('dateDvalue', dateDvalue);\n      //     getUserSessionKey();\n      //   } else if ((dateDvalue < 600000 && res.statusCode == 400) || (dateDvalue > -600000 && res.statusCode == 400)) {\n      //     setStorageSync('dateDvalue', 0);\n      //     getUserSessionKey();\n      //   }\n      // } else {\n      //   wx.showModal({\n      //     title: '提示',\n      //     content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'\n      //   })\n      // }\n\n    } });\n\n}\n/**\r\n   * 物流端API\r\n   */\n\n\nfunction ApiLogistics(uri, data, token, successCallback) {\n  var path = uri;\n  var data = data; //获取微信最新版本\n\n  updateManager();\n  var header = {\n    'X-Application': 'goodBuyShop',\n    'X-Platform': 'app',\n    'X-UserAgent': 'host',\n    'X-Ver': 'v1.0' };\n\n\n  if (token == true && token != '') {\n    header['X-Authorization'] = getStorageSync('expressToken');\n  }\n\n  //提货点header添加\n  var pickupId = getStorageSync('getExpressPickupId');\n  if (pickupId != undefined) {\n    // header['X-PickUp'] = pickupId;\n  }\n\n  var requestLog = {\n    name: 'requestLog',\n    url: path,\n    data: data };\n\n  logger.info(requestLog);\n  wx.request({\n    url: logisticUrl + path,\n    data: data,\n    method: 'post',\n    header: header,\n    success: function success(ret) {\n      if (ret.data && ret.data.errorCode == 0) {\n        toast('网络异常');\n        getUserSessionKey();\n        logger.error({\n          name: \"serverError\",\n          url: path,\n          data: ret.data });\n\n      }\n\n      if (typeof successCallback === \"function\") {\n        successCallback(ret.data);\n        logger.info({\n          name: \"serverLog\",\n          url: path,\n          data: ret.data });\n\n      }\n    },\n    fail: function fail(err) {\n      toast('网络请求超时');\n    },\n    complete: function complete(res) {\n      if (res.data && (res.data.error_code == 10002 || res.data.error_code == 10001)) {\n        goRegister();\n      }\n    } });\n\n}\n/**\r\n   * 协同API网关\r\n   */\n\n\nfunction ApiCoordination(uri, data, token, successCallback) {\n  var path = uri;\n  var data = data; //获取微信最新版本\n\n  updateManager();\n  var header = {\n    'accept': 'application/json',\n    'content-type': 'application/x-www-form-urlencoded',\n    'x-application': 'goodBuy',\n    'x-platform': 'wx',\n    'x-useragent': 'host',\n    'x-ver': VERSIONS,\n    'x-ca-timestamp': parseInt(new Date().getTime() / 1000) };\n\n  header['X-Authorization'] = getStorageSync('token'); //提货点header添加\n\n  var getpickup = getStorageSync('getpickup');\n  if (getpickup.pickup_id != undefined) {\n    // header['X-PickUp'] = getpickup.pickup_id;\n  }\n\n  var requestLog = {\n    name: 'requestLog',\n    url: path,\n    data: data };\n\n  logger.info(requestLog);\n  wx.request({\n    url: coordinationUrl + path,\n    data: data,\n    method: 'post',\n    header: header,\n    success: function success(ret) {\n      if (ret.data && ret.data.errorCode == 0) {\n        toast('网络异常');\n        getUserSessionKey();\n        logger.error({\n          name: \"serverError\",\n          url: path,\n          data: ret.data });\n\n      }\n\n      if (typeof successCallback === \"function\") {\n        successCallback(ret);\n        logger.info({\n          name: \"serverLog\",\n          url: path,\n          data: ret.data });\n\n      }\n    },\n    fail: function fail(err) {\n      toast('网络请求超时');\n    },\n    complete: function complete(res) {\n      // 验证token失败，跳转登录页面\n      // 10001  token过期      10002  token验证失败\n      if (res.data && (res.data.error_code == 10002 || res.data.error_code == 10001)) {\n        goRegister();\n      }\n    } });\n\n}\n/**\r\n   * \r\n   * 用户登入，获取token \r\n   */\n\n\nfunction getUserInfo() {\n  wx.checkSession({\n    success: function success(res) {\n      getUserSessionKey();\n    },\n    fail: function fail(err) {\n      goRegister();\n    } });\n\n} //获取用户信息(后端无法直接获取用户信息)\n\n\nfunction onLoginUser() {\n  wx.getUserInfo({\n    withCredentials: true,\n    lang: 'zh_CN',\n    success: function success(res) {},\n    fail: function fail(res) {\n      var content = '拒绝授权将无法体验完整功能，建议打开用户信息授权';\n      var confirmText = '去设置';\n      showModal(content, confirmText, function (res) {\n        if (res.confirm) {\n          wx.openSetting({\n            success: function success(res) {\n              if (res.authSetting[\"scope.userInfo\"] == true) {\n                getUserInfo();\n              }\n            },\n            fail: function fail(res) {} });\n\n        }\n      });\n    } });\n\n}\n\n// token\n// 跳转登录页面小程序端\nfunction goRegister() {\n\n\n\n\n\n}\n\n// 跳转登录页面app端\nfunction goRegister2() {\n\n  /* wx.navigateTo({\r\n                        \turl: '/pages/register2/register2'\r\n                        }); */\n  wx.navigateTo({\n    url: '/pages/register3/register3' });\n\n\n}\n//获取用户token,检测登录\nfunction getUserSessionKey(aldstat) {\n  console.log(__f__('aldstat', aldstat, \" at utils\\\\common.js:429\"));\n  return new Promise(function (resolve, reject) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  });\n}\n\n//获取用户token,检测登录  app\nfunction getUserSessionKey2() {\n  console.log(__f__('app用户登录', \" at utils\\\\common.js:476\"));\n  uni.login({\n    provider: 'weixin',\n    success: function success(loginRes) {\n      console.log(__f__(loginRes, \" at utils\\\\common.js:480\"));\n      // 获取用户信息\n      uni.getUserInfo({\n        provider: 'weixin',\n        success: function success(infoRes) {\n          //缓存用户信息\n          setStorageSync('userInfo2', infoRes.userInfo);\n          console.log(__f__(getStorageSync('userInfo2'), \" at utils\\\\common.js:487\"));\n          uni.switchTab({\n            url: '/pages/user/user' });\n\n        } });\n\n    } });\n\n}\n\nfunction register(callback, userData) {\n  // mobile参数取消\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nfunction checkLogin(e, callback) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n} // 获取用户地理定位 经纬度\n\n\nfunction getLocation() {\n  return new Promise(function (resolve, reject) {\n    // 定时器\n    setTimeout(function () {\n      wx.getLocation({\n        type: 'wgs84',\n\n        //返回可以用于wx.openLocation的经纬度\n        success: function success(res) {\n          var latitude = res.latitude;\n          var longitude = res.longitude;\n          var atitude = [longitude, latitude].join(',');\n          setStorageSync('atitude', atitude);\n          setStorageSync('orAuthSetting', {\n            'scope.userLocation': false });\n\n          setStorageSync('authSetting', {\n            'scope.userLocation': true });\n\n          resolve(atitude);\n        },\n\n        fail: function fail(res) {\n          setStorageSync('orAuthSetting', {\n            'scope.userLocation': true });\n\n          setStorageSync('authSetting', {\n            'scope.userLocation': false });\n\n          hideLoad();\n        } });\n\n\n    }, 100);\n  });\n}\n\n// 获取当前定位自提点\nfunction getpickup(callback) {\n  var uri = '/pickup/getpickupr';\n  return new Promise(function (resolve, reject) {\n    getLocation().then(function (ati) {\n      // var atitude = getStorageSync('atitude');\n      console.log(__f__('atiatiati', ati, \" at utils\\\\common.js:620\"));\n      ApiGateWayTest(uri, {\n        atitude: ati },\n      false, function (res) {\n        console.log(__f__('resresres', res.data.result.cities, \" at utils\\\\common.js:624\"));\n        if (res.data.success == 1) {\n\n          setStorageSync('getpickup', res.data.result.cities);\n          setStorageSync('city', res.data.result.cities);\n          // uni.setStorage({\n          //     key: 'cities',\n          //     data: res.data.result.cities,\n          // });\n          setStorage({\n            key: 'city',\n            data: res.data.result.cities },\n          function () {\n            callback && typeof callback === \"function\" && callback(res.data.result);\n          });\n          getSetting();\n          resolve(res.data.result);\n        } else {\n          hideLoad();\n        }\n      });\n    });\n  });\n} // 获取用户设置\n\n\nfunction getSetting() {\n  // 检查当前设置\n  wx.getSetting({\n    success: function success(res) {\n      var orAuthSetting = getStorageSync('orAuthSetting');\n\n      if (orAuthSetting) {\n        return;\n      } else {\n        setStorageSync('authSetting', res.authSetting);\n      }\n    } });\n\n\n} // \n\n\nfunction sign(stringToSign) {\n  var appSecret = 'a824c303497dfbae3b24fc131c7dfd0c';\n  var sign = HmacSHA256(stringToSign, appSecret);\n  sign = Base64.stringify(sign);\n  return sign;\n}\n\nfunction buildStringToSign(headers, signedHeadersStr, url, data) {\n  // accept, contentMD5, contentType,\n  var lf = '\\n';\n  var list = ['POST', lf];\n  var accept = headers['accept'];\n\n  if (accept) {\n    list.push(accept);\n  }\n\n  list.push(lf);\n  var contentMD5 = headers['content-md5'];\n\n  if (contentMD5) {\n    list.push(contentMD5);\n  }\n\n  list.push(lf);\n  var contentType = headers['content-type'] || '';\n\n  if (contentType) {\n    list.push(contentType);\n  }\n\n  list.push(lf);\n  var date = headers['date'];\n\n  if (date) {\n    list.push(date);\n  }\n\n  list.push(lf);\n\n  if (signedHeadersStr) {\n    list.push(signedHeadersStr);\n    list.push(lf);\n  }\n\n  if (contentType.startsWith('application/x-www-form-urlencoded')) {\n    list.push(buildUrl(url, data));\n  } else {\n    list.push(buildUrl(url));\n  }\n\n  return list.join('');\n}\n\nfunction buildUrl(parsedUrl, data) {\n  var toStringify = Object.assign(parsedUrl.query, data);\n  var result = parsedUrl.pathname;\n\n  if (Object.keys(toStringify).length) {\n    var keys = Object.keys(toStringify).sort();\n    var list = new Array(keys.length);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (toStringify[key] && '' + toStringify[key]) {\n        list[i] = \"\".concat(key, \"=\").concat(toStringify[key]);\n      } else {\n        list[i] = \"\".concat(key);\n      }\n    }\n\n    result += '?' + list.join('&');\n  }\n\n  return result;\n}\n\nfunction getSignedHeadersString(signHeaders, headers) {\n  var list = [];\n\n  for (var i = 0; i < signHeaders.length; i++) {\n    var key = signHeaders[i];\n    list.push(key + ':' + headers[key]);\n  }\n\n  return list.join('\\n');\n}\n\nfunction uuid(len, radix) {\n  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n  var uuid = [],\n  i;\n  radix = radix || chars.length;\n\n  if (len) {\n    // Compact form\n    for (i = 0; i < len; i++) {uuid[i] = chars[0 | Math.random() * radix];}\n  } else {\n    // rfc4122, version 4 form\n    var r; // rfc4122 requires these characters\n\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n    uuid[14] = '4'; // Fill in random data. At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n\n    for (i = 0; i < 36; i++) {\n      if (!uuid[i]) {\n        r = 0 | Math.random() * 16;\n        uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n      }\n    }\n  }\n\n  return uuid.join('');\n}\n/**\r\n   * 将map对象转换为json字符串\r\n   */\n\n\nfunction mapToJson(map) {\n  if (null == map) {\n    return null;\n  }\n\n  var jsonString = \"{\";\n\n  for (var key in map) {\n    jsonString = jsonString + key + \":\" + map[key] + \",\";\n  }\n\n  if (\",\" == jsonString.charAt(jsonString.length - 1)) {\n    jsonString = jsonString.substring(0, jsonString.length - 1);\n  }\n\n  jsonString += \"}\";\n  return jsonString;\n} //文字提示弹层\n\n\nfunction toast(title) {\n  wx.showToast({\n    title: title,\n    icon: 'none',\n    duration: 2000 });\n\n}\n\n//显示loading弹层\nfunction showLoad(that) {\n  // wx.showLoading({\n  //   title: title ? title : '',\n  //   mask: true\n  // });\n  that.setData({\n    loadingShow: true });\n\n}\n\n//隐藏loading弹层\nfunction hideLoad(that) {\n  // wx.hideLoading();\n  that.setData({\n    loadingShow: false });\n\n}\n/**\r\n   * 弹窗提示成功\r\n   */\n\n\nfunction toastSuccess() {\n  wx.showToast({\n    title: '成功',\n    icon: 'success',\n    duration: 2000 });\n\n}\n/**\r\n   * 规范弹窗(无title)\r\n   */\n\n\nfunction showModal(content, confirmText, successCallback) {\n  wx.showModal({\n    title: '',\n    content: content,\n    confirmText: confirmText,\n    confirmColor: '#eb3c39',\n    cancelText: '取消',\n    cancelColor: '#030303',\n    success: successCallback });\n\n}\n/**\r\n   * 单按钮弹窗(无title)\r\n   */\n\n\nfunction showRidoModal(content, confirmText, successCallback) {\n  wx.showModal({\n    title: '',\n    content: content,\n    confirmText: confirmText,\n    confirmColor: '#eb3c39',\n    showCancel: false,\n    cancelColor: '#030303',\n    success: successCallback });\n\n}\n/**\r\n   * 单按钮弹窗(有title)\r\n   */\n\n\nfunction showRidoTitleModal(title, content, confirmText, successCallback) {\n  wx.showModal({\n    title: title,\n    content: content,\n    confirmText: confirmText,\n    confirmColor: '#eb3c39',\n    showCancel: false,\n    cancelColor: '#030303',\n    success: successCallback });\n\n}\n/**\r\n   * 同步设置缓存\r\n   */\n\n\nfunction setStorageSync(key, data) {\n  if (wxEnvVersion == 'develop') {\n    wx.setStorageSync(\"dev\" + key, data);\n  } else {\n    wx.setStorageSync(key, data);\n  }\n\n}\n/**\r\n   * 同步获取缓存\r\n   */\n\n\nfunction getStorageSync(key) {\n  if (wxEnvVersion == 'develop') {\n    return wx.getStorageSync(\"dev\" + key);\n  } else {\n    return wx.getStorageSync(key);\n  }\n}\n/**\r\n   * 异步设置缓存\r\n   */\n\n\nfunction setStorage(keyObjeck, successCallback, failCallback, completeCallback) {\n  if (wxEnvVersion == 'develop') {\n    wx.setStorage({\n      key: \"dev\" + keyObjeck.key,\n      data: keyObjeck.data,\n      success: successCallback,\n      fail: failCallback,\n      complete: completeCallback });\n\n  } else {\n    wx.setStorage({\n      key: keyObjeck.key,\n      data: keyObjeck.data,\n      success: successCallback,\n      fail: failCallback,\n      complete: completeCallback });\n\n  }\n}\n/**\r\n   * 异步获取缓存\r\n   */\n\n\nfunction getStorage(keyObjeck, successCallback, failCallback, completeCallback) {\n  if (wxEnvVersion == 'develop') {\n    wx.getStorage({\n      key: \"dev\" + keyObjeck.key,\n      success: successCallback,\n      fail: failCallback,\n      complete: completeCallback });\n\n  } else {\n    wx.getStorage({\n      key: keyObjeck.key,\n      success: successCallback,\n      fail: failCallback,\n      complete: completeCallback });\n\n  }\n}\n/**\r\n   * 调用微信支付\r\n   */\n\n\nfunction doWechatPay(data, successCallback, failCallback, completeCallback) {\n  var dataMap = {\n    timeStamp: String(data.timeStamp),\n    nonceStr: String(data.nonceStr),\n    package: String(data.package),\n    signType: String(data.signType),\n    paySign: String(data.sign),\n    success: successCallback,\n    fail: failCallback,\n    complete: completeCallback };\n\n  wx.requestPayment(dataMap);\n}\n/**\r\n   * 获取当前时间戳\r\n   */\n\n\nfunction getCurrentTimeStamp() {\n  var timestamp = Date.parse(new Date());\n  return timestamp + \"\";\n}\n/**\r\n   * 获取随机字符串，32位以下\r\n   */\n\n\nfunction getRandomString() {\n  return Math.random().toString(36).substring(3, 8);\n}\n/**\r\n   * MD5加密\r\n   */\n\n\nfunction doMD5Encode(toEncode) {\n  return MD5Encode.hexMD5(toEncode);\n} //判断一个字符串是否存在于一个数组中\n\n\nvar strinarr = function strinarr(str, arr) {\n  for (var i in arr) {\n    if (arr[i] == str) {\n      return true;\n    }\n  }\n\n  return false;\n}; //笛卡尔积 \n\n\nvar Cartesian = function Cartesian(a, b) {\n  var ret = [];\n\n  for (var i = 0; i < a.length; i++) {\n    for (var j = 0; j < b.length; j++) {\n      ret.push([a[i], b[j]]);\n    }\n  }\n\n  return ret;\n}; //多个一起做笛卡尔积\n\n\nvar multiCartesian = function multiCartesian(data) {\n  var len = data.length;\n\n  if (len == 0) {\n    return [];\n  } else if (len == 1) {\n    return data[0];\n  } else {\n    var r = data[0];\n\n    for (var i = 1; i < len; i++) {\n      r = Cartesian(r, data[i]);\n    }\n\n    return r;\n  }\n}; // 保留两位小数\n\n\nvar filters = {\n  toFix: function toFix(value, count) {\n    var num = Number(value);\n    return num.toFixed(count);\n  } // 设置购物车角标\n};\n\n\nfunction setTabBarBadge(that) {\n  var skuAmounturi = '/Cart/getSkuAmount';\n  ApiGateWayTest(skuAmounturi, '', true, function (res) {\n    if (res.statusCode == 200) {\n      if (res.data.result.cart_num > 0) {\n        // wx.setTabBarBadge({\n        //   index: 2,\n        //   text: String(res.data.result.cart_num)\n        // })\n        if (typeof that.getTabBar === 'function' && that.getTabBar()) {\n          that.getTabBar().setData({\n            cartBadge: res.data.result.cart_num });\n\n        }\n      } else {\n        // wx.removeTabBarBadge({\n        //   index: 2\n        // })\n        if (typeof that.getTabBar === 'function' && that.getTabBar()) {\n          that.getTabBar().setData({\n            cartBadge: 0 });\n\n        }\n      }\n    }\n  });\n}\n\nfunction formIdUpdate(e) {\n  if (e.detail.formId != undefined && e.detail.formId != 'undefined') {\n    var formId = e.detail.formId;\n    var formIdUri = '/FormCollect/submitFormId';\n    var formIdData = {\n      form_id: formId };\n\n    ApiGateWayTest(formIdUri, formIdData, true, function (res) {\n      return;\n    });\n  } else {\n    return false;\n  }\n}\n\n// 广告位跳转\nfunction goAdWebView(e) {\n  var item = e.currentTarget.dataset.item;\n  console.log(__f__('item.media_type', item.media_type, \" at utils\\\\common.js:1107\"));\n  formIdUpdate(e);\n  console.log(__f__('item.media_type item.media_type', item.media_type, \" at utils\\\\common.js:1109\"));\n  if (item.media_type == 1) {\n    goWebview('activity', item.ad_link, item.share_title);\n  } else if (item.media_type == 2) {\n    // 商品\n    wx.navigateTo({\n      url: '/pages/product/product?entryType=external&productId=' + item.ad_link });\n\n  } else if (item.media_type == 3) {\n    // 专题\n    if (item.jumpindexmodel && item.jumpindexmodel > 0) {\n      console.log(__f__(0, \" at utils\\\\common.js:1120\"));\n      wx.navigateTo({\n        url: '/pages/index/configureModelPage/configureModelPage?position=' + item.jumpindexmodel });\n\n    } else {\n      console.log(__f__(1, \" at utils\\\\common.js:1125\"));\n      wx.navigateTo({\n        url: '/pages/projectPage/projectPage?entryType=external&type=3&id=' + item.ad_link });\n\n    }\n  } else if (item.media_type == 4) {\n    // 活动页\n    wx.navigateTo({\n      url: '/pages/activity/activity?entryType=external&activity_id=' + item.ad_link + '&ad_id=' + item.ad_id });\n\n  } else if (item.media_type == 5) {\n    // 限时抢购活动\n    wx.navigateTo({\n      url: '/pages/flashSale/flashSale?entryType=external' });\n\n  } else if (item.media_type == 6) {\n    wx.navigateTo({\n      url: item.ad_link });\n\n  } else if (item.media_type == 7) {\n    // 签到页\n    wx.navigateTo({\n      url: '/pages/sign/sign?entryType=external' });\n\n  } else if (item.media_type == 8) {\n    // 领券中心\n    wx.navigateTo({\n      url: '/pages/couponCenter/couponCenter?entryType=external' });\n\n  } else if (item.media_type == 10) {\n    // 通用活动\n    wx.navigateTo({\n      url: '/packageA/select/select?entryType=external&id=' + item.ad_link });\n\n  } else if (item.media_type == 11) {\n    // 砍价商品\n    wx.navigateTo({\n      url: '/packageA/bargain/bargain?entryType=external&activity_bargain_id=' + item.ad_link });\n\n  } else if (item.media_type == 12) {\n    // 闪购商品\n    wx.navigateTo({\n      url: '/packageA/takeout-shop/takeout-shop?entryType=external&shop_id=' + item.ad_link });\n\n  } else if (item.media_type == 13) {\n    if (item.ad_link.search('appId') != -1) {\n      var items = item.ad_link.split(\"#\");\n      var appIdObject = items[0].slice(6);\n      var pathObject = items[1].slice(5);\n      wx.navigateToMiniProgram({\n        appId: appIdObject,\n        path: pathObject });\n\n    } else {\n      toast('亲~好像出问题了呢!');\n      return;\n    }\n  } else if (item.media_type == 14) {\n    // 分享红包\n    wx.navigateTo({\n      url: '/packageB/invitation-share/invitation-share?type=1' });\n\n  } else if (item.media_type == 15) {\n    console.log(__f__(item.media_type, \" at utils\\\\common.js:1188\"));\n    // 商品\n    wx.navigateTo({\n      url: '/packageA/team-product/team-product?entryType=external&teamId=' + item.ad_link });\n\n\n  }\n}\n\n// 微信版本号兼容判断\nfunction compareVersion(s2) {\n  var s1 = wx.getSystemInfoSync().SDKVersion;\n  var v1 = s1.split('.');\n  var v2 = s2.split('.');\n  var len = Math.max(v1.length, v2.length);\n\n  while (v1.length < len) {\n    v1.push('0');\n  }\n\n  while (v2.length < len) {\n    v2.push('0');\n  }\n\n  for (var i = 0; i < len; i++) {\n    var num1 = parseInt(v1[i]);\n    var num2 = parseInt(v2[i]);\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n\nmodule.exports = (_module$exports = {\n  isStringEmpty: isStringEmpty,\n  mapToJson: mapToJson,\n  toast: toast,\n  showLoad: showLoad,\n  hideLoad: hideLoad,\n  toastSuccess: toastSuccess,\n  showModal: showModal,\n  showRidoModal: showRidoModal,\n  showRidoTitleModal: showRidoTitleModal,\n  doWechatPay: doWechatPay,\n  strinarr: strinarr,\n  Cartesian: Cartesian,\n  multiCartesian: multiCartesian,\n  phoneCall: phoneCall,\n  goWebview: goWebview,\n  toFix: filters.toFix,\n  ApiGateWayTest: ApiGateWayTest,\n  ApiLogistics: ApiLogistics,\n  ApiCoordination: ApiCoordination,\n  getUserInfo: getUserInfo,\n  getUserSessionKey: getUserSessionKey,\n  getUserSessionKey2: getUserSessionKey2,\n  getLocation: getLocation,\n  getpickup: getpickup,\n  getSetting: getSetting }, _defineProperty(_module$exports, \"getpickup\",\ngetpickup), _defineProperty(_module$exports, \"setTabBarBadge\",\nsetTabBarBadge), _defineProperty(_module$exports, \"formIdUpdate\",\nformIdUpdate), _defineProperty(_module$exports, \"checkLogin\",\ncheckLogin), _defineProperty(_module$exports, \"register\",\nregister), _defineProperty(_module$exports, \"goRegister\",\ngoRegister), _defineProperty(_module$exports, \"goRegister2\",\ngoRegister2), _defineProperty(_module$exports, \"wxEnvVersionFun\",\nwxEnvVersionFun), _defineProperty(_module$exports, \"setStorageSync\",\nsetStorageSync), _defineProperty(_module$exports, \"setStorage\",\nsetStorage), _defineProperty(_module$exports, \"getStorageSync\",\ngetStorageSync), _defineProperty(_module$exports, \"getStorage\",\ngetStorage), _defineProperty(_module$exports, \"goAdWebView\",\ngoAdWebView), _defineProperty(_module$exports, \"compareVersion\",\ncompareVersion), _module$exports);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 8)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 294:
/*!*********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FcashCoupon%2FcashCoupon"} ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _cashCoupon = _interopRequireDefault(__webpack_require__(/*! ./pages/cashCoupon/cashCoupon.vue */ 295));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_cashCoupon.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0RztBQUNBQSxVQUFVLENBQUNDLG1CQUFELENBQVYsQyIsImZpbGUiOiIyOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9jYXNoQ291cG9uL2Nhc2hDb3Vwb24udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///294\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!*************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/MD5Encode.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*  \n               * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message  \n               * Digest Algorithm, as defined in RFC 1321.  \n               * Version 1.1 Copyright (C) Paul Johnston 1999 - 2002.  \n               * Code also contributed by Greg Holt  \n               * See http://pajhome.org.uk/site/legal.html for details.  \n               */\n\n/*  \n                   * Add integers, wrapping at 2^32. This uses 16-bit operations internally  \n                   * to work around bugs in some JS interpreters.  \n                   */\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n/*  \n   * Bitwise rotate a 32-bit number to the left.  \n   */\n\n\nfunction rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*  \n   * These functions implement the four basic operations the algorithm uses.  \n   */\n\n\nfunction cmn(q, a, b, x, s, t) {\n  return safe_add(rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n}\n\nfunction ff(a, b, c, d, x, s, t) {\n  return cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction gg(a, b, c, d, x, s, t) {\n  return cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction hh(a, b, c, d, x, s, t) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction ii(a, b, c, d, x, s, t) {\n  return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n/*  \n   * Calculate the MD5 of an array of little-endian words, producing an array  \n   * of little-endian words.  \n   */\n\n\nfunction coreMD5(x) {\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = ff(a, b, c, d, x[i + 0], 7, -680876936);\n    d = ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = gg(b, c, d, a, x[i + 0], 20, -373897302);\n    a = gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = hh(d, a, b, c, x[i + 0], 11, -358537222);\n    c = hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = ii(a, b, c, d, x[i + 0], 6, -198630844);\n    d = ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*  \n   * Convert an array of little-endian words to a hex string.  \n   */\n\n\nfunction binl2hex(binarray) {\n  var hex_tab = \"0123456789abcdef\";\n  var str = \"\";\n\n  for (var i = 0; i < binarray.length * 4; i++) {\n    str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n  }\n\n  return str;\n}\n/*  \n   * Convert an array of little-endian words to a base64 encoded string.  \n   */\n\n\nfunction binl2b64(binarray) {\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n\n  for (var i = 0; i < binarray.length * 32; i += 6) {\n    str += tab.charAt(binarray[i >> 5] << i % 32 & 0x3F | binarray[i >> 5 + 1] >> 32 - i % 32 & 0x3F);\n  }\n\n  return str;\n}\n/*  \n   * Convert an 8-bit character string to a sequence of 16-word blocks, stored  \n   * as an array, and append appropriate padding for MD4/5 calculation.  \n   * If any of the characters are >255, the high byte is silently ignored.  \n   */\n\n\nfunction str2binl(str) {\n  var nblk = (str.length + 8 >> 6) + 1; // number of 16-word blocks    \n\n  var blks = new Array(nblk * 16);\n\n  for (var i = 0; i < nblk * 16; i++) {blks[i] = 0;}\n\n  for (var i = 0; i < str.length; i++) {blks[i >> 2] |= (str.charCodeAt(i) & 0xFF) << i % 4 * 8;}\n\n  blks[i >> 2] |= 0x80 << i % 4 * 8;\n  blks[nblk * 16 - 2] = str.length * 8;\n  return blks;\n}\n/*  \n   * Convert a wide-character string to a sequence of 16-word blocks, stored as  \n   * an array, and append appropriate padding for MD4/5 calculation.  \n   */\n\n\nfunction strw2binl(str) {\n  var nblk = (str.length + 4 >> 5) + 1; // number of 16-word blocks    \n\n  var blks = new Array(nblk * 16);\n\n  for (var i = 0; i < nblk * 16; i++) {blks[i] = 0;}\n\n  for (var i = 0; i < str.length; i++) {blks[i >> 1] |= str.charCodeAt(i) << i % 2 * 16;}\n\n  blks[i >> 1] |= 0x80 << i % 2 * 16;\n  blks[nblk * 16 - 2] = str.length * 16;\n  return blks;\n}\n/*  \n   * External interface  \n   */\n\n\nfunction hexMD5(str) {\n  return binl2hex(coreMD5(str2binl(str)));\n}\n\nfunction hexMD5w(str) {\n  return binl2hex(coreMD5(strw2binl(str)));\n}\n\nfunction b64MD5(str) {\n  return binl2b64(coreMD5(str2binl(str)));\n}\n\nfunction b64MD5w(str) {\n  return binl2b64(coreMD5(strw2binl(str)));\n}\n/* Backward compatibility */\n\n\nfunction calcMD5(str) {\n  return binl2hex(coreMD5(str2binl(str)));\n}\n\nmodule.exports = {\n  hexMD5: hexMD5 };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 302:
/*!****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fuser%2Finvitation%2Finvitation"} ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _invitation = _interopRequireDefault(__webpack_require__(/*! ./pages/user/invitation/invitation.vue */ 303));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_invitation.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxpSDtBQUNBQSxVQUFVLENBQUNDLG1CQUFELENBQVYsQyIsImZpbGUiOiIzMDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy91c2VyL2ludml0YXRpb24vaW52aXRhdGlvbi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///302\n");

/***/ }),

/***/ 31:
/*!**********************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/crypto/hmac-sha256.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n\n(function (root, factory, undef) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory(__webpack_require__(/*! ./core */ 32), __webpack_require__(/*! ./sha256 */ 33), __webpack_require__(/*! ./hmac */ 34));\n  } else {}\n})(void 0, function (CryptoJS) {\n  return CryptoJS.HmacSHA256;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvY3J5cHRvL2htYWMtc2hhMjU2LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwidW5kZWYiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsIkNyeXB0b0pTIiwiSG1hY1NIQTI1NiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsQ0FBQyxVQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDL0IsTUFBSSxJQUFKLEVBQWlDO0FBQy9CO0FBQ0FDLFVBQU0sQ0FBQ0MsT0FBUCxHQUFpQkEsT0FBTyxHQUFHSCxPQUFPLENBQUNJLG1CQUFPLENBQUMsZ0JBQUQsQ0FBUixFQUFvQkEsbUJBQU8sQ0FBQyxrQkFBRCxDQUEzQixFQUF5Q0EsbUJBQU8sQ0FBQyxnQkFBRCxDQUFoRCxDQUFsQztBQUNELEdBSEQsTUFHTyxFQU1OO0FBQ0YsQ0FYRCxVQVdTLFVBQVVDLFFBQVYsRUFBb0I7QUFDM0IsU0FBT0EsUUFBUSxDQUFDQyxVQUFoQjtBQUNELENBYkQiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyI7XG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTI1NlwiKSwgcmVxdWlyZShcIi4vaG1hY1wiKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGEyNTZcIiwgXCIuL2htYWNcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEdsb2JhbCAoYnJvd3NlcilcbiAgICBmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcbiAgcmV0dXJuIENyeXB0b0pTLkhtYWNTSEEyNTY7XG59KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 310:
/*!************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fsign%2Fintegral%2Fintegral"} ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _integral = _interopRequireDefault(__webpack_require__(/*! ./pages/sign/integral/integral.vue */ 311));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_integral.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwyRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIzMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9zaWduL2ludGVncmFsL2ludGVncmFsLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///310\n");

/***/ }),

/***/ 318:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fregister%2Fregister"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _register = _interopRequireDefault(__webpack_require__(/*! ./pages/register/register.vue */ 319));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_register.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIzMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9yZWdpc3Rlci9yZWdpc3Rlci52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///318\n");

/***/ }),

/***/ 32:
/*!***************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/crypto/core.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n\n(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory();\n  } else {}\n})(void 0, function () {\n  /**\n                         * CryptoJS core components.\n                         */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n    /*\n                                                          * Local polyfil of Object.create\n                                                          */\n    var create = Object.create || function () {\n      function F() {}\n\n      ;\n      return function (obj) {\n        var subtype;\n        F.prototype = obj;\n        subtype = new F();\n        F.prototype = null;\n        return subtype;\n      };\n    }();\n    /**\n          * CryptoJS namespace.\n          */\n\n\n    var C = {};\n    /**\n                 * Library namespace.\n                 */\n\n    var C_lib = C.lib = {};\n    /**\n                             * Base object for prototypal inheritance.\n                             */\n\n    var Base = C_lib.Base = function () {\n      return {\n        /**\n                * Creates a new object that inherits from this object.\n                *\n                * @param {Object} overrides Properties to copy into the new object.\n                *\n                * @return {Object} The new object.\n                *\n                * @static\n                *\n                * @example\n                *\n                *     var MyType = CryptoJS.lib.Base.extend({\n                *         field: 'value',\n                *\n                *         method: function () {\n                *         }\n                *     });\n                */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this); // Augment\n\n          if (overrides) {\n            subtype.mixIn(overrides);\n          } // Create default initializer\n\n\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          } // Initializer's prototype is the subtype object\n\n\n          subtype.init.prototype = subtype; // Reference supertype\n\n          subtype.$super = this;\n          return subtype;\n        },\n\n        /**\n            * Extends this object and runs the init method.\n            * Arguments to create() will be passed to init().\n            *\n            * @return {Object} The new object.\n            *\n            * @static\n            *\n            * @example\n            *\n            *     var instance = MyType.create();\n            */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n          return instance;\n        },\n\n        /**\n            * Initializes a newly created object.\n            * Override this method to add some logic when your objects are created.\n            *\n            * @example\n            *\n            *     var MyType = CryptoJS.lib.Base.extend({\n            *         init: function () {\n            *             // ...\n            *         }\n            *     });\n            */\n        init: function init() {},\n\n        /**\n                                   * Copies properties into this object.\n                                   *\n                                   * @param {Object} properties The properties to mix in.\n                                   *\n                                   * @example\n                                   *\n                                   *     MyType.mixIn({\n                                   *         field: 'value'\n                                   *     });\n                                   */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          } // IE won't copy toString using the loop above\n\n\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n            * Creates a copy of this object.\n            *\n            * @return {Object} The clone.\n            *\n            * @example\n            *\n            *     var clone = instance.clone();\n            */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        } };\n\n    }();\n    /**\n          * An array of 32-bit words.\n          *\n          * @property {Array} words The array of 32-bit words.\n          * @property {number} sigBytes The number of significant bytes in this word array.\n          */\n\n\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n                                                     * Initializes a newly created word array.\n                                                     *\n                                                     * @param {Array} words (Optional) An array of 32-bit words.\n                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                     *\n                                                     * @example\n                                                     *\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create();\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n                                                     */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n          * Converts this word array to a string.\n          *\n          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n          *\n          * @return {string} The stringified word array.\n          *\n          * @example\n          *\n          *     var string = wordArray + '';\n          *     var string = wordArray.toString();\n          *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n          */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n          * Concatenates a word array to this word array.\n          *\n          * @param {WordArray} wordArray The word array to append.\n          *\n          * @return {WordArray} This word array.\n          *\n          * @example\n          *\n          *     wordArray1.concat(wordArray2);\n          */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n        this.clamp(); // Concat\n\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var i = 0; i < thatSigBytes; i += 4) {\n            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n          }\n        }\n\n        this.sigBytes += thatSigBytes; // Chainable\n\n        return this;\n      },\n\n      /**\n          * Removes insignificant bits.\n          *\n          * @example\n          *\n          *     wordArray.clamp();\n          */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes; // Clamp\n\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = wordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n        return clone;\n      },\n\n      /**\n          * Creates a word array filled with random bytes.\n          *\n          * @param {number} nBytes The number of random bytes to generate.\n          *\n          * @return {WordArray} The random word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.lib.WordArray.random(16);\n          */\n      random: function random(nBytes) {\n        var words = [];\n\n        var r = function r(m_w) {\n          var m_w = m_w;\n          var m_z = 0x3ade68b1;\n          var mask = 0xffffffff;\n          return function () {\n            m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;\n            m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;\n            var result = (m_z << 0x10) + m_w & mask;\n            result /= 0x100000000;\n            result += 0.5;\n            return result * (Math.random() > .5 ? 1 : -1);\n          };\n        };\n\n        for (var i = 0, rcache; i < nBytes; i += 4) {\n          var _r = r((rcache || Math.random()) * 0x100000000);\n\n          rcache = _r() * 0x3ade67b7;\n          words.push(_r() * 0x100000000 | 0);\n        }\n\n        return new WordArray.init(words, nBytes);\n      } });\n\n    /**\n             * Encoder namespace.\n             */\n\n    var C_enc = C.enc = {};\n    /**\n                             * Hex encoding strategy.\n                             */\n\n    var Hex = C_enc.Hex = {\n      /**\n                             * Converts a word array to a hex string.\n                             *\n                             * @param {WordArray} wordArray The word array.\n                             *\n                             * @return {string} The hex string.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n                             */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var hexChars = [];\n\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n          * Converts a hex string to a word array.\n          *\n          * @param {string} hexStr The hex string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n          */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      } };\n\n    /**\n            * Latin1 encoding strategy.\n            */\n\n    var Latin1 = C_enc.Latin1 = {\n      /**\n                                   * Converts a word array to a Latin1 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Latin1 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var latin1Chars = [];\n\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n          * Converts a Latin1 string to a word array.\n          *\n          * @param {string} latin1Str The Latin1 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n          */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      } };\n\n    /**\n            * UTF-8 encoding strategy.\n            */\n\n    var Utf8 = C_enc.Utf8 = {\n      /**\n                               * Converts a word array to a UTF-8 string.\n                               *\n                               * @param {WordArray} wordArray The word array.\n                               *\n                               * @return {string} The UTF-8 string.\n                               *\n                               * @static\n                               *\n                               * @example\n                               *\n                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n                               */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n          * Converts a UTF-8 string to a word array.\n          *\n          * @param {string} utf8Str The UTF-8 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n          */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      } };\n\n    /**\n            * Abstract buffered block algorithm template.\n            *\n            * The property blockSize must be implemented in a concrete subtype.\n            *\n            * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n            */\n\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n                                                                               * Resets this block algorithm's data buffer to its initial state.\n                                                                               *\n                                                                               * @example\n                                                                               *\n                                                                               *     bufferedBlockAlgorithm.reset();\n                                                                               */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n          * Adds new data to this block algorithm's buffer.\n          *\n          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n          *\n          * @example\n          *\n          *     bufferedBlockAlgorithm._append('data');\n          *     bufferedBlockAlgorithm._append(wordArray);\n          */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        } // Append\n\n\n        this._data.concat(data);\n\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n          * Processes available data blocks.\n          *\n          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n          *\n          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n          *\n          * @return {WordArray} The processed data.\n          *\n          * @example\n          *\n          *     var processedData = bufferedBlockAlgorithm._process();\n          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n          */\n      _process: function _process(doFlush) {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4; // Count blocks ready\n\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        } // Count words ready\n\n\n        var nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          } // Remove processed words\n\n\n          var processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        } // Return processed words\n\n\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n          * Creates a copy of this object.\n          *\n          * @return {Object} The clone.\n          *\n          * @example\n          *\n          *     var clone = bufferedBlockAlgorithm.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n        return clone;\n      },\n      _minBufferSize: 0 });\n\n    /**\n                             * Abstract hasher template.\n                             *\n                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n                             */\n\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Initializes a newly created hasher.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n                           *\n                           * @example\n                           *\n                           *     var hasher = CryptoJS.algo.SHA256.create();\n                           */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg); // Set initial values\n\n        this.reset();\n      },\n\n      /**\n          * Resets this hasher to its initial state.\n          *\n          * @example\n          *\n          *     hasher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic\n\n        this._doReset();\n      },\n\n      /**\n          * Updates this hasher with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {Hasher} This hasher.\n          *\n          * @example\n          *\n          *     hasher.update('message');\n          *     hasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate); // Update the hash\n\n\n        this._process(); // Chainable\n\n\n        return this;\n      },\n\n      /**\n          * Finalizes the hash computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The hash.\n          *\n          * @example\n          *\n          *     var hash = hasher.finalize();\n          *     var hash = hasher.finalize('message');\n          *     var hash = hasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        } // Perform concrete-hasher logic\n\n\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n      blockSize: 512 / 32,\n\n      /**\n                            * Creates a shortcut function to a hasher's object interface.\n                            *\n                            * @param {Hasher} hasher The hasher to create a helper for.\n                            *\n                            * @return {Function} The shortcut function.\n                            *\n                            * @static\n                            *\n                            * @example\n                            *\n                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n                            */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n          * Creates a shortcut function to the HMAC's object interface.\n          *\n          * @param {Hasher} hasher The hasher to use in this HMAC helper.\n          *\n          * @return {Function} The shortcut function.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n          */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      } });\n\n    /**\n             * Algorithm namespace.\n             */\n\n    var C_algo = C.algo = {};\n    return C;\n  }(Math);\n\n  return CryptoJS;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 326:
/*!*******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fregister2%2Fregister2"} ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _register = _interopRequireDefault(__webpack_require__(/*! ./pages/register2/register2.vue */ 327));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_register.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx3RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIzMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9yZWdpc3RlcjIvcmVnaXN0ZXIyLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///326\n");

/***/ }),

/***/ 33:
/*!*****************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/crypto/sha256.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n\n(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory(__webpack_require__(/*! ./core */ 32));\n  } else {}\n})(void 0, function (CryptoJS) {\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo; // Initialization and round constants tables\n\n    var H = [];\n    var K = []; // Compute constants\n\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n          nPrime++;\n        }\n\n        n++;\n      }\n    })(); // Reusable object\n\n\n    var W = [];\n    /**\n                 * SHA-256 hash algorithm.\n                 */\n\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words; // Working variables\n\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7]; // Computation\n\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        } // Intermediate hash value\n\n\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8; // Add padding\n\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n        this._process(); // Return final computed hash\n\n\n        return this._hash;\n      },\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n        return clone;\n      } });\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA256('message');\n             *     var hash = CryptoJS.SHA256(wordArray);\n             */\n\n    C.SHA256 = Hasher._createHelper(SHA256);\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA256(message, key);\n                                              */\n\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n  return CryptoJS.SHA256;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 334:
/*!*******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fregister3%2Fregister3"} ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _register = _interopRequireDefault(__webpack_require__(/*! ./pages/register3/register3.vue */ 335));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_register.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx3RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIzMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9yZWdpc3RlcjMvcmVnaXN0ZXIzLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///334\n");

/***/ }),

/***/ 34:
/*!***************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/crypto/hmac.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n\n(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory(__webpack_require__(/*! ./core */ 32));\n  } else {}\n})(void 0, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n    /**\n                          * HMAC algorithm.\n                          */\n\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n                                            * Initializes a newly created HMAC.\n                                            *\n                                            * @param {Hasher} hasher The hash algorithm to use.\n                                            * @param {WordArray|string} key The secret key.\n                                            *\n                                            * @example\n                                            *\n                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n                                            */\n      init: function init(hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already\n\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        } // Shortcuts\n\n\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        } // Clamp excess bits\n\n\n        key.clamp(); // Clone key for inner and outer pads\n\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone(); // Shortcuts\n\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words; // XOR keys with pad constants\n\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n        this.reset();\n      },\n\n      /**\n          * Resets this HMAC to its initial state.\n          *\n          * @example\n          *\n          *     hmacHasher.reset();\n          */\n      reset: function reset() {\n        // Shortcut\n        var hasher = this._hasher; // Reset\n\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\n          * Updates this HMAC with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {HMAC} This HMAC instance.\n          *\n          * @example\n          *\n          *     hmacHasher.update('message');\n          *     hmacHasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        this._hasher.update(messageUpdate); // Chainable\n\n\n        return this;\n      },\n\n      /**\n          * Finalizes the HMAC computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The HMAC.\n          *\n          * @example\n          *\n          *     var hmac = hmacHasher.finalize();\n          *     var hmac = hmacHasher.finalize('message');\n          *     var hmac = hmacHasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher; // Compute HMAC\n\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n        return hmac;\n      } });\n\n  })();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),

/***/ 342:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Frecharge%2Frecharge"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _recharge = _interopRequireDefault(__webpack_require__(/*! ./pages/recharge/recharge.vue */ 343));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_recharge.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiIzNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9yZWNoYXJnZS9yZWNoYXJnZS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///342\n");

/***/ }),

/***/ 35:
/*!*********************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/crypto/enc-base64.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";\n\n(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory(__webpack_require__(/*! ./core */ 32));\n  } else {}\n})(void 0, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n    /**\n                        * Base64 encoding strategy.\n                        */\n\n    var Base64 = C_enc.Base64 = {\n      /**\n                                   * Converts a word array to a Base64 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Base64 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map; // Clamp excess bits\n\n        wordArray.clamp(); // Convert\n\n        var base64Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        } // Add padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64 string to a word array.\n          *\n          * @param {string} base64Str The Base64 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n          */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        } // Ignore padding\n\n\n        var paddingChar = map.charAt(64);\n\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        } // Convert\n\n\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n      },\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n  return CryptoJS.enc.Base64;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 350:
/*!************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Frecharge%2Frecord%2Frecord"} ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _record = _interopRequireDefault(__webpack_require__(/*! ./pages/recharge/record/record.vue */ 351));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_record.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjM1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3JlY2hhcmdlL3JlY29yZC9yZWNvcmQudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///350\n");

/***/ }),

/***/ 358:
/*!*************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2FnewExclusive%2FnewExclusive"} ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _newExclusive = _interopRequireDefault(__webpack_require__(/*! ./pages/newExclusive/newExclusive.vue */ 359));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_newExclusive.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrSDtBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiIzNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9uZXdFeGNsdXNpdmUvbmV3RXhjbHVzaXZlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///358\n");

/***/ }),

/***/ 36:
/*!*********************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/wxlog.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var log = wx.getRealtimeLogManager ? wx.getRealtimeLogManager() : null;\nmodule.exports = {\n  debug: function debug() {\n    if (!log) return;\n    log.debug.apply(log, arguments);\n  },\n\n  info: function info() {\n    if (!log) return;\n    log.info.apply(log, arguments);\n  },\n\n  warn: function warn() {\n    if (!log) return;\n    log.warn.apply(log, arguments);\n  },\n\n  error: function error() {\n    if (!log) return;\n    log.error.apply(log, arguments);\n  },\n\n  setFilterMsg: function setFilterMsg(msg) {\n    // 从基础库2.7.3开始支持\n    if (!log || !log.setFilterMsg) return;\n    if (typeof msg !== 'string') return;\n    log.setFilterMsg(msg);\n  },\n\n  addFilterMsg: function addFilterMsg(msg) {\n    // 从基础库2.8.1开始支持\n    if (!log || !log.addFilterMsg) return;\n    if (typeof msg !== 'string') return;\n    log.addFilterMsg(msg);\n  } };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvd3hsb2cuanMiXSwibmFtZXMiOlsibG9nIiwid3giLCJnZXRSZWFsdGltZUxvZ01hbmFnZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVidWciLCJhcHBseSIsImFyZ3VtZW50cyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJzZXRGaWx0ZXJNc2ciLCJtc2ciLCJhZGRGaWx0ZXJNc2ciXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEdBQUcsR0FBR0MsRUFBRSxDQUFDQyxxQkFBSCxHQUEyQkQsRUFBRSxDQUFDQyxxQkFBSCxFQUEzQixHQUF3RCxJQUFsRTtBQUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsT0FEZSxtQkFDUDtBQUNOLFFBQUksQ0FBQ0wsR0FBTCxFQUFVO0FBQ1ZBLE9BQUcsQ0FBQ0ssS0FBSixDQUFVQyxLQUFWLENBQWdCTixHQUFoQixFQUFxQk8sU0FBckI7QUFDRCxHQUpjOztBQU1mQyxNQU5lLGtCQU1SO0FBQ0wsUUFBSSxDQUFDUixHQUFMLEVBQVU7QUFDVkEsT0FBRyxDQUFDUSxJQUFKLENBQVNGLEtBQVQsQ0FBZU4sR0FBZixFQUFvQk8sU0FBcEI7QUFDRCxHQVRjOztBQVdmRSxNQVhlLGtCQVdSO0FBQ0wsUUFBSSxDQUFDVCxHQUFMLEVBQVU7QUFDVkEsT0FBRyxDQUFDUyxJQUFKLENBQVNILEtBQVQsQ0FBZU4sR0FBZixFQUFvQk8sU0FBcEI7QUFDRCxHQWRjOztBQWdCZkcsT0FoQmUsbUJBZ0JQO0FBQ04sUUFBSSxDQUFDVixHQUFMLEVBQVU7QUFDVkEsT0FBRyxDQUFDVSxLQUFKLENBQVVKLEtBQVYsQ0FBZ0JOLEdBQWhCLEVBQXFCTyxTQUFyQjtBQUNELEdBbkJjOztBQXFCZkksY0FyQmUsd0JBcUJGQyxHQXJCRSxFQXFCRztBQUNoQjtBQUNBLFFBQUksQ0FBQ1osR0FBRCxJQUFRLENBQUNBLEdBQUcsQ0FBQ1csWUFBakIsRUFBK0I7QUFDL0IsUUFBSSxPQUFPQyxHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDN0JaLE9BQUcsQ0FBQ1csWUFBSixDQUFpQkMsR0FBakI7QUFDRCxHQTFCYzs7QUE0QmZDLGNBNUJlLHdCQTRCRkQsR0E1QkUsRUE0Qkc7QUFDaEI7QUFDQSxRQUFJLENBQUNaLEdBQUQsSUFBUSxDQUFDQSxHQUFHLENBQUNhLFlBQWpCLEVBQStCO0FBQy9CLFFBQUksT0FBT0QsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzdCWixPQUFHLENBQUNhLFlBQUosQ0FBaUJELEdBQWpCO0FBQ0QsR0FqQ2MsRUFBakIiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbG9nID0gd3guZ2V0UmVhbHRpbWVMb2dNYW5hZ2VyID8gd3guZ2V0UmVhbHRpbWVMb2dNYW5hZ2VyKCkgOiBudWxsO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlYnVnKCkge1xuICAgIGlmICghbG9nKSByZXR1cm47XG4gICAgbG9nLmRlYnVnLmFwcGx5KGxvZywgYXJndW1lbnRzKTtcbiAgfSxcblxuICBpbmZvKCkge1xuICAgIGlmICghbG9nKSByZXR1cm47XG4gICAgbG9nLmluZm8uYXBwbHkobG9nLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIHdhcm4oKSB7XG4gICAgaWYgKCFsb2cpIHJldHVybjtcbiAgICBsb2cud2Fybi5hcHBseShsb2csIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgZXJyb3IoKSB7XG4gICAgaWYgKCFsb2cpIHJldHVybjtcbiAgICBsb2cuZXJyb3IuYXBwbHkobG9nLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIHNldEZpbHRlck1zZyhtc2cpIHtcbiAgICAvLyDku47ln7rnoYDlupMyLjcuM+W8gOWni+aUr+aMgVxuICAgIGlmICghbG9nIHx8ICFsb2cuc2V0RmlsdGVyTXNnKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSByZXR1cm47XG4gICAgbG9nLnNldEZpbHRlck1zZyhtc2cpO1xuICB9LFxuXG4gIGFkZEZpbHRlck1zZyhtc2cpIHtcbiAgICAvLyDku47ln7rnoYDlupMyLjguMeW8gOWni+aUr+aMgVxuICAgIGlmICghbG9nIHx8ICFsb2cuYWRkRmlsdGVyTXNnKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSByZXR1cm47XG4gICAgbG9nLmFkZEZpbHRlck1zZyhtc2cpO1xuICB9XG5cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 366:
/*!*********************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Findex%2FconfigureModelPage%2FconfigureModelPage"} ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _configureModelPage = _interopRequireDefault(__webpack_require__(/*! ./pages/index/configureModelPage/configureModelPage.vue */ 367));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_configureModelPage.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwwSTtBQUNBQSxVQUFVLENBQUNDLDJCQUFELENBQVYsQyIsImZpbGUiOiIzNjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlcy9pbmRleC9jb25maWd1cmVNb2RlbFBhZ2UvY29uZmlndXJlTW9kZWxQYWdlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///366\n");

/***/ }),

/***/ 374:
/*!*************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fpickup%2Fpickup"} ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _pickup = _interopRequireDefault(__webpack_require__(/*! ./pages/pickup/pickup.vue */ 375));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_pickup.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjM3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3BpY2t1cC9waWNrdXAudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///374\n");

/***/ }),

/***/ 380:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fpickup%2Fcitys%2Fcitys"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _citys = _interopRequireDefault(__webpack_require__(/*! ./pages/pickup/citys/citys.vue */ 381));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_citys.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxvRztBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjM4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3BpY2t1cC9jaXR5cy9jaXR5cy52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///380\n");

/***/ }),

/***/ 386:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fpickup2%2Fpickup2"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _pickup = _interopRequireDefault(__webpack_require__(/*! ./pages/pickup2/pickup2.vue */ 387));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_pickup.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjM4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3BpY2t1cDIvcGlja3VwMi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///386\n");

/***/ }),

/***/ 394:
/*!***********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fpickup2%2Fcitys2%2Fcitys2"} ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _citys = _interopRequireDefault(__webpack_require__(/*! ./pages/pickup2/citys2/citys2.vue */ 395));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_citys.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx1RztBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjM5NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3BpY2t1cDIvY2l0eXMyL2NpdHlzMi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///394\n");

/***/ }),

/***/ 4:
/*!*****************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/pages.json ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 402:
/*!********************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"components%2Fa%2Fa"} ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _a = _interopRequireDefault(__webpack_require__(/*! ./components/a/a.vue */ 403));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_a.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRjtBQUNBQSxVQUFVLENBQUNDLFVBQUQsQ0FBVixDIiwiZmlsZSI6IjQwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvYS9hLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///402\n");

/***/ }),

/***/ 408:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fdingdan"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _dingdan = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/dingdan.vue */ 409));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_dingdan.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI0MDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL2RpbmdkYW4udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///408\n");

/***/ }),

/***/ 416:
/*!****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fshoucang"} ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _shoucang = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/shoucang.vue */ 417));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_shoucang.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxxRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI0MTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL3Nob3VjYW5nLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///416\n");

/***/ }),

/***/ 424:
/*!**************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fdetail"} ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _detail = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/detail.vue */ 425));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_detail.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxpRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjQyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhY2thZ2VBL3VzZXIvZGV0YWlsLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///424\n");

/***/ }),

/***/ 430:
/*!*****************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/qrcode/rpx2px.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = _default;var rate = wx.getSystemInfoSync().windowWidth / 750;\nfunction _default(rpx) {\n  return rate * rpx;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvcXJjb2RlL3JweDJweC5qcyJdLCJuYW1lcyI6WyJyYXRlIiwid3giLCJnZXRTeXN0ZW1JbmZvU3luYyIsIndpbmRvd1dpZHRoIiwicnB4Il0sIm1hcHBpbmdzIjoieUZBQUEsSUFBTUEsSUFBSSxHQUFHQyxFQUFFLENBQUNDLGlCQUFILEdBQXVCQyxXQUF2QixHQUFxQyxHQUFsRDtBQUNlLGtCQUFVQyxHQUFWLEVBQWU7QUFDNUIsU0FBT0osSUFBSSxHQUFHSSxHQUFkO0FBQ0QiLCJmaWxlIjoiNDMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmF0ZSA9IHd4LmdldFN5c3RlbUluZm9TeW5jKCkud2luZG93V2lkdGggLyA3NTA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocnB4KSB7XG4gIHJldHVybiByYXRlICogcnB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///430\n");

/***/ }),

/***/ 431:
/*!***********************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/qrcode/weapp-qrcode.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { //Core code comes from https://github.com/davidshimjs/qrcodejs\nvar QRCode;\n\n(function () {\n  /**\n                   * Get the type by string length\n                   * \n                   * @private\n                   * @param {String} sText\n                   * @param {Number} nCorrectLevel\n                   * @return {Number} type\n                   */\n  function _getTypeNumber(sText, nCorrectLevel) {\n    var nType = 1;\n\n    var length = _getUTF8Length(sText);\n\n    for (var i = 0, len = QRCodeLimitLength.length; i <= len; i++) {\n      var nLimit = 0;\n\n      switch (nCorrectLevel) {\n        case QRErrorCorrectLevel.L:\n          nLimit = QRCodeLimitLength[i][0];\n          break;\n\n        case QRErrorCorrectLevel.M:\n          nLimit = QRCodeLimitLength[i][1];\n          break;\n\n        case QRErrorCorrectLevel.Q:\n          nLimit = QRCodeLimitLength[i][2];\n          break;\n\n        case QRErrorCorrectLevel.H:\n          nLimit = QRCodeLimitLength[i][3];\n          break;}\n\n\n      if (length <= nLimit) {\n        break;\n      } else {\n        nType++;\n      }\n    }\n\n    if (nType > QRCodeLimitLength.length) {\n      throw new Error(\"Too long data\");\n    }\n\n    return nType;\n  }\n\n  function _getUTF8Length(sText) {\n    var replacedText = encodeURI(sText).toString().replace(/\\%[0-9a-fA-F]{2}/g, 'a');\n    return replacedText.length + (replacedText.length != sText ? 3 : 0);\n  }\n\n  function QR8bitByte(data) {\n    this.mode = QRMode.MODE_8BIT_BYTE;\n    this.data = data;\n    this.parsedData = []; // Added to support UTF-8 Characters\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var byteArray = [];\n      var code = this.charCodeAt(i);\n\n      if (code > 0x10000) {\n        byteArray[0] = 0xF0 | (code & 0x1C0000) >>> 18;\n        byteArray[1] = 0x80 | (code & 0x3F000) >>> 12;\n        byteArray[2] = 0x80 | (code & 0xFC0) >>> 6;\n        byteArray[3] = 0x80 | code & 0x3F;\n      } else if (code > 0x800) {\n        byteArray[0] = 0xE0 | (code & 0xF000) >>> 12;\n        byteArray[1] = 0x80 | (code & 0xFC0) >>> 6;\n        byteArray[2] = 0x80 | code & 0x3F;\n      } else if (code > 0x80) {\n        byteArray[0] = 0xC0 | (code & 0x7C0) >>> 6;\n        byteArray[1] = 0x80 | code & 0x3F;\n      } else {\n        byteArray[0] = code;\n      }\n\n      this.parsedData.push(byteArray);\n    }\n\n    this.parsedData = Array.prototype.concat.apply([], this.parsedData);\n\n    if (this.parsedData.length != this.length) {\n      this.parsedData.unshift(191);\n      this.parsedData.unshift(187);\n      this.parsedData.unshift(239);\n    }\n  }\n\n  QR8bitByte.prototype = {\n    getLength: function getLength(buffer) {\n      return this.parsedData.length;\n    },\n    write: function write(buffer) {\n      for (var i = 0, l = this.parsedData.length; i < l; i++) {\n        buffer.put(this.parsedData[i], 8);\n      }\n    } };\n  // QRCodeModel\n\n  function QRCodeModel(typeNumber, errorCorrectLevel) {\n    this.typeNumber = typeNumber;\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null;\n    this.moduleCount = 0;\n    this.dataCache = null;\n    this.dataList = [];\n  }\n\n  QRCodeModel.prototype = {\n    addData: function addData(data) {\n      var newData = new QR8bitByte(data);\n      this.dataList.push(newData);\n      this.dataCache = null;\n    },\n    isDark: function isDark(row, col) {\n      if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n        throw new Error(row + \",\" + col);\n      }\n\n      return this.modules[row][col];\n    },\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n    make: function make() {\n      this.makeImpl(false, this.getBestMaskPattern());\n    },\n    makeImpl: function makeImpl(test, maskPattern) {\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n\n      for (var row = 0; row < this.moduleCount; row++) {\n        this.modules[row] = new Array(this.moduleCount);\n\n        for (var col = 0; col < this.moduleCount; col++) {\n          this.modules[row][col] = null;\n        }\n      }\n\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(test, maskPattern);\n\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(test);\n      }\n\n      if (this.dataCache == null) {\n        this.dataCache = QRCodeModel.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n      }\n\n      this.mapData(this.dataCache, maskPattern);\n    },\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c++) {\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n    getBestMaskPattern: function getBestMaskPattern() {\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(true, i);\n        var lostPoint = QRUtil.getLostPoint(this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    },\n    createMovieClip: function createMovieClip(target_mc, instance_name, depth) {\n      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n      var cs = 1;\n      this.make();\n\n      for (var row = 0; row < this.modules.length; row++) {\n        var y = row * cs;\n\n        for (var col = 0; col < this.modules[row].length; col++) {\n          var x = col * cs;\n          var dark = this.modules[row][col];\n\n          if (dark) {\n            qr_mc.beginFill(0, 100);\n            qr_mc.moveTo(x, y);\n            qr_mc.lineTo(x + cs, y);\n            qr_mc.lineTo(x + cs, y + cs);\n            qr_mc.lineTo(x, y + cs);\n            qr_mc.endFill();\n          }\n        }\n      }\n\n      return qr_mc;\n    },\n    setupTimingPattern: function setupTimingPattern() {\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n\n        this.modules[r][6] = r % 2 == 0;\n      }\n\n      for (var c = 8; c < this.moduleCount - 8; c++) {\n        if (this.modules[6][c] != null) {\n          continue;\n        }\n\n        this.modules[6][c] = c % 2 == 0;\n      }\n    },\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n    setupTypeNumber: function setupTypeNumber(test) {\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n      var data = this.errorCorrectLevel << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      this.modules[this.moduleCount - 8][8] = !test;\n    },\n    mapData: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col--;\n\n        while (true) {\n          for (var c = 0; c < 2; c++) {\n            if (this.modules[row][col - c] == null) {\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    } };\n\n  QRCodeModel.PAD0 = 0xEC;\n  QRCodeModel.PAD1 = 0x11;\n\n  QRCodeModel.createData = function (typeNumber, errorCorrectLevel, dataList) {\n    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n    var buffer = new QRBitBuffer();\n\n    for (var i = 0; i < dataList.length; i++) {\n      var data = dataList[i];\n      buffer.put(data.mode, 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n      data.write(buffer);\n    }\n\n    var totalDataCount = 0;\n\n    for (var i = 0; i < rsBlocks.length; i++) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n    }\n\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    while (true) {\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n\n      buffer.put(QRCodeModel.PAD0, 8);\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n\n      buffer.put(QRCodeModel.PAD1, 8);\n    }\n\n    return QRCodeModel.createBytes(buffer, rsBlocks);\n  };\n\n  QRCodeModel.createBytes = function (buffer, rsBlocks) {\n    var offset = 0;\n    var maxDcCount = 0;\n    var maxEcCount = 0;\n    var dcdata = new Array(rsBlocks.length);\n    var ecdata = new Array(rsBlocks.length);\n\n    for (var r = 0; r < rsBlocks.length; r++) {\n      var dcCount = rsBlocks[r].dataCount;\n      var ecCount = rsBlocks[r].totalCount - dcCount;\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n      dcdata[r] = new Array(dcCount);\n\n      for (var i = 0; i < dcdata[r].length; i++) {\n        dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n      }\n\n      offset += dcCount;\n      var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n      var modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n      for (var i = 0; i < ecdata[r].length; i++) {\n        var modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n      }\n    }\n\n    var totalCodeCount = 0;\n\n    for (var i = 0; i < rsBlocks.length; i++) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n\n    var data = new Array(totalCodeCount);\n    var index = 0;\n\n    for (var i = 0; i < maxDcCount; i++) {\n      for (var r = 0; r < rsBlocks.length; r++) {\n        if (i < dcdata[r].length) {\n          data[index++] = dcdata[r][i];\n        }\n      }\n    }\n\n    for (var i = 0; i < maxEcCount; i++) {\n      for (var r = 0; r < rsBlocks.length; r++) {\n        if (i < ecdata[r].length) {\n          data[index++] = ecdata[r][i];\n        }\n      }\n    }\n\n    return data;\n  };\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3 };\n\n  var QRErrorCorrectLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2 };\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n  var QRUtil = {\n    PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n\n      return data << 12 | d;\n    },\n    getBCHDigit: function getBCHDigit(data) {\n      var digit = 0;\n\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n\n      return digit;\n    },\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    getMask: function getMask(maskPattern, i, j) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new QRPolynomial([1], 0);\n\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n\n      return a;\n    },\n    getLengthInBits: function getLengthInBits(mode, type) {\n      if (1 <= type && type < 10) {\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n\n          case QRMode.MODE_KANJI:\n            return 8;\n\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n      } else if (type < 27) {\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n\n          case QRMode.MODE_KANJI:\n            return 10;\n\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n      } else if (type < 41) {\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n\n          case QRMode.MODE_KANJI:\n            return 12;\n\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n      } else {\n        throw new Error(\"type:\" + type);\n      }\n    },\n    getLostPoint: function getLostPoint(qrCode) {\n      var moduleCount = qrCode.getModuleCount();\n      var lostPoint = 0;\n\n      for (var row = 0; row < moduleCount; row++) {\n        for (var col = 0; col < moduleCount; col++) {\n          var sameCount = 0;\n          var dark = qrCode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r++) {\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c++) {\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrCode.isDark(row + r, col + c)) {\n                sameCount++;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      }\n\n      for (var row = 0; row < moduleCount - 1; row++) {\n        for (var col = 0; col < moduleCount - 1; col++) {\n          var count = 0;\n          if (qrCode.isDark(row, col)) count++;\n          if (qrCode.isDark(row + 1, col)) count++;\n          if (qrCode.isDark(row, col + 1)) count++;\n          if (qrCode.isDark(row + 1, col + 1)) count++;\n\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      for (var row = 0; row < moduleCount; row++) {\n        for (var col = 0; col < moduleCount - 6; col++) {\n          if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col++) {\n        for (var row = 0; row < moduleCount - 6; row++) {\n          if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col++) {\n        for (var row = 0; row < moduleCount; row++) {\n          if (qrCode.isDark(row, col)) {\n            darkCount++;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    } };\n\n  var QRMath = {\n    glog: function glog(n) {\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n\n      return QRMath.LOG_TABLE[n];\n    },\n    gexp: function gexp(n) {\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return QRMath.EXP_TABLE[n];\n    },\n    EXP_TABLE: new Array(256),\n    LOG_TABLE: new Array(256) };\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n  }\n\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n\n  function QRPolynomial(num, shift) {\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n\n    var offset = 0;\n\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n\n    this.num = new Array(num.length - offset + shift);\n\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n\n  QRPolynomial.prototype = {\n    get: function get(index) {\n      return this.num[index];\n    },\n    getLength: function getLength() {\n      return this.num.length;\n    },\n    multiply: function multiply(e) {\n      var num = new Array(this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n\n      return new QRPolynomial(num, 0);\n    },\n    mod: function mod(e) {\n      if (this.getLength() - e.getLength() < 0) {\n        return this;\n      }\n\n      var ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\n      var num = new Array(this.getLength());\n\n      for (var i = 0; i < this.getLength(); i++) {\n        num[i] = this.get(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i++) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n      }\n\n      return new QRPolynomial(num, 0).mod(e);\n    } };\n\n\n  function QRRSBlock(totalCount, dataCount) {\n    this.totalCount = totalCount;\n    this.dataCount = dataCount;\n  }\n\n  QRRSBlock.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\n  QRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n    var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n    if (rsBlock == undefined) {\n      throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n    }\n\n    var length = rsBlock.length / 3;\n    var list = [];\n\n    for (var i = 0; i < length; i++) {\n      var count = rsBlock[i * 3 + 0];\n      var totalCount = rsBlock[i * 3 + 1];\n      var dataCount = rsBlock[i * 3 + 2];\n\n      for (var j = 0; j < count; j++) {\n        list.push(new QRRSBlock(totalCount, dataCount));\n      }\n    }\n\n    return list;\n  };\n\n  QRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n    switch (errorCorrectLevel) {\n      case QRErrorCorrectLevel.L:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n      case QRErrorCorrectLevel.M:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n      case QRErrorCorrectLevel.Q:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n      case QRErrorCorrectLevel.H:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n      default:\n        return undefined;}\n\n  };\n\n  function QRBitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n  }\n\n  QRBitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit((num >>> length - i - 1 & 1) == 1);\n      }\n    },\n    getLengthInBits: function getLengthInBits() {\n      return this.length;\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n\n      this.length++;\n    } };\n\n  var QRCodeLimitLength = [[17, 14, 11, 7], [32, 26, 20, 14], [53, 42, 32, 24], [78, 62, 46, 34], [106, 84, 60, 44], [134, 106, 74, 58], [154, 122, 86, 64], [192, 152, 108, 84], [230, 180, 130, 98], [271, 213, 151, 119], [321, 251, 177, 137], [367, 287, 203, 155], [425, 331, 241, 177], [458, 362, 258, 194], [520, 412, 292, 220], [586, 450, 322, 250], [644, 504, 364, 280], [718, 560, 394, 310], [792, 624, 442, 338], [858, 666, 482, 382], [929, 711, 509, 403], [1003, 779, 565, 439], [1091, 857, 611, 461], [1171, 911, 661, 511], [1273, 997, 715, 535], [1367, 1059, 751, 593], [1465, 1125, 805, 625], [1528, 1190, 868, 658], [1628, 1264, 908, 698], [1732, 1370, 982, 742], [1840, 1452, 1030, 790], [1952, 1538, 1112, 842], [2068, 1628, 1168, 898], [2188, 1722, 1228, 958], [2303, 1809, 1283, 983], [2431, 1911, 1351, 1051], [2563, 1989, 1423, 1093], [2699, 2099, 1499, 1139], [2809, 2213, 1579, 1219], [2953, 2331, 1663, 1273]]; // QRCode object\n\n  QRCode = function QRCode(canvasId, vOption) {\n    this._htOption = {\n      width: 256,\n      height: 256,\n      typeNumber: 4,\n      colorDark: \"#000000\",\n      colorLight: \"#ffffff\",\n      correctLevel: QRErrorCorrectLevel.H };\n\n\n    if (typeof vOption === 'string') {\n      vOption = {\n        text: vOption };\n\n    } // Overwrites options\n\n\n    if (vOption) {\n      for (var i in vOption) {\n        this._htOption[i] = vOption[i];\n      }\n    }\n\n    this._oQRCode = null;\n    this.canvasId = canvasId;\n\n    if (this._htOption.text && this.canvasId) {\n      this.makeCode(this._htOption.text);\n    }\n  };\n\n  QRCode.prototype.makeCode = function (sText, callback) {\n    this._oQRCode = new QRCodeModel(_getTypeNumber(sText, this._htOption.correctLevel), this._htOption.correctLevel);\n\n    this._oQRCode.addData(sText);\n\n    this._oQRCode.make();\n\n    this.makeImage(callback);\n  };\n\n  QRCode.prototype.makeImage = function (callback) {\n    var _oContext;\n\n    if (this._htOption.usingIn) {\n      _oContext = wx.createCanvasContext(this.canvasId, this._htOption.usingIn);\n    } else {\n      _oContext = wx.createCanvasContext(this.canvasId);\n    }\n\n    var _htOption = this._htOption;\n    var oQRCode = this._oQRCode;\n    var nCount = oQRCode.getModuleCount();\n    var nWidth = _htOption.width / nCount;\n    var nHeight = _htOption.height / nCount;\n    var nRoundedWidth = Math.round(nWidth);\n    var nRoundedHeight = Math.round(nHeight);\n\n    if (_htOption.image && _htOption.image != '') {\n      _oContext.drawImage(_htOption.image, 0, 0, _htOption.width, _htOption.height);\n    }\n\n    for (var row = 0; row < nCount; row++) {\n      for (var col = 0; col < nCount; col++) {\n        var bIsDark = oQRCode.isDark(row, col);\n        var nLeft = col * nWidth;\n        var nTop = row * nHeight;\n\n        _oContext.setStrokeStyle(bIsDark ? _htOption.colorDark : _htOption.colorLight); // _oContext.setStrokeStyle('yellow')\n\n\n        _oContext.setLineWidth(1);\n\n        _oContext.setFillStyle(bIsDark ? _htOption.colorDark : _htOption.colorLight); // _oContext.setFillStyle('red')\n        // if (bIsDark) {\n\n\n        _oContext.fillRect(nLeft, nTop, nWidth, nHeight); // }\n        // 안티 앨리어싱 방지 처리\n        // if (bIsDark) {\n\n\n        _oContext.strokeRect(Math.floor(nLeft) + 0.5, Math.floor(nTop) + 0.5, nRoundedWidth, nRoundedHeight);\n\n        _oContext.strokeRect(Math.ceil(nLeft) - 0.5, Math.ceil(nTop) - 0.5, nRoundedWidth, nRoundedHeight); // }\n        // _oContext.fillRect(\n        //     Math.floor(nLeft) + 0.5,\n        //     Math.floor(nTop) + 0.5,\n        //     nRoundedWidth,\n        //     nRoundedHeight\n        // );\n        // _oContext.fillRect(\n        //     Math.ceil(nLeft) - 0.5,\n        //     Math.ceil(nTop) - 0.5,\n        //     nRoundedWidth,\n        //     nRoundedHeight\n        // );\n        // _oContext.clearRect(\n        //     Math.floor(nLeft) + 0.5,\n        //     Math.floor(nTop) + 0.5,\n        //     nRoundedWidth,\n        //     nRoundedHeight\n        // );\n        // _oContext.clearRect(\n        //     Math.ceil(nLeft) - 0.5,\n        //     Math.ceil(nTop) - 0.5,\n        //     nRoundedWidth,\n        //     nRoundedHeight\n        // );\n\n      }\n    }\n\n    _oContext.draw(false, callback);\n  }; // 保存为图片，将临时路径传给回调\n\n\n  QRCode.prototype.exportImage = function (callback) {\n    if (!callback) {\n      return;\n    }\n\n    wx.canvasToTempFilePath({\n      x: 0,\n      y: 0,\n      width: this._htOption.width,\n      height: this._htOption.height,\n      destWidth: this._htOption.width,\n      destHeight: this._htOption.height,\n      canvasId: this.canvasId,\n      success: function success(res) {\n        callback(res.tempFilePath);\n      },\n      fail: function fail(res) {\n        console.log(__f__(res, \" at utils\\\\qrcode\\\\weapp-qrcode.js:996\"));\n      } });\n\n  };\n\n  QRCode.CorrectLevel = QRErrorCorrectLevel;\n})();\n\nmodule.exports = QRCode;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 8)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///431\n");

/***/ }),

/***/ 434:
/*!**************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fapplication-return"} ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _applicationReturn = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/application-return.vue */ 435));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_applicationReturn.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx3SDtBQUNBQSxVQUFVLENBQUNDLDBCQUFELENBQVYsQyIsImZpbGUiOiI0MzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL2FwcGxpY2F0aW9uLXJldHVybi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///434\n");

/***/ }),

/***/ 442:
/*!***************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Forder-return-detail"} ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderReturnDetail = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/order-return-detail.vue */ 443));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderReturnDetail.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5SDtBQUNBQSxVQUFVLENBQUNDLDBCQUFELENBQVYsQyIsImZpbGUiOiI0NDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL29yZGVyLXJldHVybi1kZXRhaWwudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///442\n");

/***/ }),

/***/ 450:
/*!****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Faftermarket-schedule"} ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _aftermarketSchedule = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/aftermarket-schedule.vue */ 451));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_aftermarketSchedule.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0SDtBQUNBQSxVQUFVLENBQUNDLDRCQUFELENBQVYsQyIsImZpbGUiOiI0NTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL2FmdGVybWFya2V0LXNjaGVkdWxlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///450\n");

/***/ }),

/***/ 458:
/*!***********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fmy-order-return"} ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _myOrderReturn = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/my-order-return.vue */ 459));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_myOrderReturn.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxpSDtBQUNBQSxVQUFVLENBQUNDLHNCQUFELENBQVYsQyIsImZpbGUiOiI0NTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL215LW9yZGVyLXJldHVybi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///458\n");

/***/ }),

/***/ 466:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2FreturnSQA"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _returnSQA = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/returnSQA.vue */ 467));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_returnSQA.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx1RztBQUNBQSxVQUFVLENBQUNDLGtCQUFELENBQVYsQyIsImZpbGUiOiI0NjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL3JldHVyblNRQS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///466\n");

/***/ }),

/***/ 474:
/*!*********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Forder-express"} ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderExpress = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/order-express.vue */ 475));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderExpress.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw4RztBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiI0NzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL29yZGVyLWV4cHJlc3MudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///474\n");

/***/ }),

/***/ 482:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Forder-review"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderReview = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/order-review.vue */ 483));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderReview.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0RztBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI0ODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL29yZGVyLXJldmlldy52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///482\n");

/***/ }),

/***/ 490:
/*!************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fuser%2Fadd-order-review"} ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _addOrderReview = _interopRequireDefault(__webpack_require__(/*! ./packageA/user/add-order-review.vue */ 491));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_addOrderReview.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtSDtBQUNBQSxVQUFVLENBQUNDLHVCQUFELENBQVYsQyIsImZpbGUiOiI0OTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS91c2VyL2FkZC1vcmRlci1yZXZpZXcudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///490\n");

/***/ }),

/***/ 498:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Findex"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _index = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/index.vue */ 499));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_index.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxvRztBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjQ5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhY2thZ2VBL2xvZ2lzdGljcy9pbmRleC52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///498\n");

/***/ }),

/***/ 506:
/*!*********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Fdelivery"} ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _delivery = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/delivery.vue */ 507));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_delivery.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwwRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI1MDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3MvZGVsaXZlcnkudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///506\n");

/***/ }),

/***/ 514:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Farrival"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _arrival = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/arrival.vue */ 515));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_arrival.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx3RztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI1MTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3MvYXJyaXZhbC52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///514\n");

/***/ }),

/***/ 522:
/*!*************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2FarrivalOrder"} ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _arrivalOrder = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/arrivalOrder.vue */ 523));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_arrivalOrder.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrSDtBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiI1MjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3MvYXJyaXZhbE9yZGVyLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///522\n");

/***/ }),

/***/ 530:
/*!************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Forderdetile"} ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderdetile = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/orderdetile.vue */ 531));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderdetile.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnSDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI1MzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3Mvb3JkZXJkZXRpbGUudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///530\n");

/***/ }),

/***/ 538:
/*!***********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Fnodelivery"} ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _nodelivery = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/nodelivery.vue */ 539));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_nodelivery.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw4RztBQUNBQSxVQUFVLENBQUNDLG1CQUFELENBQVYsQyIsImZpbGUiOiI1MzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3Mvbm9kZWxpdmVyeS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///538\n");

/***/ }),

/***/ 546:
/*!****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fselect%2Fselect"} ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./packageA/select/select.vue */ 547));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_select.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjU0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhY2thZ2VBL3NlbGVjdC9zZWxlY3QudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///546\n");

/***/ }),

/***/ 554:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fgroupbuy%2Fgroupbuy"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _groupbuy = _interopRequireDefault(__webpack_require__(/*! ./packageA/groupbuy/groupbuy.vue */ 555));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_groupbuy.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI1NTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9ncm91cGJ1eS9ncm91cGJ1eS52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///554\n");

/***/ }),

/***/ 562:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fbargain%2Fbargain"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _bargain = _interopRequireDefault(__webpack_require__(/*! ./packageA/bargain/bargain.vue */ 563));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_bargain.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI1NjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9iYXJnYWluL2JhcmdhaW4udnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///562\n");

/***/ }),

/***/ 570:
/*!**********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fmybargain%2Fmybargain"} ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _mybargain = _interopRequireDefault(__webpack_require__(/*! ./packageA/mybargain/mybargain.vue */ 571));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_mybargain.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0RztBQUNBQSxVQUFVLENBQUNDLGtCQUFELENBQVYsQyIsImZpbGUiOiI1NzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9teWJhcmdhaW4vbXliYXJnYWluLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///570\n");

/***/ }),

/***/ 578:
/*!****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fbargainshare%2Fbargainshare"} ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _bargainshare = _interopRequireDefault(__webpack_require__(/*! ./packageA/bargainshare/bargainshare.vue */ 579));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_bargainshare.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxxSDtBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiI1NzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9iYXJnYWluc2hhcmUvYmFyZ2FpbnNoYXJlLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///578\n");

/***/ }),

/***/ 586:
/*!****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-shop%2Ftakeout-shop"} ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _takeoutShop = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-shop/takeout-shop.vue */ 587));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_takeoutShop.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxvSDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI1ODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LXNob3AvdGFrZW91dC1zaG9wLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///586\n");

/***/ }),

/***/ 594:
/*!******************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-order%2Ftakeout-order"} ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _takeoutOrder = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-order/takeout-order.vue */ 595));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_takeoutOrder.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx1SDtBQUNBQSxVQUFVLENBQUNDLHFCQUFELENBQVYsQyIsImZpbGUiOiI1OTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LW9yZGVyL3Rha2VvdXQtb3JkZXIudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///594\n");

/***/ }),

/***/ 60:
/*!*********************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/event.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var events = {};\n\nfunction on(name, self, callback) {\n  var tuple = [self, callback];\n  var callbacks = events[name];\n\n  if (Array.isArray(callbacks)) {\n    callbacks.push(tuple);\n  } else {\n    events[name] = [tuple];\n  }\n}\n\nfunction remove(name, self) {\n  var callbacks = events[name];\n\n  if (Array.isArray(callbacks)) {\n    events[name] = callbacks.filter(function (tuple) {\n      return tuple[0] != self;\n    });\n  }\n}\n\nfunction emit(name, data) {\n  var callbacks = events[name];\n\n  if (Array.isArray(callbacks)) {\n    callbacks.map(function (tuple) {\n      var self = tuple[0];\n      var callback = tuple[1];\n      callback.call(self, data);\n    });\n  }\n}\n\nexports.on = on;\nexports.remove = remove;\nexports.emit = emit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvZXZlbnQuanMiXSwibmFtZXMiOlsiZXZlbnRzIiwib24iLCJuYW1lIiwic2VsZiIsImNhbGxiYWNrIiwidHVwbGUiLCJjYWxsYmFja3MiLCJBcnJheSIsImlzQXJyYXkiLCJwdXNoIiwicmVtb3ZlIiwiZmlsdGVyIiwiZW1pdCIsImRhdGEiLCJtYXAiLCJjYWxsIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTSxHQUFHLEVBQWI7O0FBRUEsU0FBU0MsRUFBVCxDQUFZQyxJQUFaLEVBQWtCQyxJQUFsQixFQUF3QkMsUUFBeEIsRUFBa0M7QUFDaEMsTUFBSUMsS0FBSyxHQUFHLENBQUNGLElBQUQsRUFBT0MsUUFBUCxDQUFaO0FBQ0EsTUFBSUUsU0FBUyxHQUFHTixNQUFNLENBQUNFLElBQUQsQ0FBdEI7O0FBRUEsTUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWNGLFNBQWQsQ0FBSixFQUE4QjtBQUM1QkEsYUFBUyxDQUFDRyxJQUFWLENBQWVKLEtBQWY7QUFDRCxHQUZELE1BRU87QUFDTEwsVUFBTSxDQUFDRSxJQUFELENBQU4sR0FBZSxDQUFDRyxLQUFELENBQWY7QUFDRDtBQUNGOztBQUVELFNBQVNLLE1BQVQsQ0FBZ0JSLElBQWhCLEVBQXNCQyxJQUF0QixFQUE0QjtBQUMxQixNQUFJRyxTQUFTLEdBQUdOLE1BQU0sQ0FBQ0UsSUFBRCxDQUF0Qjs7QUFFQSxNQUFJSyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsU0FBZCxDQUFKLEVBQThCO0FBQzVCTixVQUFNLENBQUNFLElBQUQsQ0FBTixHQUFlSSxTQUFTLENBQUNLLE1BQVYsQ0FBaUIsVUFBQU4sS0FBSyxFQUFJO0FBQ3ZDLGFBQU9BLEtBQUssQ0FBQyxDQUFELENBQUwsSUFBWUYsSUFBbkI7QUFDRCxLQUZjLENBQWY7QUFHRDtBQUNGOztBQUVELFNBQVNTLElBQVQsQ0FBY1YsSUFBZCxFQUFvQlcsSUFBcEIsRUFBMEI7QUFDeEIsTUFBSVAsU0FBUyxHQUFHTixNQUFNLENBQUNFLElBQUQsQ0FBdEI7O0FBRUEsTUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWNGLFNBQWQsQ0FBSixFQUE4QjtBQUM1QkEsYUFBUyxDQUFDUSxHQUFWLENBQWMsVUFBQVQsS0FBSyxFQUFJO0FBQ3JCLFVBQUlGLElBQUksR0FBR0UsS0FBSyxDQUFDLENBQUQsQ0FBaEI7QUFDQSxVQUFJRCxRQUFRLEdBQUdDLEtBQUssQ0FBQyxDQUFELENBQXBCO0FBQ0FELGNBQVEsQ0FBQ1csSUFBVCxDQUFjWixJQUFkLEVBQW9CVSxJQUFwQjtBQUNELEtBSkQ7QUFLRDtBQUNGOztBQUVERyxPQUFPLENBQUNmLEVBQVIsR0FBYUEsRUFBYjtBQUNBZSxPQUFPLENBQUNOLE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0FNLE9BQU8sQ0FBQ0osSUFBUixHQUFlQSxJQUFmIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGV2ZW50cyA9IHt9O1xuXG5mdW5jdGlvbiBvbihuYW1lLCBzZWxmLCBjYWxsYmFjaykge1xuICB2YXIgdHVwbGUgPSBbc2VsZiwgY2FsbGJhY2tdO1xuICB2YXIgY2FsbGJhY2tzID0gZXZlbnRzW25hbWVdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNhbGxiYWNrcykpIHtcbiAgICBjYWxsYmFja3MucHVzaCh0dXBsZSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW25hbWVdID0gW3R1cGxlXTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUobmFtZSwgc2VsZikge1xuICB2YXIgY2FsbGJhY2tzID0gZXZlbnRzW25hbWVdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNhbGxiYWNrcykpIHtcbiAgICBldmVudHNbbmFtZV0gPSBjYWxsYmFja3MuZmlsdGVyKHR1cGxlID0+IHtcbiAgICAgIHJldHVybiB0dXBsZVswXSAhPSBzZWxmO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXQobmFtZSwgZGF0YSkge1xuICB2YXIgY2FsbGJhY2tzID0gZXZlbnRzW25hbWVdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNhbGxiYWNrcykpIHtcbiAgICBjYWxsYmFja3MubWFwKHR1cGxlID0+IHtcbiAgICAgIHZhciBzZWxmID0gdHVwbGVbMF07XG4gICAgICB2YXIgY2FsbGJhY2sgPSB0dXBsZVsxXTtcbiAgICAgIGNhbGxiYWNrLmNhbGwoc2VsZiwgZGF0YSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0cy5vbiA9IG9uO1xuZXhwb3J0cy5yZW1vdmUgPSByZW1vdmU7XG5leHBvcnRzLmVtaXQgPSBlbWl0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ }),

/***/ 602:
/*!************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-order%2Fcheck-takeout-order"} ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _checkTakeoutOrder = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-order/check-takeout-order.vue */ 603));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_checkTakeoutOrder.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrSTtBQUNBQSxVQUFVLENBQUNDLDBCQUFELENBQVYsQyIsImZpbGUiOiI2MDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LW9yZGVyL2NoZWNrLXRha2VvdXQtb3JkZXIudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///602\n");

/***/ }),

/***/ 61:
/*!**************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/wxTrack/track-stat.min.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function e(e, t, o) {\n  if (e[t]) {\n    var n = e[t];\n\n    e[t] = function (e) {\n      n.call(this, e), o.call(this, e, t);\n    };\n  } else e[t] = function (e) {\n    o.call(this, e, t);\n  };\n}\n\nfunction t(e) {\n  this[a.para.name] = a;\n  var t = {};\n  e && e.path && (t.$urlPath = e.path), t.$isFirstTime = !!_, e.scene = e.scene || \"未取到值\", t.$scene = o.getMPScene(e.scene),\n  a._registerParams({\n    $latestScene: t.$scene }),\n  a.para.autoTrack && a.para.autoTrack.appLaunch && a.autoTrackCustom(\"appLaunch\", t, \"$WXMPLaunch\");\n}\n\nfunction r(e) {\n  var t = {};\n  v = new Date().getTime(), e && e.path && (t.$urlPath = e.path), e.scene = e.scene || \"未取到值\", t.$scene = o.getMPScene(e.\n  scene), a._registerParams({\n    $latestScene: t.$scene }),\n  a.para.autoTrack && a.para.autoTrack.appShow && a.autoTrackCustom(\"appShow\", t, \"$WXMPShow\");\n}\n\nfunction n() {\n  var e = new Date().getTime(),\n  t = {};\n  t.$urlPath = o.getCurrentPath(), v && e - v > 0 && (e - v) / 36e5 < 24 && (t.eventDuration = (e - v) / 1e3), a.para.autoTrack &&\n  a.para.autoTrack.appHide && a.autoTrackCustom(\"appHide\", t, \"$WXMPHide\");\n}\n\nvar i = new RegExp(\"^[$]+\"),\no = {},\na = {},\ns = __webpack_require__(/*! ./config.js */ 62),\nwl = __webpack_require__(/*! ../wxlog.js */ 36);\n\na.para = s;\n\nvar c = Array.prototype,\nu = Function.prototype,\np = Object.prototype,\nf = c.slice,\nl = p.toString,\nh = p.hasOwnProperty,\ng = [\"$WXMPLaunch\", \"$WXMPShow\", \"$WXMPHide\", \"$WXMPViewScreen\"],\nd = {\n  1001: \"发现栏小程序主入口，“最近使用”列表\",\n  1005: \"顶部搜索框的搜索结果页\",\n  1006: \"发现栏小程序主入口搜索框的搜索结果页\",\n  1007: \"单人聊天会话中的小程序消息卡片\",\n  1008: \"群聊会话中的小程序消息卡片\",\n  1011: \"扫描二维码\",\n  1012: \"长按图片识别二维码\",\n  1013: \"手机相册选取二维码\",\n  1014: \"小程序模版消息\",\n  1017: \"前往体验版的入口页\",\n  1019: \"微信钱包\",\n  1020: \"公众号 profile 页相关小程序列表\",\n  1022: \"聊天顶部置顶小程序入口\",\n  1023: \"安卓系统桌面图标\",\n  1024: \"小程序 profile 页\",\n  1025: \"扫描一维码\",\n  1026: \"附近小程序列表\",\n  1027: \"顶部搜索框搜索结果页“使用过的小程序”列表\",\n  1028: \"我的卡包\",\n  1029: \"卡券详情页\",\n  1030: \"自动化测试下打开小程序\",\n  1031: \"长按图片识别一维码\",\n  1032: \"手机相册选取一维码\",\n  1034: \"微信支付完成页\",\n  1035: \"公众号自定义菜单\",\n  1036: \"App 分享消息卡片\",\n  1037: \"小程序打开小程序\",\n  1038: \"从另一个小程序返回\",\n  1039: \"摇电视\",\n  1042: \"添加好友搜索框的搜索结果页\",\n  1043: \"公众号模板消息\",\n  1044: \"带 shareTicket 的小程序消息卡片（详情)\",\n  1045: \"朋友圈广告\",\n  1046: \"朋友圈广告详情页\",\n  1047: \"扫描小程序码\",\n  1048: \"长按图片识别小程序码\",\n  1049: \"手机相册选取小程序码\",\n  1052: \"卡券的适用门店列表\",\n  1053: \"搜一搜的结果页\",\n  1054: \"顶部搜索框小程序快捷入口\",\n  1056: \"音乐播放器菜单\",\n  1057: \"钱包中的银行卡详情页\",\n  1058: \"公众号文章\",\n  1059: \"体验版小程序绑定邀请页\",\n  1064: \"微信连Wi-Fi状态栏\",\n  1067: \"公众号文章广告\",\n  1068: \"附近小程序列表广告\",\n  1069: \"移动应用\",\n  1071: \"钱包中的银行卡列表页\",\n  1072: \"二维码收款页面\",\n  1073: \"客服消息列表下发的小程序消息卡片\",\n  1074: \"公众号会话下发的小程序消息卡片\",\n  1077: \"摇周边\",\n  1078: \"连Wi-Fi成功页\",\n  1079: \"微信游戏中心\",\n  1081: \"客服消息下发的文字链\",\n  1082: \"公众号会话下发的文字链\",\n  1084: \"朋友圈广告原生页\",\n  1089: \"微信聊天主界面下拉\",\n  1090: \"长按小程序右上角菜单唤出最近使用历史\",\n  1091: \"公众号文章商品卡片\",\n  1092: \"城市服务入口\",\n  1095: \"小程序广告组件\",\n  1096: \"聊天记录\",\n  1097: \"微信支付签约页\",\n  1099: \"页面内嵌插件\",\n  1102: \"公众号 profile 页服务预览\",\n  1103: \"发现栏小程序主入口，“我的小程序”列表\",\n  1104: \"微信聊天主界面下拉，“我的小程序”栏\" },\n\nm = \"直接打开\",\nv = null,\n_ = !1;\n\na.libVersion = \"1.0.0\";\nvar y = \"object\" == typeof y ? y : {};\n\nif (y.info = function () {\n  if (a.para.show_log && \"object\" == typeof console && console.log) try {\n    return console.log.apply(console, arguments);\n  } catch (e) {\n    console.log(__f__(arguments[0], \" at utils\\\\wxTrack\\\\track-stat.min.js:134\"));\n  }\n}, function () {\n  u.bind;\n\n  var e = c.forEach,\n  t = c.indexOf,\n  n = Array.isArray,\n  r = {},\n  i = o.each = function (t, o, n) {\n    if (null == t) return !1;\n    if (e && t.forEach === e) t.forEach(o, n);else\n    if (t.length === +t.length) {\n      for (var i = 0, a = t.length; i < a; i++) {\n        if (i in t && o.call(n, t[i], i, t) === r) return !1;}\n    } else\n    for (var s in t) {\n      if (h.call(t, s) && o.call(n, t[s], s, t) === r) return !1;}\n  };\n\n  o.logger = y, o.toCamelCase = function (e) {\n    return e.replace(/_([a-z])/g, function (e) {\n      return e[1].toUpperCase();\n    });\n  }, o.extend = function (e) {\n    return i(f.call(arguments, 1), function (t) {\n      for (var o in t) {void 0 !== t[o] && (e[o] = t[o]);}\n    }), e;\n  }, o.extend2Lev = function (e) {\n    return i(f.call(arguments, 1), function (t) {\n      for (var n in t) {void 0 !== t[n] && (o.isObject(t[n]) && o.isObject(e[n]) ? o.extend(e[n], t[n]) : e[n] = t[n]);}\n    }), e;\n  }, o.coverExtend = function (e) {\n    return i(f.call(arguments, 1), function (t) {\n      for (var o in t) {void 0 !== t[o] && void 0 === e[o] && (e[o] = t[o]);}\n    }), e;\n  }, o.isArray = n || function (e) {\n    return \"[object Array]\" === l.call(e);\n  }, o.isFunction = function (e) {\n    try {\n      return /^\\s*\\bfunction\\b/.test(e);\n    } catch (e) {\n      return !1;\n    }\n  }, o.isArguments = function (e) {\n    return !(!e || !h.call(e, \"callee\"));\n  }, o.toArray = function (e) {\n    return e ? e.toArray ? e.toArray() : o.isArray(e) ? f.call(e) : o.isArguments(e) ? f.call(e) : o.values(e) : [];\n  }, o.values = function (e) {\n    var t = [];\n    return null == e ? t : (i(e, function (e) {\n      t[t.length] = e;\n    }), t);\n  }, o.include = function (e, o) {\n    var n = !1;\n    return null == e ? n : t && e.indexOf === t ? -1 != e.indexOf(o) : (i(e, function (e) {\n      if (n || (n = e === o)) return r;\n    }), n);\n  };\n}(), o.trim = function (e) {\n  return e.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\n}, o.isObject = function (e) {\n  return \"[object Object]\" == l.call(e) && null != e;\n}, o.isEmptyObject = function (e) {\n  if (o.isObject(e)) {\n    for (var t in e) {\n      if (h.call(e, t)) return !1;}\n\n    return !0;\n  }\n\n  return !1;\n}, o.isUndefined = function (e) {\n  return void 0 === e;\n}, o.isString = function (e) {\n  return \"[object String]\" == l.call(e);\n}, o.isDate = function (e) {\n  return \"[object Date]\" == l.call(e);\n}, o.isBoolean = function (e) {\n  return \"[object Boolean]\" == l.call(e);\n}, o.isNumber = function (e) {\n  return \"[object Number]\" == l.call(e) && /[\\d\\.]+/.test(String(e));\n}, o.isJSONString = function (e) {\n  try {\n    JSON.parse(e);\n  } catch (e) {\n    return !1;\n  }\n\n  return !0;\n}, o.decodeURIComponent = function (e) {\n  var t = \"\";\n\n  try {\n    t = decodeURIComponent(e);\n  } catch (o) {\n    t = e;\n  }\n\n  return t;\n}, o.encodeDates = function (e) {\n  return o.each(e, function (t, n) {\n    o.isDate(t) ? e[n] = o.formatDate(t) : o.isObject(t) && (e[n] = o.encodeDates(t));\n  }), e;\n}, o.formatDate = function (e) {\n  function t(e) {\n    return e < 10 ? \"0\" + e : e;\n  }\n\n  return e.getFullYear() + \"-\" + t(e.getMonth() + 1) + \"-\" + t(e.getDate()) + \" \" + t(e.getHours()) + \":\" + t(e.getMinutes()) +\n  \":\" + t(e.getSeconds()) + \".\" + t(e.getMilliseconds());\n}, o.searchObjDate = function (e) {\n  o.isObject(e) && o.each(e, function (t, n) {\n    o.isObject(t) ? o.searchObjDate(e[n]) : o.isDate(t) && (e[n] = o.formatDate(t));\n  });\n}, o.formatString = function (e) {\n  return e.length > a.para.max_string_length ? (y.info(\"字符串长度超过限制，已经做截取--\" + e), e.slice(0, a.para.max_string_length)) :\n  e;\n}, o.searchObjString = function (e) {\n  o.isObject(e) && o.each(e, function (t, n) {\n    o.isObject(t) ? o.searchObjString(e[n]) : o.isString(t) && (e[n] = o.formatString(t));\n  });\n}, o.unique = function (e) {\n  for (var t, o = [], n = {}, r = 0; r < e.length; r++) {(t = e[r]) in n || (n[t] = !0, o.push(t));}\n\n  return o;\n}, o.strip_dt_properties = function (e) {\n  if (!o.isObject(e)) return e;\n  var t = o.strip_empty_properties(e);\n  return o.each(t, function (e, n) {\n    if (o.isArray(e)) {\n      var r = [];\n      o.each(e, function (t) {\n        o.isString(t) || o.isNumber(t) ? r.push(t) : y.info(\"您的数据-\", e, \"的数组里的值必须是字符串,已经将其删除\");\n      }), 0 !== r.length ? t[n] = r : (delete t[n], y.info(\"已经删除空的数组\"));\n    }\n\n    o.isString(e) || o.isNumber(e) || o.isDate(e) || o.isBoolean(e) || o.isArray(e) || (y.info(\"您的数据-\", e,\n    \"-格式不满足要求，我们已经将其删除\"), delete t[n]);\n  }), t;\n}, o.strip_empty_properties = function (e) {\n  var t = {};\n  return o.each(e, function (e, o) {\n    null != e && (t[o] = e);\n  }), t;\n}, o.utf8Encode = function (e) {\n  var t,\n  o,\n  n,\n  r,\n  i = \"\";\n\n  for (t = o = 0, r = (e = (e + \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")).length, n = 0; n < r; n++) {\n    var a = e.charCodeAt(n),\n    s = null;\n    a < 128 ? o++ : s = a > 127 && a < 2048 ? String.fromCharCode(a >> 6 | 192, 63 & a | 128) : String.fromCharCode(a >>\n    12 | 224, a >> 6 & 63 | 128, 63 & a | 128), null !== s && (o > t && (i += e.substring(t, o)), i += s, t = o = n +\n    1);\n  }\n\n  return o > t && (i += e.substring(t, e.length)), i;\n}, o.base64Encode = function (e) {\n  var t,\n  n,\n  r,\n  i,\n  a,\n  s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  c = 0,\n  u = 0,\n  p = \"\",\n  f = [];\n  if (!e) return e;\n  e = o.utf8Encode(e);\n\n  do {\n    t = (a = e.charCodeAt(c++) << 16 | e.charCodeAt(c++) << 8 | e.charCodeAt(c++)) >> 18 & 63, n = a >> 12 & 63, r = a >>\n    6 & 63, i = 63 & a, f[u++] = s.charAt(t) + s.charAt(n) + s.charAt(r) + s.charAt(i);\n  } while (c < e.length);\n\n  switch (p = f.join(\"\"), e.length % 3) {\n    case 1:\n      p = p.slice(0, -2) + \"==\";\n      break;\n\n    case 2:\n      p = p.slice(0, -1) + \"=\";}\n\n\n  return p;\n}, o.getCurrentPath = function () {\n  var e = \"未取到\";\n\n  try {\n    var t = getCurrentPages();\n    t.length && (e = t[t.length - 1].route);\n  } catch (e) {\n    y.info(e);\n  }\n\n  return e;\n}, o.getQueryParam = function (e, t) {\n  var n = new RegExp(\"[\\\\?&]\" + t + \"=([^&#]*)\").exec(e);\n  return null === n || n && \"string\" != typeof n[1] && n[1].length ? \"\" : o.decodeURIComponent(n[1]);\n}, o.convertObjToParam = function (e) {\n  var t = [];\n\n  for (var o in e) {t.push(o + \"=\" + e[o]);}\n\n  return t.join(\"&\");\n}, o.getObjFromQuery = function (e) {\n  var t = e.split(\"?\"),\n  n = {};\n  return t && t[1] ? (o.each(t[1].split(\"&\"), function (e) {\n    var t = e.split(\"=\");\n    t[0] && t[1] && (n[t[0]] = t[1]);\n  }), n) : {};\n}, o.getMPScene = function (e) {\n  return \"number\" == typeof e || \"string\" == typeof e && \"\" !== e ? (e = String(e)) || d[e] : \"未取到值\";\n}, o.info = {\n  userInfo: !1,\n  getGPS: !1,\n  properties: {\n    $lib: \"WXMP\",\n    $lib_version: String(\"1.0.0\"),\n    $brand: \"devtools\" },\n\n  getUserInfo: function getUserInfo() {\n    var e = this.userInfo,\n    t = this.properties;\n    e || wx.getSetting({\n      success: function success(t) {\n        !e && t.authSetting && t.authSetting[\"scope.userInfo\"] && (e = !0);\n      },\n      complete: function complete() {\n        wx.getStorage({\n          key: \"userInfo\",\n          success: function success(o) {\n            t.$au = o.data.head_pic, t.$nn = o.data.nickname, e = !0;\n          } });\n\n      } });\n\n  },\n  getLocation: function getLocation() {\n    var e = this.properties;\n    this.getGPS, wx.getLocation({\n      type: \"wgs84\",\n      success: function success(t) {\n        e.$latitude = t.latitude, e.$longitude = t.longitude, e.$speed = t.speed, e.$accuracy = t.accuracy;\n      } });\n\n  },\n  getInfo: function getInfo() {\n    var e = this.userInfo,\n    t = this.getGPS;\n    e || this.getUserInfo(), !t && s.getLocation && this.getLocation();\n  },\n  getSystem: function getSystem() {\n    var e = this.properties;\n    wx.getNetworkType({\n      success: function success(t) {\n        e.$networkType = t.networkType;\n      },\n      complete: function complete() {\n        wx.getSystemInfo({\n          success: function success(t) {\n            e.$brand = t.brand, e.$model = t.model, e.$screenWidth = Number(t.windowWidth), e.$screenHeight = Number(\n            t.windowHeight), e.$os = t.system.split(\" \")[0], e.$osVersion = t.system.split(\" \")[1], e.$wxVersion =\n            t.version;\n          },\n          complete: function complete() {\n            a.initialState.systemIsComplete = !0, a.initialState.checkIsComplete(), o.info.getInfo();\n          } });\n\n      } });\n\n  } },\na._ = o, a.initialState = {\n  queue: [],\n  isComplete: !1,\n  systemIsComplete: !1,\n  storeIsComplete: !1,\n  checkIsComplete: function checkIsComplete() {\n    this.systemIsComplete && this.storeIsComplete && (this.isComplete = !0, this.queue.length > 0 && (o.each(this.queue,\n    function (e) {\n      a[e[0]].apply(a, f.call(e[1]));\n    }), a.queue = []));\n  } },\na.prepareData = function (e, t) {\n  var n = {\n    $distinct_id: this.store.getDistinctId(),\n    $lib: \"WXMP\",\n    $lib_method: \"code\",\n    $lib_version: String(\"1.0.0\"),\n    $tm: new Date().valueOf(),\n    properties: {} };\n\n  o.extend(n, e), o.isObject(e.properties) && !o.isEmptyObject(e.properties) && o.extend(n.properties, e.properties), e.\n  type && \"profile\" === e.type.slice(0, 7) || (n.properties = o.extend({}, o.info.properties, a.store.getProps(), n.properties),\n  \"object\" == typeof a.store._state && \"number\" == typeof a.store._state.first_visit_day_time && a.store._state.first_visit_day_time >\n  new Date().getTime() ? n.properties.$isFirstDay = !0 : n.properties.$isFirstDay = !1), n.properties.$time && o.isDate(\n  n.properties.$time) ? (n.time = 1 * n.properties.$time, delete n.properties.$time) : a.para.use_client_time && (n.time =\n  1 * new Date()), n.properties.$urlPath || (n.properties.$urlPath = o.getCurrentPath()), o.searchObjDate(n), o.searchObjString(\n  n), o.each(n.properties, function (e, t) {\n    n[t] = e;\n  }), delete n.properties, a.send(n, t);\n}, a.store = {\n  storageInfo: null,\n  getUUID: function getUUID() {\n    return Date.now() + \"-\" + Math.floor(1e7 * Math.random()) + \"-\" + Math.random().toString(16).replace(\".\", \"\") + \"-\" +\n    String(31242 * Math.random()).replace(\".\", \"\").slice(0, 8);\n  },\n  getStorage: function getStorage() {\n    return this.storageInfo ? this.storageInfo : (this.storageInfo = wx.getStorageSync(\"dtwave2018_wechat\") || \"\", this.\n    storageInfo);\n  },\n  _state: {},\n  toState: function toState(e) {\n    var t = null;\n    o.isJSONString(e) ? (t = JSON.parse(e)).distinct_id ? this._state = t : this.set(\"distinct_id\", this.getUUID()) : o.\n    isObject(e) && (t = e).distinct_id ? this._state = t : this.set(\"distinct_id\", this.getUUID());\n  },\n  getFirstId: function getFirstId() {\n    return this._state.first_id;\n  },\n  getDistinctId: function getDistinctId() {\n    return this._state.distinct_id;\n  },\n  getProps: function getProps() {\n    return this._state.props || {};\n  },\n  setProps: function setProps(e, t) {\n    var n = this._state.props || {};\n    t ? this.set(\"props\", e) : (o.extend(n, e), this.set(\"props\", n));\n  },\n  set: function set(e, t) {\n    var o = {};\n\n    for (var n in \"string\" == typeof e ? o[e] = t : \"object\" == typeof e && (o = e), this._state = this._state || {}, o) {\n      this._state[n] = o[n];}\n\n    this.save();\n  },\n  change: function change(e, t) {\n    this._state[e] = t;\n  },\n  save: function save() {\n    wx.setStorageSync(\"dtwave2018_wechat\", this._state);\n  },\n  init: function init() {\n    var e = this.getStorage();\n    if (e) this.toState(e);else\n    {\n      _ = !0;\n      var t = new Date(),\n      o = t.getTime();\n      t.setHours(23), t.setMinutes(59), t.setSeconds(60), this.set({\n        distinct_id: this.getUUID(),\n        first_visit_time: o,\n        first_visit_day_time: t.getTime() });\n\n    }\n  } },\na._registerParams = function (e) {\n  o.isObject(e) && !o.isEmptyObject(e) && (o.info.properties = o.extend(o.info.properties, e));\n}, a.registerParams = function (e) {\n  var t = new RegExp(\"^[/_]+\");\n\n  if (o.isObject(e) && !o.isEmptyObject(e)) {\n    var n = {};\n    o.each(e, function (e, o) {\n      if (i.test(o)) r = \"_\" + o.replace(i, \"\"), console.warn(__f__(\"将event_name:\" + o + \"转换为\" + r, \" at utils\\\\wxTrack\\\\track-stat.min.js:506\")), n[r] = e;else\n      if (t.test(o)) {\n        var r = o.replace(t, \"_\");\n        console.warn(__f__(\"将event_name:\" + o + \"转换为\" + r, \" at utils\\\\wxTrack\\\\track-stat.min.js:509\")), n[r] = e;\n      } else n[\"_\" + o] = e;\n    }), o.info.properties = o.extend(o.info.properties, n);\n  }\n}, a.register = function (e) {\n  o.isObject(e) && !o.isEmptyObject(e) && a.store.setProps(e);\n}, a.clearAllRegister = function () {\n  a.store.setProps({}, !0);\n}, a.openid = {\n  getRequest: function getRequest(e) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n  },\n  getWXStorage: function getWXStorage() {\n    var e = a.store.getStorage();\n    if (e && o.isObject(e)) return e.openid;\n  },\n  getOpenid: function getOpenid(e) {\n    if (!a.para.appid) return e(), !1;\n    var t = this.getWXStorage();\n    t ? e(t) : this.getRequest(e);\n  } },\na.initial = function () {\n  this._.info.getSystem(), this.store.init(), o.isObject(this.para.register) && (o.info.properties = o.extend(o.info.properties,\n  this.para.register));\n}, a.init = function (e) {\n  o.isObject(e) && (a.para = o.extend(a.para, e)), a.initialState.storeIsComplete = !0, a.initialState.checkIsComplete();\n}, a.getPresetProperties = function () {\n  if (o.info && o.info.properties && o.info.properties.$lib) {\n    var e = o.extend({\n      $urlPath: o.getCurrentPath() },\n    o.info.properties, a.store.getProps());\n    return delete e.$lib, e;\n  }\n\n  return {};\n}, o.autoExeQueue = function () {\n  return {\n    items: [],\n    enqueue: function enqueue(e) {\n      this.items.push(e), this.start();\n    },\n    dequeue: function dequeue() {\n      return this.items.shift();\n    },\n    getCurrentItem: function getCurrentItem() {\n      return this.items[0];\n    },\n    isRun: !1,\n    start: function start() {\n      this.items.length > 0 && !this.isRun && (this.isRun = !0, this.getCurrentItem().start());\n    },\n    close: function close() {\n      this.dequeue(), this.isRun = !1, this.start();\n    } };\n\n}, a.requestQueue = function (e) {\n  this.url = e.url;\n}, a.requestQueue.prototype.isEnd = function () {\n  this.received || (this.received = !0, this.close());\n}, a.requestQueue.prototype.start = function () {\n  var e = this;\n  setTimeout(function () {\n    e.isEnd();\n  }, a.para.send_timeout), wx.request({\n    url: this.url,\n    method: \"GET\",\n    complete: function complete() {\n      e.isEnd();\n    } });\n\n}, a.dataQueue = o.autoExeQueue(), a.send = function (e) {\n  var t;\n  o.info.getInfo(), (e = o.strip_dt_properties(e))._nocache = (String(Math.random()) + String(Math.random()) + String(\n  Math.random())).slice(2, 15), y.info(e), e = JSON.stringify(e), t = -1 !== a.para.server_url.indexOf(\"?\") ? a.para.server_url +\n  \"&data=\" + encodeURIComponent(o.base64Encode(e)) : a.para.server_url + \"?data=\" + encodeURIComponent(o.base64Encode(\n  e));\n  var n = new a.requestQueue({\n    url: t });\n\n  n.close = function () {\n    a.dataQueue.close();\n  }, a.dataQueue.enqueue(n);\n}, a.track = function (e, t, n) {\n  if (g.indexOf(e) >= 0) t.$isDefaultTrack = !0;else\n  {\n    if (i.test(e)) {\n      var r = e.replace(i, \"\");\n      console.warn(__f__(\"将event_name: \" + e + \" 转换为 \" + r, \" at utils\\\\wxTrack\\\\track-stat.min.js:608\")), e = r;\n    }\n\n    if (o.isObject(t)) {\n      var a = {};\n      o.each(t, function (e, t) {\n        var o = t.replace(i, \"\");\n        a[o] = e, console.warn(__f__(\"将key: \" + t + \" 转换为 \" + o, \" at utils\\\\wxTrack\\\\track-stat.min.js:615\"));\n      }), t = a;\n    }\n  }\n  this.prepareData({\n    $type: \"track\",\n    $project_id: this.para.project_id || s.appid,\n    $appid: this.para.appid || s.appid,\n    $event_name: e,\n    properties: t },\n  n);\n}, a.autoTrackCustom = function (e, t, n) {\n  var r = a.para.autoTrack[e],\n  i = \"\";\n  a.para.autoTrack && r && (\"function\" == typeof r ? (i = r(), o.isObject(i) && o.extend(t, i)) : o.isObject(r) && (o.extend(\n  t, r), a.para.autoTrack[e] = !0), a.track(n, t));\n}, o.each([\"track\", \"register\", \"clearAllRegister\", \"autoTrackCustom\", \"registerParams\"], function (e) {\n  var t = a[e];\n\n  a[e] = function () {\n    a.initialState.isComplete ? t.apply(a, arguments) : a.initialState.queue.push([e, arguments]);\n  };\n}), !1 !== a.para.autoTrack) {\n  var b = App;\n\n  App = function App(o) {\n    e(o, \"onLaunch\", t), e(o, \"onShow\", r), e(o, \"onHide\", n), b(o);\n  };\n\n  var S = Page;\n\n  Page = function Page(t) {\n    e(t, \"onLoad\", function (e) {\n      if (e && o.isObject(e)) {\n        var t = o.extend({}, e);\n\n        if (e.q && o.extend(t, o.getObjFromQuery(o.decodeURIComponent(e.q))), e.scene) {\n          var n = e.scene;\n          n = -1 !== (n = o.decodeURIComponent(n)).indexOf(\"?\") ? \"?\" + n.replace(/\\?/g, \"\") : \"?\" + n, o.extend(t, o.getObjFromQuery(\n          n));\n        }\n      }\n    }), e(t, \"onShow\", function () {\n      var e = \"系统没有取到值\";\n      \"object\" == typeof this && (\"string\" == typeof this.route ? e = this.route : \"string\" == typeof this.__route__ && (\n      e = this.__route__));\n      var t = {};\n      wl.info({\n        name: \"route\",\n        url: e }),\n      t.$referrer = m, t.$urlPath = e, this.sensors_mp_load_utm && (o.extend(t, this.sensors_mp_load_utm), this.sensors_mp_load_utm =\n      null), a.para.onshow ? a.para.onshow(sa, e, this) : a.autoTrackCustom(\"pageShow\", t, \"$WXMPViewScreen\"), m = e;\n    }), \"function\" == typeof t.onShareAppMessage && t.onShareAppMessage, S.apply(this, arguments);\n  };\n}\n\na.initial(), module.exports = a;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 8)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61\n");

/***/ }),

/***/ 610:
/*!*****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-order%2Forder-detail"} ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderDetail = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-order/order-detail.vue */ 611));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderDetail.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxxSDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI2MTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LW9yZGVyL29yZGVyLWRldGFpbC52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///610\n");

/***/ }),

/***/ 618:
/*!***************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-order%2Forder-back"} ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _orderBack = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-order/order-back.vue */ 619));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_orderBack.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxpSDtBQUNBQSxVQUFVLENBQUNDLGtCQUFELENBQVYsQyIsImZpbGUiOiI2MTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LW9yZGVyL29yZGVyLWJhY2sudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///618\n");

/***/ }),

/***/ 62:
/*!******************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/utils/wxTrack/config.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var conf = {\n  // 分析注册在APP全局函数中的变量名，在非app.js中可以通过getApp().sensors(你这里定义的名字来使用)\n  name: 'trackstat',\n  // 项目id\n  project_id: '',\n  // 如果要通过sdk自动获取openid，需要在分析中配置appid和appsercret，并在这里标志appid,不需要的话，不用填。\n  appid: 'wx4b9a7f38ab66c90e',\n  // 分析数据接收地址\n  //测试服\n  server_url: 'https://api-t.st-llshop.surex.cc/v1/report/reportLog',\n  //正式服\n  // server_url: 'https://wx.shop.haoyousheng.com.cn/v1/report/reportLog',\n  //请求发送超时时间\n  send_timeout: 1000,\n  // 传入的字符串最大长度限制，防止未知字符串超长\n  max_string_length: 300,\n  // 发送事件的时间使用客户端时间还是服务端时间\n  use_client_time: false,\n  // 是否允许控制台打印查看埋点数据（建议开启查看）\n  show_log: false,\n  // 是否允许修改onShareMessage里return的path，用来增加（用户id，分享层级，当前的path），在app onshow中自动获取这些参数来查看具体分享来源，层级等\n  allow_amend_share_path: true,\n  // 是否自动采集如下事件（建议开启）\n  autoTrack: {\n    appLaunch: true,\n    //是否采集 $MPLaunch 事件，true 代表开启。\n    appShow: true,\n    //是否采集 $MPShow 事件，true 代表开启。\n    appHide: true,\n    //是否采集 $MPHide 事件，true 代表开启。\n    pageShow: true //是否采集 $MPViewScreen 事件，true 代表开启。\n  },\n\n  // 是否授权在小程序启动时采集用户的GPS信息，如果要求采集需要先请求登陆\n  getLocation: true };\n\nmodule.exports = conf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvd3hUcmFjay9jb25maWcuanMiXSwibmFtZXMiOlsiY29uZiIsIm5hbWUiLCJwcm9qZWN0X2lkIiwiYXBwaWQiLCJzZXJ2ZXJfdXJsIiwic2VuZF90aW1lb3V0IiwibWF4X3N0cmluZ19sZW5ndGgiLCJ1c2VfY2xpZW50X3RpbWUiLCJzaG93X2xvZyIsImFsbG93X2FtZW5kX3NoYXJlX3BhdGgiLCJhdXRvVHJhY2siLCJhcHBMYXVuY2giLCJhcHBTaG93IiwiYXBwSGlkZSIsInBhZ2VTaG93IiwiZ2V0TG9jYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxJQUFJLEdBQUc7QUFDVDtBQUNBQyxNQUFJLEVBQUUsV0FGRztBQUdUO0FBQ0FDLFlBQVUsRUFBRSxFQUpIO0FBS1Q7QUFDQUMsT0FBSyxFQUFFLG9CQU5FO0FBT1Q7QUFDQTtBQUNBQyxZQUFVLEVBQUUsc0RBVEg7QUFVVDtBQUNBO0FBQ0E7QUFDQUMsY0FBWSxFQUFFLElBYkw7QUFjVDtBQUNBQyxtQkFBaUIsRUFBRSxHQWZWO0FBZ0JUO0FBQ0FDLGlCQUFlLEVBQUUsS0FqQlI7QUFrQlQ7QUFDQUMsVUFBUSxFQUFFLEtBbkJEO0FBb0JUO0FBQ0FDLHdCQUFzQixFQUFFLElBckJmO0FBc0JUO0FBQ0FDLFdBQVMsRUFBRTtBQUNUQyxhQUFTLEVBQUUsSUFERjtBQUVUO0FBQ0FDLFdBQU8sRUFBRSxJQUhBO0FBSVQ7QUFDQUMsV0FBTyxFQUFFLElBTEE7QUFNVDtBQUNBQyxZQUFRLEVBQUUsSUFQRCxDQU9NO0FBUE4sR0F2QkY7O0FBaUNUO0FBQ0FDLGFBQVcsRUFBRSxJQWxDSixFQUFYOztBQW9DQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsSUFBakIiLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uZiA9IHtcbiAgLy8g5YiG5p6Q5rOo5YaM5ZyoQVBQ5YWo5bGA5Ye95pWw5Lit55qE5Y+Y6YeP5ZCN77yM5Zyo6Z2eYXBwLmpz5Lit5Y+v5Lul6YCa6L+HZ2V0QXBwKCkuc2Vuc29ycyjkvaDov5nph4zlrprkuYnnmoTlkI3lrZfmnaXkvb/nlKgpXG4gIG5hbWU6ICd0cmFja3N0YXQnLFxuICAvLyDpobnnm65pZFxuICBwcm9qZWN0X2lkOiAnJyxcbiAgLy8g5aaC5p6c6KaB6YCa6L+Hc2Rr6Ieq5Yqo6I635Y+Wb3Blbmlk77yM6ZyA6KaB5Zyo5YiG5p6Q5Lit6YWN572uYXBwaWTlkoxhcHBzZXJjcmV077yM5bm25Zyo6L+Z6YeM5qCH5b+XYXBwaWQs5LiN6ZyA6KaB55qE6K+d77yM5LiN55So5aGr44CCXG4gIGFwcGlkOiAnd3g0YjlhN2YzOGFiNjZjOTBlJyxcbiAgLy8g5YiG5p6Q5pWw5o2u5o6l5pS25Zyw5Z2AXG4gIC8v5rWL6K+V5pyNXG4gIHNlcnZlcl91cmw6ICdodHRwczovL2FwaS10LnN0LWxsc2hvcC5zdXJleC5jYy92MS9yZXBvcnQvcmVwb3J0TG9nJyxcbiAgLy/mraPlvI/mnI1cbiAgLy8gc2VydmVyX3VybDogJ2h0dHBzOi8vd3guc2hvcC5oYW95b3VzaGVuZy5jb20uY24vdjEvcmVwb3J0L3JlcG9ydExvZycsXG4gIC8v6K+35rGC5Y+R6YCB6LaF5pe25pe26Ze0XG4gIHNlbmRfdGltZW91dDogMTAwMCxcbiAgLy8g5Lyg5YWl55qE5a2X56ym5Liy5pyA5aSn6ZW/5bqm6ZmQ5Yi277yM6Ziy5q2i5pyq55+l5a2X56ym5Liy6LaF6ZW/XG4gIG1heF9zdHJpbmdfbGVuZ3RoOiAzMDAsXG4gIC8vIOWPkemAgeS6i+S7tueahOaXtumXtOS9v+eUqOWuouaIt+err+aXtumXtOi/mOaYr+acjeWKoeerr+aXtumXtFxuICB1c2VfY2xpZW50X3RpbWU6IGZhbHNlLFxuICAvLyDmmK/lkKblhYHorrjmjqfliLblj7DmiZPljbDmn6XnnIvln4vngrnmlbDmja7vvIjlu7rorq7lvIDlkK/mn6XnnIvvvIlcbiAgc2hvd19sb2c6IGZhbHNlLFxuICAvLyDmmK/lkKblhYHorrjkv67mlLlvblNoYXJlTWVzc2FnZemHjHJldHVybueahHBhdGjvvIznlKjmnaXlop7liqDvvIjnlKjmiLdpZO+8jOWIhuS6q+Wxgue6p++8jOW9k+WJjeeahHBhdGjvvInvvIzlnKhhcHAgb25zaG935Lit6Ieq5Yqo6I635Y+W6L+Z5Lqb5Y+C5pWw5p2l5p+l55yL5YW35L2T5YiG5Lqr5p2l5rqQ77yM5bGC57qn562JXG4gIGFsbG93X2FtZW5kX3NoYXJlX3BhdGg6IHRydWUsXG4gIC8vIOaYr+WQpuiHquWKqOmHh+mbhuWmguS4i+S6i+S7tu+8iOW7uuiuruW8gOWQr++8iVxuICBhdXRvVHJhY2s6IHtcbiAgICBhcHBMYXVuY2g6IHRydWUsXG4gICAgLy/mmK/lkKbph4fpm4YgJE1QTGF1bmNoIOS6i+S7tu+8jHRydWUg5Luj6KGo5byA5ZCv44CCXG4gICAgYXBwU2hvdzogdHJ1ZSxcbiAgICAvL+aYr+WQpumHh+mbhiAkTVBTaG93IOS6i+S7tu+8jHRydWUg5Luj6KGo5byA5ZCv44CCXG4gICAgYXBwSGlkZTogdHJ1ZSxcbiAgICAvL+aYr+WQpumHh+mbhiAkTVBIaWRlIOS6i+S7tu+8jHRydWUg5Luj6KGo5byA5ZCv44CCXG4gICAgcGFnZVNob3c6IHRydWUgLy/mmK/lkKbph4fpm4YgJE1QVmlld1NjcmVlbiDkuovku7bvvIx0cnVlIOS7o+ihqOW8gOWQr+OAglxuXG4gIH0sXG4gIC8vIOaYr+WQpuaOiOadg+WcqOWwj+eoi+W6j+WQr+WKqOaXtumHh+mbhueUqOaIt+eahEdQU+S/oeaBr++8jOWmguaenOimgeaxgumHh+mbhumcgOimgeWFiOivt+axgueZu+mZhlxuICBnZXRMb2NhdGlvbjogdHJ1ZVxufTtcbm1vZHVsZS5leHBvcnRzID0gY29uZjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n");

/***/ }),

/***/ 626:
/*!**********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fteam-list%2Fteam-list"} ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _teamList = _interopRequireDefault(__webpack_require__(/*! ./packageA/team-list/team-list.vue */ 627));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_teamList.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwyRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI2MjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90ZWFtLWxpc3QvdGVhbS1saXN0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///626\n");

/***/ }),

/***/ 634:
/*!****************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fteam-product%2Fteam-product"} ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _teamProduct = _interopRequireDefault(__webpack_require__(/*! ./packageA/team-product/team-product.vue */ 635));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_teamProduct.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxvSDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI2MzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90ZWFtLXByb2R1Y3QvdGVhbS1wcm9kdWN0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///634\n");

/***/ }),

/***/ 642:
/*!********************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Ftakeout-coupon%2Ftakeout-coupon"} ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _takeoutCoupon = _interopRequireDefault(__webpack_require__(/*! ./packageA/takeout-coupon/takeout-coupon.vue */ 643));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_takeoutCoupon.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSwwSDtBQUNBQSxVQUFVLENBQUNDLHNCQUFELENBQVYsQyIsImZpbGUiOiI2NDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS90YWtlb3V0LWNvdXBvbi90YWtlb3V0LWNvdXBvbi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///642\n");

/***/ }),

/***/ 65:
/*!***********************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Findex%2Findex"} ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _index = _interopRequireDefault(__webpack_require__(/*! ./pages/index/index.vue */ 66));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_index.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0RjtBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICd1bmktcGFnZXMnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZScgICAgICAgICAgICBcbmltcG9ydCBQYWdlIGZyb20gJy4vcGFnZXMvaW5kZXgvaW5kZXgudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n");

/***/ }),

/***/ 650:
/*!****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Fpacket%2Fpacket"} ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _packet = _interopRequireDefault(__webpack_require__(/*! ./packageA/packet/packet.vue */ 651));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_packet.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxtRztBQUNBQSxVQUFVLENBQUNDLGVBQUQsQ0FBVixDIiwiZmlsZSI6IjY1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhY2thZ2VBL3BhY2tldC9wYWNrZXQudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///650\n");

/***/ }),

/***/ 658:
/*!******************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageA%2Flogistics%2Fnodelivery_detail"} ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _nodelivery_detail = _interopRequireDefault(__webpack_require__(/*! ./packageA/logistics/nodelivery_detail.vue */ 659));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_nodelivery_detail.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0SDtBQUNBQSxVQUFVLENBQUNDLDBCQUFELENBQVYsQyIsImZpbGUiOiI2NTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQS9sb2dpc3RpY3Mvbm9kZWxpdmVyeV9kZXRhaWwudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///658\n");

/***/ }),

/***/ 666:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Fquestion%2Fquestion"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _question = _interopRequireDefault(__webpack_require__(/*! ./packageB/question/question.vue */ 667));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_question.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI2NjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi9xdWVzdGlvbi9xdWVzdGlvbi52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///666\n");

/***/ }),

/***/ 674:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Frituall%2Frituall"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _rituall = _interopRequireDefault(__webpack_require__(/*! ./packageB/rituall/rituall.vue */ 675));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_rituall.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI2NzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi9yaXR1YWxsL3JpdHVhbGwudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///674\n");

/***/ }),

/***/ 682:
/*!**************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Faddress%2Fuser-address%2Fuser-address"} ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _userAddress = _interopRequireDefault(__webpack_require__(/*! ./packageB/address/user-address/user-address.vue */ 683));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_userAddress.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSw0SDtBQUNBQSxVQUFVLENBQUNDLG9CQUFELENBQVYsQyIsImZpbGUiOiI2ODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi9hZGRyZXNzL3VzZXItYWRkcmVzcy91c2VyLWFkZHJlc3MudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///682\n");

/***/ }),

/***/ 690:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Faddress%2Faddress"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _address = _interopRequireDefault(__webpack_require__(/*! ./packageB/address/address.vue */ 691));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_address.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxzRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI2OTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi9hZGRyZXNzL2FkZHJlc3MudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///690\n");

/***/ }),

/***/ 698:
/*!******************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Ftools%2Fturntable"} ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _turntable = _interopRequireDefault(__webpack_require__(/*! ./packageB/tools/turntable.vue */ 699));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_turntable.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx3RztBQUNBQSxVQUFVLENBQUNDLGtCQUFELENBQVYsQyIsImZpbGUiOiI2OTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi90b29scy90dXJudGFibGUudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///698\n");

/***/ }),

/***/ 706:
/*!**************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Ftopay%2Ftopay"} ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _topay = _interopRequireDefault(__webpack_require__(/*! ./packageB/topay/topay.vue */ 707));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_topay.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnRztBQUNBQSxVQUFVLENBQUNDLGNBQUQsQ0FBVixDIiwiZmlsZSI6IjcwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhY2thZ2VCL3RvcGF5L3RvcGF5LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///706\n");

/***/ }),

/***/ 714:
/*!************************************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Finvitation-share%2Finvitation-share"} ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _invitationShare = _interopRequireDefault(__webpack_require__(/*! ./packageB/invitation-share/invitation-share.vue */ 715));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_invitationShare.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxnSTtBQUNBQSxVQUFVLENBQUNDLHdCQUFELENBQVYsQyIsImZpbGUiOiI3MTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi9pbnZpdGF0aW9uLXNoYXJlL2ludml0YXRpb24tc2hhcmUudnVlJ1xuY3JlYXRlUGFnZShQYWdlKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///714\n");

/***/ }),

/***/ 722:
/*!********************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"packageB%2Fwithdraw%2Fwithdraw"} ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _withdraw = _interopRequireDefault(__webpack_require__(/*! ./packageB/withdraw/withdraw.vue */ 723));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_withdraw.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI3MjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3VuaS1wYWdlcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJyAgICAgICAgICAgIFxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWNrYWdlQi93aXRoZHJhdy93aXRoZHJhdy52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///722\n");

/***/ }),

/***/ 73:
/*!*****************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fcategory%2Fcategory"} ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _category = _interopRequireDefault(__webpack_require__(/*! ./pages/category/category.vue */ 74));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_category.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxxRztBQUNBQSxVQUFVLENBQUNDLGlCQUFELENBQVYsQyIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL2NhdGVnb3J5L2NhdGVnb3J5LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n");

/***/ }),

/***/ 8:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdHlwb2YgKHYpIHtcclxuICBjb25zdCBzID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpXHJcbiAgcmV0dXJuIHMuc3Vic3RyaW5nKDgsIHMubGVuZ3RoIC0gMSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICguLi5hcmdzKSB7XHJcbiAgY29uc3QgbXNncyA9IGFyZ3MubWFwKCh2KSA9PiB7XHJcbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcclxuICAgICAgICBpZiAodlR5cGUgPT09ICdOVU1CRVInIHx8IHZUeXBlID09PSAnQk9PTEVBTicpIHtcclxuICAgICAgICAgIHYgPSAnLS0tQkVHSU46JyArIHZUeXBlICsgJy0tLScgKyB2ICsgJy0tLUVORDonICsgdlR5cGUgKyAnLS0tJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2ID0gU3RyaW5nKHYpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgbGV0IG1zZyA9ICcnXHJcbiAgaWYgKG1zZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgY29uc3QgbGFzdE1zZyA9IG1zZ3MucG9wKClcclxuICAgIG1zZyA9IG1zZ3Muam9pbignLS0tQ09NTUEtLS0nKVxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuICByZXR1cm4gbXNnXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 81:
/*!*********************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fcart%2Fcart"} ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _cart = _interopRequireDefault(__webpack_require__(/*! ./pages/cart/cart.vue */ 82));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_cart.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RjtBQUNBQSxVQUFVLENBQUNDLGFBQUQsQ0FBVixDIiwiZmlsZSI6IjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICd1bmktcGFnZXMnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZScgICAgICAgICAgICBcbmltcG9ydCBQYWdlIGZyb20gJy4vcGFnZXMvY2FydC9jYXJ0LnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n");

/***/ }),

/***/ 89:
/*!*********************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fuser%2Fuser"} ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _user = _interopRequireDefault(__webpack_require__(/*! ./pages/user/user.vue */ 90));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_user.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSx5RjtBQUNBQSxVQUFVLENBQUNDLGFBQUQsQ0FBVixDIiwiZmlsZSI6Ijg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICd1bmktcGFnZXMnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZScgICAgICAgICAgICBcbmltcG9ydCBQYWdlIGZyb20gJy4vcGFnZXMvdXNlci91c2VyLnZ1ZSdcbmNyZWF0ZVBhZ2UoUGFnZSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///89\n");

/***/ }),

/***/ 97:
/*!***************************************************************************************************!*\
  !*** C:/Users/xhz/Desktop/project/mmt 10.11 - 20.30/main.js?{"page":"pages%2Fproduct%2Fproduct"} ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ 4);\n\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _product = _interopRequireDefault(__webpack_require__(/*! ./pages/product/product.vue */ 98));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\ncreatePage(_product.default);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"createPage\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbImNyZWF0ZVBhZ2UiLCJQYWdlIl0sIm1hcHBpbmdzIjoia0RBQUE7O0FBRUE7QUFDQSxrRztBQUNBQSxVQUFVLENBQUNDLGdCQUFELENBQVYsQyIsImZpbGUiOiI5Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnICAgICAgICAgICAgXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2VzL3Byb2R1Y3QvcHJvZHVjdC52dWUnXG5jcmVhdGVQYWdlKFBhZ2UpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///97\n");

/***/ })

}]);